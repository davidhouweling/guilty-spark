diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/classes/XRError.d.ts b/node_modules/@xboxreplay/xboxlive-auth/dist/classes/XRError.d.ts
index 46f4729..30d7ecb 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/classes/XRError.d.ts
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/classes/XRError.d.ts
@@ -1,4 +1,4 @@
-declare type XRErrorDetails = {
+type XRErrorDetails = {
     statusCode: number;
     reason: keyof typeof XRErrorReasons;
     additional: any;
@@ -14,11 +14,11 @@ declare enum XRErrorReasons {
 declare class XRError extends Error {
     readonly __XboxReplay__ = true;
     readonly details: XRErrorDetails;
-    static badRequest: (message?: string, additional?: XRErrorDetails['additional']) => XRError;
-    static unauthorized: (message?: string, additional?: XRErrorDetails['additional']) => XRError;
-    static forbidden: (message?: string, additional?: XRErrorDetails['additional']) => XRError;
-    static tooManyRequests: (message?: string, additional?: XRErrorDetails['additional']) => XRError;
-    static internal: (message?: string, additional?: XRErrorDetails['additional']) => XRError;
+    static badRequest: (message?: string, additional?: XRErrorDetails["additional"]) => XRError;
+    static unauthorized: (message?: string, additional?: XRErrorDetails["additional"]) => XRError;
+    static forbidden: (message?: string, additional?: XRErrorDetails["additional"]) => XRError;
+    static tooManyRequests: (message?: string, additional?: XRErrorDetails["additional"]) => XRError;
+    static internal: (message?: string, additional?: XRErrorDetails["additional"]) => XRError;
     constructor(message?: string, details?: Omit<Partial<XRErrorDetails>, 'reason'>);
     getMessage(): string;
     getDetails(): XRErrorDetails;
diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.d.ts b/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.d.ts
index f82e9ec..24e7433 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.d.ts
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.d.ts
@@ -1,6 +1,6 @@
 import { LiveAuthResponse, LiveCredentials, LivePreAuthResponse, LivePreAuthOptions } from '../..';
-export declare const getAuthorizeUrl: (clientId?: string, scope?: string, responseType?: 'token' | 'code', redirectUri?: string) => string;
-export declare const exchangeCodeForAccessToken: (code: string, clientId: string, scope: string, redirectUri: string, clientSecret?: string | undefined) => Promise<LiveAuthResponse>;
-export declare const refreshAccessToken: (refreshToken: string, clientId?: string, scope?: string, clientSecret?: string | undefined) => Promise<LiveAuthResponse>;
-export declare const preAuth: (options?: LivePreAuthOptions | undefined) => Promise<LivePreAuthResponse>;
+export declare const getAuthorizeUrl: (clientId?: string, scope?: string, responseType?: "token" | "code", redirectUri?: string) => string;
+export declare const exchangeCodeForAccessToken: (code: string, clientId: string, scope: string, redirectUri: string, clientSecret?: string) => Promise<LiveAuthResponse>;
+export declare const refreshAccessToken: (refreshToken: string, clientId?: string, scope?: string, clientSecret?: string) => Promise<LiveAuthResponse>;
+export declare const preAuth: (options?: LivePreAuthOptions) => Promise<LivePreAuthResponse>;
 export declare const authenticate: (credentials: LiveCredentials) => Promise<LiveAuthResponse>;
diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.js b/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.js
index 6bb2be3..8fa7e2b 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.js
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/core/live/index.js
@@ -1,7 +1,11 @@
 "use strict";
 var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
     if (k2 === undefined) k2 = k;
-    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
 }) : (function(o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     o[k2] = m[k];
@@ -32,7 +36,6 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.authenticate = exports.preAuth = exports.refreshAccessToken = exports.exchangeCodeForAccessToken = exports.getAuthorizeUrl = void 0;
-const axios_1 = __importDefault(require("axios"));
 const querystring_1 = require("querystring");
 const utils_1 = require("../../utils");
 const XRError_1 = __importDefault(require("../../classes/XRError"));
@@ -42,7 +45,7 @@ const getMatchForIndex = (entry, regex, index = 0) => {
     const match = entry.match(regex);
     return (match === null || match === void 0 ? void 0 : match[index]) || void 0;
 };
-const getAuthorizeUrl = (clientId = config_2.defaultClientId, scope = config_2.defaultScope, responseType = config_2.defaultResponseType, redirectUri = config_2.defaultRedirectUri) => `${config_2.default.urls.authorize}?${querystring_1.stringify({
+const getAuthorizeUrl = (clientId = config_2.defaultClientId, scope = config_2.defaultScope, responseType = config_2.defaultResponseType, redirectUri = config_2.defaultRedirectUri) => `${config_2.default.urls.authorize}?${(0, querystring_1.stringify)({
     client_id: clientId,
     redirect_uri: redirectUri,
     response_type: responseType,
@@ -50,6 +53,7 @@ const getAuthorizeUrl = (clientId = config_2.defaultClientId, scope = config_2.d
 })}`;
 exports.getAuthorizeUrl = getAuthorizeUrl;
 const exchangeCodeForAccessToken = (code, clientId, scope, redirectUri, clientSecret) => __awaiter(void 0, void 0, void 0, function* () {
+    var _a, _b;
     const payload = {
         code,
         client_id: clientId,
@@ -60,27 +64,33 @@ const exchangeCodeForAccessToken = (code, clientId, scope, redirectUri, clientSe
     if (clientSecret !== void 0) {
         payload.client_secret = clientSecret;
     }
-    const response = yield axios_1.default({
-        url: config_2.default.urls.token,
-        method: 'POST',
-        headers: utils_1.getBaseHeaders({
-            Accept: 'application/json',
-            'Content-Type': 'application/x-www-form-urlencoded'
-        }),
-        data: querystring_1.stringify(payload)
-    })
-        .then(res => res.data)
-        .catch((err) => {
-        var _a, _b;
+    try {
+        const response = yield fetch(config_2.default.urls.token, {
+            method: 'POST',
+            headers: (0, utils_1.getBaseHeaders)({
+                Accept: 'application/json',
+                'Content-Type': 'application/x-www-form-urlencoded'
+            }),
+            body: (0, querystring_1.stringify)(payload),
+        });
+        if (!response.ok) {
+            throw new XRError_1.default(response.statusText, {
+                statusCode: response.status,
+                additional: (yield response.text()) || null
+            });
+        }
+        return yield response.json();
+    }
+    catch (err) {
         throw new XRError_1.default(err.message, {
             statusCode: (_a = err.response) === null || _a === void 0 ? void 0 : _a.status,
             additional: ((_b = err.response) === null || _b === void 0 ? void 0 : _b.data) || null
         });
-    });
-    return response;
+    }
 });
 exports.exchangeCodeForAccessToken = exchangeCodeForAccessToken;
-const refreshAccessToken = (refreshToken, clientId = config_2.defaultClientId, scope = config_2.defaultScope, clientSecret) => __awaiter(void 0, void 0, void 0, function* () {
+const refreshAccessToken = (refreshToken_1, ...args_1) => __awaiter(void 0, [refreshToken_1, ...args_1], void 0, function* (refreshToken, clientId = config_2.defaultClientId, scope = config_2.defaultScope, clientSecret) {
+    var _a, _b;
     const payload = {
         client_id: clientId,
         scope: scope || config_2.defaultScope,
@@ -90,38 +100,48 @@ const refreshAccessToken = (refreshToken, clientId = config_2.defaultClientId, s
     if (clientSecret !== void 0) {
         payload.client_secret = clientSecret;
     }
-    const response = yield axios_1.default({
-        url: config_2.default.urls.token,
-        method: 'POST',
-        headers: utils_1.getBaseHeaders({
-            Accept: 'application/json',
-            'Accept-Encoding': 'identity',
-            'Content-Type': 'application/x-www-form-urlencoded'
-        }),
-        data: querystring_1.stringify(payload)
-    })
-        .then(res => res.data)
-        .catch((err) => {
-        var _a, _b;
+    try {
+        const response = yield fetch(config_2.default.urls.token, {
+            method: 'POST',
+            headers: (0, utils_1.getBaseHeaders)({
+                Accept: 'application/json',
+                'Accept-Encoding': 'identity',
+                'Content-Type': 'application/x-www-form-urlencoded'
+            }),
+            body: (0, querystring_1.stringify)(payload),
+        });
+        if (!response.ok) {
+            throw new XRError_1.default(response.statusText, {
+                statusCode: response.status,
+                additional: (yield response.text()) || null
+            });
+        }
+        return yield response.json();
+    }
+    catch (err) {
         throw new XRError_1.default(err.message, {
             statusCode: (_a = err.response) === null || _a === void 0 ? void 0 : _a.status,
             additional: ((_b = err.response) === null || _b === void 0 ? void 0 : _b.data) || null
         });
-    });
-    return response;
+    }
 });
 exports.refreshAccessToken = refreshAccessToken;
 const preAuth = (options) => __awaiter(void 0, void 0, void 0, function* () {
-    const response = yield axios_1.default({
-        url: exports.getAuthorizeUrl(options === null || options === void 0 ? void 0 : options.clientId, options === null || options === void 0 ? void 0 : options.scope, options === null || options === void 0 ? void 0 : options.responseType, options === null || options === void 0 ? void 0 : options.redirectUri),
-        method: 'GET',
-        headers: utils_1.getBaseHeaders({
-            'Accept-Encoding': 'identity'
-        })
-    })
-        .then(res => {
-        const body = (res.data || '');
-        const cookie = (res.headers['set-cookie'] || [])
+    try {
+        const response = yield fetch((0, exports.getAuthorizeUrl)(options === null || options === void 0 ? void 0 : options.clientId, options === null || options === void 0 ? void 0 : options.scope, options === null || options === void 0 ? void 0 : options.responseType, options === null || options === void 0 ? void 0 : options.redirectUri), {
+            method: 'GET',
+            headers: (0, utils_1.getBaseHeaders)({
+                'Accept-Encoding': 'identity'
+            })
+        });
+        if (!response.ok) {
+            throw new XRError_1.default(response.statusText, {
+                statusCode: response.status,
+                additional: (yield response.text()) || null
+            });
+        }
+        const body = ((yield response.text()) || '');
+        const cookie = (response.headers.getSetCookie() || [])
             .map((c) => c.split(';')[0])
             .join('; ');
         const matches = {
@@ -135,39 +155,40 @@ const preAuth = (options) => __awaiter(void 0, void 0, void 0, function* () {
             };
         }
         throw XRError_1.default.internal(`Could not match required "preAuth" parameters, please fill an issue on ${config_1.default.github.createIssue}`);
-    })
-        .catch(err => {
+    }
+    catch (err) {
         if (err.__XboxReplay__ === true)
             throw err;
         throw XRError_1.default.internal(err.message);
-    });
-    return response;
+    }
 });
 exports.preAuth = preAuth;
 const authenticate = (credentials) => __awaiter(void 0, void 0, void 0, function* () {
-    const preAuthResponse = yield exports.preAuth();
-    const response = yield axios_1.default({
-        url: preAuthResponse.matches.urlPost,
-        method: 'POST',
-        headers: utils_1.getBaseHeaders({
-            'Accept-Encoding': 'identity',
-            'Content-Type': 'application/x-www-form-urlencoded',
-            Cookie: preAuthResponse.cookie
-        }),
-        data: querystring_1.stringify({
-            login: credentials.email,
-            loginfmt: credentials.email,
-            passwd: credentials.password,
-            PPFT: preAuthResponse.matches.PPFT
-        }),
-        maxRedirects: 0,
-        validateStatus: status => status === 302 || status === 200
-    })
-        .then(res => {
-        if (res.status === 200) {
+    const preAuthResponse = yield (0, exports.preAuth)();
+    const payload = {
+        login: credentials.email,
+        loginfmt: credentials.email,
+        passwd: credentials.password,
+        PPFT: preAuthResponse.matches.PPFT
+    };
+    try {
+        const response = yield fetch(preAuthResponse.matches.urlPost, {
+            method: 'POST',
+            headers: (0, utils_1.getBaseHeaders)({
+                'Accept-Encoding': 'identity',
+                'Content-Type': 'application/x-www-form-urlencoded',
+                Cookie: preAuthResponse.cookie
+            }),
+            redirect: 'manual',
+            body: (0, querystring_1.stringify)(payload),
+        });
+        if (response.status === 200) {
             throw XRError_1.default.unauthorized(`Invalid credentials or 2FA enabled`);
         }
-        const { location = '' } = res.headers || {};
+        if (response.status !== 302) {
+            throw XRError_1.default.internal(`Unexpected status code: ${response.status}`);
+        }
+        const location = response.headers.get('location') || '';
         const hash = location.split('#')[1];
         const output = {};
         for (const part of new URLSearchParams(hash)) {
@@ -178,12 +199,11 @@ const authenticate = (credentials) => __awaiter(void 0, void 0, void 0, function
                 output[part[0]] = part[1];
         }
         return output;
-    })
-        .catch(err => {
+    }
+    catch (err) {
         if (err.__XboxReplay__ === true)
             throw err;
         throw XRError_1.default.internal(err.message);
-    });
-    return response;
+    }
 });
 exports.authenticate = authenticate;
diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.d.ts b/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.d.ts
index f85aeb1..0f19eb5 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.d.ts
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.d.ts
@@ -1,5 +1,5 @@
 import { XBLDummyDeviceTokenResponse, XBLExchangeRpsTicketResponse, XBLExchangeTokensOptions, XBLExchangeTokensResponse, XBLTokens } from '../..';
-export declare const exchangeRpsTicketForUserToken: (rpsTicket: string, preamble?: 'd' | 't', additionalHeaders?: Record<string, string>) => Promise<XBLExchangeRpsTicketResponse>;
+export declare const exchangeRpsTicketForUserToken: (rpsTicket: string, preamble?: "d" | "t", additionalHeaders?: Record<string, string>) => Promise<XBLExchangeRpsTicketResponse>;
 export declare const exchangeTokensForXSTSToken: (tokens: XBLTokens, options?: XBLExchangeTokensOptions, additionalHeaders?: Record<string, string>) => Promise<XBLExchangeTokensResponse>;
 export declare const exchangeTokenForXSTSToken: (userToken: string, options?: XBLExchangeTokensOptions, additionalHeaders?: Record<string, string>) => Promise<XBLExchangeTokensResponse>;
 export declare const EXPERIMENTAL_createDummyWin32DeviceToken: () => Promise<XBLDummyDeviceTokenResponse>;
diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.js b/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.js
index 81b3ade..356dd12 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.js
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/core/xboxlive/index.js
@@ -1,7 +1,11 @@
 "use strict";
 var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
     if (k2 === undefined) k2 = k;
-    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
 }) : (function(o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     o[k2] = m[k];
@@ -32,7 +36,6 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.EXPERIMENTAL_createDummyWin32DeviceToken = exports.exchangeTokenForXSTSToken = exports.exchangeTokensForXSTSToken = exports.exchangeRpsTicketForUserToken = void 0;
-const axios_1 = __importDefault(require("axios"));
 const config_1 = __importStar(require("./config"));
 const utils_1 = require("../../utils");
 const XRError_1 = __importDefault(require("../../classes/XRError"));
@@ -42,16 +45,15 @@ const XBLAdditionalHeaders = {
     Accept: 'application/json',
     'X-Xbl-Contract-Version': String(XBLContractVersion)
 };
-const exchangeRpsTicketForUserToken = (rpsTicket, preamble = 't', additionalHeaders = {}) => __awaiter(void 0, void 0, void 0, function* () {
+const exchangeRpsTicketForUserToken = (rpsTicket_1, ...args_1) => __awaiter(void 0, [rpsTicket_1, ...args_1], void 0, function* (rpsTicket, preamble = 't', additionalHeaders = {}) {
     const match = rpsTicket.match(/^([t|d]=)/g);
     if (match === null) {
         rpsTicket = `${preamble}=${rpsTicket}`;
     }
-    const response = yield axios_1.default({
-        url: config_1.default.urls.userAuthenticate,
+    const response = yield fetch(config_1.default.urls.userAuthenticate, {
         method: 'POST',
-        headers: utils_1.getBaseHeaders(Object.assign(Object.assign({}, XBLAdditionalHeaders), additionalHeaders)),
-        data: {
+        headers: (0, utils_1.getBaseHeaders)(Object.assign(Object.assign({}, XBLAdditionalHeaders), additionalHeaders)),
+        body: JSON.stringify({
             RelyingParty: 'http://auth.xboxlive.com',
             TokenType: 'JWT',
             Properties: {
@@ -59,21 +61,19 @@ const exchangeRpsTicketForUserToken = (rpsTicket, preamble = 't', additionalHead
                 SiteName: 'user.auth.xboxlive.com',
                 RpsTicket: rpsTicket
             }
-        }
-    })
-        .then(res => res.data)
-        .catch(_ => {
-        throw XRError_1.default.badRequest('Could not exchange specified "RpsTicket"');
+        }),
     });
-    return response;
+    if (!response.ok) {
+        throw XRError_1.default.badRequest('Could not exchange specified "RpsTicket"', response);
+    }
+    return yield response.json();
 });
 exports.exchangeRpsTicketForUserToken = exchangeRpsTicketForUserToken;
-const exchangeTokensForXSTSToken = (tokens, options = {}, additionalHeaders = {}) => __awaiter(void 0, void 0, void 0, function* () {
-    const response = yield axios_1.default({
-        url: config_1.default.urls.XSTSAuthorize,
+const exchangeTokensForXSTSToken = (tokens_1, ...args_1) => __awaiter(void 0, [tokens_1, ...args_1], void 0, function* (tokens, options = {}, additionalHeaders = {}) {
+    const response = yield fetch(config_1.default.urls.XSTSAuthorize, {
         method: 'POST',
-        headers: utils_1.getBaseHeaders(Object.assign(Object.assign({}, XBLAdditionalHeaders), additionalHeaders)),
-        data: {
+        headers: (0, utils_1.getBaseHeaders)(Object.assign(Object.assign({}, XBLAdditionalHeaders), additionalHeaders)),
+        body: JSON.stringify({
             RelyingParty: options.XSTSRelyingParty || config_1.defaultXSTSRelyingParty,
             TokenType: 'JWT',
             Properties: {
@@ -83,17 +83,15 @@ const exchangeTokensForXSTSToken = (tokens, options = {}, additionalHeaders = {}
                 OptionalDisplayClaims: options.optionalDisplayClaims,
                 SandboxId: options.sandboxId || 'RETAIL'
             }
-        }
-    })
-        .then(res => res.data)
-        .catch((err) => {
-        var _a;
-        throw new XRError_1.default('Could not exchange specified tokens, please double check used parameters or make sure to use the "EXPERIMENTAL_createDummyWin32DeviceToken" method to handle "Child" and "Teen" accounts', { statusCode: (_a = err.response) === null || _a === void 0 ? void 0 : _a.status });
+        }),
     });
-    return response;
+    if (!response.ok) {
+        throw new XRError_1.default('Could not exchange specified tokens, please double check used parameters or make sure to use the "EXPERIMENTAL_createDummyWin32DeviceToken" method to handle "Child" and "Teen" accounts', { statusCode: response.status });
+    }
+    return yield response.json();
 });
 exports.exchangeTokensForXSTSToken = exchangeTokensForXSTSToken;
-const exchangeTokenForXSTSToken = (userToken, options = {}, additionalHeaders = {}) => exports.exchangeTokensForXSTSToken({ userTokens: [userToken] }, options, additionalHeaders);
+const exchangeTokenForXSTSToken = (userToken, options = {}, additionalHeaders = {}) => (0, exports.exchangeTokensForXSTSToken)({ userTokens: [userToken] }, options, additionalHeaders);
 exports.exchangeTokenForXSTSToken = exchangeTokenForXSTSToken;
 const EXPERIMENTAL_createDummyWin32DeviceToken = () => __awaiter(void 0, void 0, void 0, function* () {
     const trustedParty = 'https://xboxreplay.net/';
@@ -107,11 +105,10 @@ const EXPERIMENTAL_createDummyWin32DeviceToken = () => __awaiter(void 0, void 0,
         x: 'b8Zc6GPFeu41DqiWPJxRa_jqUTSiMA537emKVHt8UO8',
         y: 'CXAuTEHet72GjgSDfDg6psBrwE1waxBsNEIGrRZV_90'
     };
-    const response = yield axios_1.default({
-        url: config_1.default.urls.deviceAuthenticate,
+    const response = yield fetch(config_1.default.urls.deviceAuthenticate, {
         method: 'POST',
-        headers: utils_1.getBaseHeaders(Object.assign(Object.assign({}, XBLAdditionalHeaders), { Signature: serviceSignature })),
-        data: {
+        headers: (0, utils_1.getBaseHeaders)(Object.assign(Object.assign({}, XBLAdditionalHeaders), { Signature: serviceSignature })),
+        body: JSON.stringify({
             RelyingParty: 'http://auth.xboxlive.com',
             TokenType: 'JWT',
             Properties: {
@@ -122,12 +119,11 @@ const EXPERIMENTAL_createDummyWin32DeviceToken = () => __awaiter(void 0, void 0,
                 Version: '10.0.18363',
                 ProofKey: serviceProofKey
             }
-        }
-    })
-        .then(res => res.data)
-        .catch(_ => {
-        throw XRError_1.default.badRequest(`Could not create a valid device token, please fill an issue on ${config_2.default.github.createIssue}`);
+        }),
     });
-    return response;
+    if (!response.ok) {
+        throw XRError_1.default.badRequest(`Could not create a valid device token, please fill an issue on ${config_2.default.github.createIssue}`, response);
+    }
+    return yield response.json();
 });
 exports.EXPERIMENTAL_createDummyWin32DeviceToken = EXPERIMENTAL_createDummyWin32DeviceToken;
diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/index.d.ts b/node_modules/@xboxreplay/xboxlive-auth/dist/index.d.ts
index f35e20c..2b0f1ef 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/index.d.ts
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/index.d.ts
@@ -1,8 +1,8 @@
-export declare type LiveCredentials = {
+export type LiveCredentials = {
     email: string;
     password: string;
 };
-export declare type LiveAuthResponse = {
+export type LiveAuthResponse = {
     token_type: 'bearer';
     expires_in: number;
     access_token: string;
@@ -10,21 +10,21 @@ export declare type LiveAuthResponse = {
     scope: string;
     user_id: string;
 };
-export declare type LivePreAuthMatchedParameters = {
+export type LivePreAuthMatchedParameters = {
     PPFT: string;
     urlPost: string;
 };
-export declare type LivePreAuthResponse = {
+export type LivePreAuthResponse = {
     cookie: string;
     matches: LivePreAuthMatchedParameters;
 };
-export declare type LivePreAuthOptions = {
+export type LivePreAuthOptions = {
     clientId?: string;
     scope?: string;
     responseType?: 'token' | 'code';
     redirectUri?: string;
 };
-export declare type XBLExchangeRpsTicketResponse = {
+export type XBLExchangeRpsTicketResponse = {
     IssueInstant: string;
     NotAfter: string;
     Token: string;
@@ -34,12 +34,12 @@ export declare type XBLExchangeRpsTicketResponse = {
         }>;
     };
 };
-export declare type XBLExchangeTokensOptions = {
+export type XBLExchangeTokensOptions = {
     XSTSRelyingParty?: string;
     optionalDisplayClaims?: string[];
     sandboxId?: string;
 };
-export declare type XBLExchangeTokensResponse = {
+export type XBLExchangeTokensResponse = {
     IssueInstant: string;
     NotAfter: string;
     Token: string;
@@ -50,7 +50,7 @@ export declare type XBLExchangeTokensResponse = {
         }>;
     };
 };
-export declare type XBLDummyDeviceTokenResponse = {
+export type XBLDummyDeviceTokenResponse = {
     IssueInstant: string;
     NotAfter: string;
     Token: string;
@@ -61,44 +61,44 @@ export declare type XBLDummyDeviceTokenResponse = {
         };
     };
 };
-export declare type XBLTokens = {
+export type XBLTokens = {
     userTokens: string[];
     deviceToken?: string;
     titleToken?: string;
 };
-export declare type AuthenticateOptions = XBLExchangeTokensOptions & {
+export type AuthenticateOptions = XBLExchangeTokensOptions & {
     deviceToken?: string;
     titleToken?: string;
     raw?: boolean;
 };
-export declare type AuthenticateRefreshOptions = {
+export type AuthenticateRefreshOptions = {
     clientId?: string;
     clientSecret?: string;
     scope?: string;
     preamble?: 't' | 'd';
 };
-export declare type CredentialsAuthenticateInitialResponse = {
+export type CredentialsAuthenticateInitialResponse = {
     xuid: string | null;
     user_hash: string;
     xsts_token: string;
     display_claims: Record<string, string>;
     expires_on: string;
 };
-export declare type CredentialsAuthenticateRawResponse = {
+export type CredentialsAuthenticateRawResponse = {
     'login.live.com': LiveAuthResponse;
     'user.auth.xboxlive.com': XBLExchangeRpsTicketResponse;
     'xsts.auth.xboxlive.com': XBLExchangeTokensResponse;
 };
-export declare type CredentialsAuthenticateResponse = CredentialsAuthenticateInitialResponse | CredentialsAuthenticateRawResponse;
+export type CredentialsAuthenticateResponse = CredentialsAuthenticateInitialResponse | CredentialsAuthenticateRawResponse;
 export declare const authenticateWithUserCredentials: (email: string, password: string, options?: AuthenticateOptions) => Promise<CredentialsAuthenticateResponse>;
 export declare const authenticateWithUserRefreshToken: (refreshToken: string, refreshOptions?: AuthenticateRefreshOptions | null, options?: AuthenticateOptions) => Promise<CredentialsAuthenticateResponse>;
 export declare const authenticate: (email: string, password: string, options?: AuthenticateOptions) => Promise<CredentialsAuthenticateResponse>;
 export declare const live: {
-    preAuth: (options?: LivePreAuthOptions | undefined) => Promise<LivePreAuthResponse>;
-    getAuthorizeUrl: (clientId?: string, scope?: string, responseType?: "code" | "token", redirectUri?: string) => string;
+    preAuth: (options?: LivePreAuthOptions) => Promise<LivePreAuthResponse>;
+    getAuthorizeUrl: (clientId?: string, scope?: string, responseType?: "token" | "code", redirectUri?: string) => string;
     authenticate: (credentials: LiveCredentials) => Promise<LiveAuthResponse>;
-    refreshAccessToken: (refreshToken: string, clientId?: string, scope?: string, clientSecret?: string | undefined) => Promise<LiveAuthResponse>;
-    exchangeCodeForAccessToken: (code: string, clientId: string, scope: string, redirectUri: string, clientSecret?: string | undefined) => Promise<LiveAuthResponse>;
+    refreshAccessToken: (refreshToken: string, clientId?: string, scope?: string, clientSecret?: string) => Promise<LiveAuthResponse>;
+    exchangeCodeForAccessToken: (code: string, clientId: string, scope: string, redirectUri: string, clientSecret?: string) => Promise<LiveAuthResponse>;
 };
 export declare const xbl: {
     EXPERIMENTAL_createDummyWin32DeviceToken: () => Promise<XBLDummyDeviceTokenResponse>;
diff --git a/node_modules/@xboxreplay/xboxlive-auth/dist/index.js b/node_modules/@xboxreplay/xboxlive-auth/dist/index.js
index a67fff4..0a32ed0 100644
--- a/node_modules/@xboxreplay/xboxlive-auth/dist/index.js
+++ b/node_modules/@xboxreplay/xboxlive-auth/dist/index.js
@@ -12,9 +12,9 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.xbl = exports.live = exports.authenticate = exports.authenticateWithUserRefreshToken = exports.authenticateWithUserCredentials = void 0;
 const live_1 = require("./core/live");
 const xboxlive_1 = require("./core/xboxlive");
-const postLiveAuthenticate = (liveAuthResponse, preamble = 't', options = {}) => __awaiter(void 0, void 0, void 0, function* () {
-    const userTokenResponse = yield xboxlive_1.exchangeRpsTicketForUserToken(liveAuthResponse.access_token, preamble);
-    const XSTSResponse = yield xboxlive_1.exchangeTokensForXSTSToken({
+const postLiveAuthenticate = (liveAuthResponse_1, ...args_1) => __awaiter(void 0, [liveAuthResponse_1, ...args_1], void 0, function* (liveAuthResponse, preamble = 't', options = {}) {
+    const userTokenResponse = yield (0, xboxlive_1.exchangeRpsTicketForUserToken)(liveAuthResponse.access_token, preamble);
+    const XSTSResponse = yield (0, xboxlive_1.exchangeTokensForXSTSToken)({
         userTokens: [userTokenResponse.Token],
         deviceToken: options.deviceToken,
         titleToken: options.titleToken
@@ -38,15 +38,15 @@ const postLiveAuthenticate = (liveAuthResponse, preamble = 't', options = {}) =>
         'xsts.auth.xboxlive.com': XSTSResponse
     };
 });
-const authenticateWithUserCredentials = (email, password, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
+const authenticateWithUserCredentials = (email_1, password_1, ...args_1) => __awaiter(void 0, [email_1, password_1, ...args_1], void 0, function* (email, password, options = {}) {
     const credentials = { email, password };
-    const liveAuthResponse = yield live_1.authenticate(credentials);
+    const liveAuthResponse = yield (0, live_1.authenticate)(credentials);
     return postLiveAuthenticate(liveAuthResponse, 't', options);
 });
 exports.authenticateWithUserCredentials = authenticateWithUserCredentials;
 exports.authenticateWithUserRefreshToken = (() => {
     let __rt;
-    return (refreshToken, refreshOptions = null, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
+    return (refreshToken_1, ...args_1) => __awaiter(void 0, [refreshToken_1, ...args_1], void 0, function* (refreshToken, refreshOptions = null, options = {}) {
         const liveAuthResponse = yield exports.live.refreshAccessToken(__rt || refreshToken, refreshOptions === null || refreshOptions === void 0 ? void 0 : refreshOptions.clientId, refreshOptions === null || refreshOptions === void 0 ? void 0 : refreshOptions.scope, refreshOptions === null || refreshOptions === void 0 ? void 0 : refreshOptions.clientSecret);
         __rt = liveAuthResponse.refresh_token || refreshToken;
         return postLiveAuthenticate(liveAuthResponse, refreshOptions === null || refreshOptions === void 0 ? void 0 : refreshOptions.preamble, options);
diff --git a/node_modules/@xboxreplay/xboxlive-auth/src/core/live/index.ts b/node_modules/@xboxreplay/xboxlive-auth/src/core/live/index.ts
new file mode 100644
index 0000000..05c7de7
--- /dev/null
+++ b/node_modules/@xboxreplay/xboxlive-auth/src/core/live/index.ts
@@ -0,0 +1,296 @@
+import { stringify } from 'querystring';
+import { getBaseHeaders } from '../../utils';
+import XRError from '../../classes/XRError';
+import commonConfig from '../../config';
+
+import {
+	LiveAuthResponse,
+	LiveCredentials,
+	LivePreAuthMatchedParameters,
+	LivePreAuthResponse,
+	LivePreAuthOptions
+} from '../..';
+
+import config, {
+	defaultClientId,
+	defaultRedirectUri,
+	defaultResponseType,
+	defaultScope
+} from './config';
+
+//#region private methods
+
+const getMatchForIndex = (entry: string, regex: RegExp, index: number = 0) => {
+	const match = entry.match(regex);
+	return match?.[index] || void 0;
+};
+
+//#endregion
+//#region public methods
+
+/**
+ * Returns login.live.com authorize URL
+ *
+ * @param {string} [clientId="000000004C12AE6F"] `000000004C12AE6F`
+ * @param {scope} [scope="service::user.auth.xboxlive.com::MBI_SSL"] `service::user.auth.xboxlive.com::MBI_SSL`
+ * @param {responseType} [responseType="token"] `token`
+ * @param {redirectUri=} [redirectUri="https://login.live.com/oauth20_desktop.srf"] `https://login.live.com/oauth20_desktop.srf`
+ *
+ * @example
+ * 	getAuthorizeUrl();
+ *
+ * @example
+ * 	getAuthorizeUrl('xxxxxx', 'XboxLive.signin', 'code', 'https://xxxxxx');
+ *
+ * @returns {string} Authorize URL
+ */
+export const getAuthorizeUrl = (
+	clientId: string = defaultClientId,
+	scope: string = defaultScope,
+	responseType: 'token' | 'code' = defaultResponseType,
+	redirectUri: string = defaultRedirectUri
+): string =>
+	`${config.urls.authorize}?${stringify({
+		client_id: clientId,
+		redirect_uri: redirectUri,
+		response_type: responseType,
+		scope: scope
+	})}`;
+
+/**
+ * Exchange returned code for a valid access token
+ *
+ * @param {string} code
+ * @param {string} clientId
+ * @param {string} scope
+ * @param {string} redirectUri
+ * @param {string=} clientSecret
+ *
+ * @throws {XRError}
+ * @returns {Promise<LiveAuthResponse>}
+ */
+export const exchangeCodeForAccessToken = async (
+	code: string,
+	clientId: string,
+	scope: string,
+	redirectUri: string,
+	clientSecret?: string
+): Promise<LiveAuthResponse> => {
+	const payload: Record<string, any> = {
+		code,
+		client_id: clientId,
+		grant_type: 'authorization_code',
+		redirect_uri: redirectUri,
+		scope
+	};
+
+	if (clientSecret !== void 0) {
+		payload.client_secret = clientSecret;
+	}
+
+	try {
+		const response = await fetch(config.urls.token, {
+			method: 'POST',
+			headers: getBaseHeaders({
+				Accept: 'application/json',
+				'Content-Type': 'application/x-www-form-urlencoded'
+			}),
+			body: stringify(payload),
+		});
+
+		if (!response.ok) {
+			throw new XRError(response.statusText, {
+				statusCode: response.status,
+				additional: (await response.text()) || null
+			});
+		}
+
+		return await response.json();
+	} catch (err: Error | any) {
+		throw new XRError(err.message, {
+			statusCode: err.response?.status,
+			additional: err.response?.data || null
+		});
+	}
+};
+
+/**
+ * Refresh an expired token
+ *
+ * @param {string} refreshToken
+ * @param {string} [clientId="000000004C12AE6F"] - `000000004C12AE6F`
+ * @param {scope} [scope="service::user.auth.xboxlive.com::MBI_SSL"] - `service::user.auth.xboxlive.com::MBI_SSL`
+ * @param {string=} clientSecret - `undefined`
+ *
+ * @example
+ * 	refreshAccessToken('M.R3_B.xxxxxx');
+ *
+ * @example
+ * 	refreshAccessToken('M.R3_B.xxxxxx', 'xxxxxx', 'XboxLive.signin', 'xxxxxx');
+ *
+ * @throws {XRError}
+ * @returns {Promise<LiveAuthResponse>} Refresh response
+ */
+export const refreshAccessToken = async (
+	refreshToken: string,
+	clientId: string = defaultClientId,
+	scope: string = defaultScope,
+	clientSecret?: string
+): Promise<LiveAuthResponse> => {
+	const payload: Record<string, any> = {
+		client_id: clientId,
+		scope: scope || defaultScope,
+		grant_type: 'refresh_token',
+		refresh_token: refreshToken
+	};
+
+	if (clientSecret !== void 0) {
+		payload.client_secret = clientSecret;
+	}
+
+	try {
+		const response = await fetch(config.urls.token, {
+			method: 'POST',
+			headers: getBaseHeaders({
+				Accept: 'application/json',
+				'Accept-Encoding': 'identity',
+				'Content-Type': 'application/x-www-form-urlencoded'
+			}),
+			body: stringify(payload),
+		});
+
+		if (!response.ok) {
+			throw new XRError(response.statusText, {
+				statusCode: response.status,
+				additional: (await response.text()) || null
+			});
+		}
+
+		return await response.json();
+	} catch (err: Error | any) {
+		throw new XRError(err.message, {
+			statusCode: err.response?.status,
+			additional: err.response?.data || null
+		});
+	}
+};
+
+/**
+ * Retrieve required cookies and parameters before continue
+ *
+ * @param {LivePreAuthOptions=} options
+ *
+ * @throws {XRError}
+ * @returns {Promise<LivePreAuthResponse>} Required cookies and parameters
+ */
+export const preAuth = async (
+	options?: LivePreAuthOptions
+): Promise<LivePreAuthResponse> => {
+	try {
+		const response = await fetch(getAuthorizeUrl(
+			options?.clientId,
+			options?.scope,
+			options?.responseType,
+			options?.redirectUri
+		), {
+			method: 'GET',
+			headers: getBaseHeaders({
+				'Accept-Encoding': 'identity'
+			})
+		});
+
+		if (!response.ok) {
+			throw new XRError(response.statusText, {
+				statusCode: response.status,
+				additional: (await response.text()) || null
+			});
+		}
+
+		const body = (await response.text() || '') as string;
+		const cookie: string = (response.headers.getSetCookie() || [])
+			.map((c: string) => c.split(';')[0])
+			.join('; ');
+
+		const matches: Partial<LivePreAuthMatchedParameters> = {
+			PPFT: getMatchForIndex(body, /sFTTag:'.*value=\"(.*)\"\/>'/, 1),
+			urlPost: getMatchForIndex(body, /urlPost:'(.+?(?=\'))/, 1)
+		};
+
+		if (matches.PPFT !== void 0 && matches.urlPost !== void 0) {
+			return {
+				cookie,
+				matches: matches as LivePreAuthMatchedParameters
+			};
+		}
+
+		throw XRError.internal(
+			`Could not match required "preAuth" parameters, please fill an issue on ${commonConfig.github.createIssue}`
+		);
+	} catch (err: Error | any) {
+		if (err.__XboxReplay__ === true) throw err;
+			throw XRError.internal(err.message);
+	}
+};
+
+/**
+ * Authenticate with credentials
+ *
+ * @param {LiveCredentials} credentials
+ *
+ * @throws {XRError}
+ * @returns {Promise<LiveAuthResponse>} Authenticate response
+ */
+export const authenticate = async (
+	credentials: LiveCredentials
+): Promise<LiveAuthResponse> => {
+	const preAuthResponse = await preAuth();
+
+	const payload = {
+		login: credentials.email,
+		loginfmt: credentials.email,
+		passwd: credentials.password,
+		PPFT: preAuthResponse.matches.PPFT
+	};
+
+	try {
+		const response = await fetch(preAuthResponse.matches.urlPost, {
+			method: 'POST',
+			headers: getBaseHeaders({
+				'Accept-Encoding': 'identity',
+				'Content-Type': 'application/x-www-form-urlencoded',
+				Cookie: preAuthResponse.cookie
+			}),
+			redirect: 'manual',
+			body: stringify(payload),
+		});
+
+		if (response.status === 200) {
+			throw XRError.unauthorized(
+				`Invalid credentials or 2FA enabled`
+			);
+		}
+
+		if (response.status !== 302) {
+			throw XRError.internal(
+				`Unexpected status code: ${response.status}`
+			);
+		}
+
+		const location = response.headers.get('location') || '';
+		const hash = location.split('#')[1];
+		const output: Record<string, any> = {};
+
+		for (const part of new URLSearchParams(hash)) {
+			if (part[0] === 'expires_in') {
+				output[part[0]] = Number(part[1]);
+			} else output[part[0]] = part[1];
+		}
+
+		return output as LiveAuthResponse;
+	} catch (err: Error | any) {
+			if (err.__XboxReplay__ === true) throw err;
+			throw XRError.internal(err.message);
+	}
+};
+
+//#endregion
diff --git a/node_modules/@xboxreplay/xboxlive-auth/src/core/xboxlive/index.ts b/node_modules/@xboxreplay/xboxlive-auth/src/core/xboxlive/index.ts
new file mode 100644
index 0000000..3e26524
--- /dev/null
+++ b/node_modules/@xboxreplay/xboxlive-auth/src/core/xboxlive/index.ts
@@ -0,0 +1,219 @@
+import config, { defaultXSTSRelyingParty } from './config';
+import { getBaseHeaders } from '../../utils';
+import XRError from '../../classes/XRError';
+import commonConfig from '../../config';
+
+import {
+	XBLDummyDeviceTokenResponse,
+	XBLExchangeRpsTicketResponse,
+	XBLExchangeTokensOptions,
+	XBLExchangeTokensResponse,
+	XBLTokens
+} from '../..';
+
+//#region definitions
+
+const XBLContractVersion = 2;
+const XBLAdditionalHeaders = {
+	Accept: 'application/json',
+	'X-Xbl-Contract-Version': String(XBLContractVersion)
+};
+
+//#endregion
+//#region public methods
+
+/**
+ * Exchange returned "RpsTicket"
+ *
+ * @param {string} rpsTicket - Returned `access_token` from login.live.com authorization process
+ * @param {string} [preable="t"] - `t` - Use `d` for custom Azure applications
+ * @param {Record<string, string>} [additionalHeaders={}] - Additional headers if required, can be used to override default ones
+ *
+ * @example
+ *	exchangeRpsTicketForUserToken('EwAQxxxxxx');
+ *
+ * @throws {XRError}
+ * @returns {Promise<XBLExchangeRpsTicketResponse>} Exchange response
+ */
+export const exchangeRpsTicketForUserToken = async (
+	rpsTicket: string,
+	preamble: 'd' | 't' = 't',
+	additionalHeaders: Record<string, string> = {}
+): Promise<XBLExchangeRpsTicketResponse> => {
+	const match = rpsTicket.match(/^([t|d]=)/g);
+
+	if (match === null) {
+		rpsTicket = `${preamble}=${rpsTicket}`;
+	}
+
+	const response = await fetch(config.urls.userAuthenticate, {
+		method: 'POST',
+		headers: getBaseHeaders({
+			...XBLAdditionalHeaders,
+			...additionalHeaders
+		}),
+		body: JSON.stringify({
+			RelyingParty: 'http://auth.xboxlive.com',
+			TokenType: 'JWT',
+			Properties: {
+				AuthMethod: 'RPS',
+				SiteName: 'user.auth.xboxlive.com',
+				RpsTicket: rpsTicket
+			}
+		}),
+	});
+
+	if (!response.ok) {
+		throw XRError.badRequest(
+			'Could not exchange specified "RpsTicket"',
+			response
+		);
+	}
+
+	return await response.json();
+};
+
+/**
+ * Exchange tokens
+ *
+ * @param {XBLTokens} tokens
+ * @param {XBLExchangeTokensOptions} [options={}] - Exchange options
+ * @param {Record<string, string>} [additionalHeaders={}] - Additional headers if required, can be used to override default ones
+ *
+ * @example
+ *	exchangeTokensForXSTSToken({ userTokens: ['eyxxx'] });
+ *
+ * @example
+ * exchangeTokensForXSTSToken(
+ *		{ userTokens: ['eyxxx'] }
+ *	);
+
+ * @example
+ * exchangeTokensForXSTSToken(
+ *		{ userTokens: ['eyxxx'], deviceToken: 'eyxxx', titleToken: 'eyxxx' },
+ *		{ XSTSRelyingParty: 'https://gameservices.xboxlive.com/', OptionalDisplayClaims: ['mgt'] },
+ *		{ Signature: 'AAAAQxxxx' }
+ *	);
+ *
+ * @throws {XRError}
+ * @returns {Promise<XBLExchangeTokensResponse>} Exchange response
+ */
+export const exchangeTokensForXSTSToken = async (
+	tokens: XBLTokens,
+	options: XBLExchangeTokensOptions = {},
+	additionalHeaders: Record<string, string> = {}
+): Promise<XBLExchangeTokensResponse> => {
+	const response = await fetch(config.urls.XSTSAuthorize, {
+		method: 'POST',
+		headers: getBaseHeaders({
+			...XBLAdditionalHeaders,
+			...additionalHeaders
+		}),
+		body: JSON.stringify({
+			RelyingParty: options.XSTSRelyingParty || defaultXSTSRelyingParty,
+			TokenType: 'JWT',
+			Properties: {
+				UserTokens: tokens.userTokens,
+				DeviceToken: tokens.deviceToken,
+				TitleToken: tokens.titleToken,
+				OptionalDisplayClaims: options.optionalDisplayClaims,
+				SandboxId: options.sandboxId || 'RETAIL'
+			}
+		}),
+	});
+
+	if (!response.ok) {
+		throw new XRError(
+			'Could not exchange specified tokens, please double check used parameters or make sure to use the "EXPERIMENTAL_createDummyWin32DeviceToken" method to handle "Child" and "Teen" accounts',
+			{ statusCode: response.status }
+		);
+	}
+
+	return await response.json();
+};
+
+/**
+ * Exchange token
+ *
+ * @param {string} userToken - Returned token from `exchangeRpsTicketForUserToken` method
+ * @param {XBLExchangeTokensOptions} [options={}] - Exchange options
+ * @param {Record<string, string>} [additionalHeaders={}] - Additional headers if required, can be used to override default ones
+ * @returns {Promise<XBLExchangeTokensResponse>} Exchange response
+ *
+ * @example
+ *	exchangeTokenForXSTSToken('eyxxx');
+ *
+ * @example
+ *	exchangeTokenForXSTSToken(
+ *		'eyxxx',
+ *		{ XSTSRelyingParty: 'https://gameservices.xboxlive.com/', OptionalDisplayClaims: ['mgt'] },
+ *		{ Signature: 'AAAAQxxxx' }
+ *	);
+ *
+ * @throws {XRError}
+ * @returns {Promise<XBLExchangeTokensResponse>} Exchange response
+ */
+export const exchangeTokenForXSTSToken = (
+	userToken: string,
+	options: XBLExchangeTokensOptions = {},
+	additionalHeaders: Record<string, string> = {}
+) =>
+	exchangeTokensForXSTSToken(
+		{ userTokens: [userToken] },
+		options,
+		additionalHeaders
+	);
+
+/**
+ * Create a dummy Win32 device token to be used with `exchangeTokensForXSTSToken` method
+ *
+ * @throws {XRError}
+ * @returns {Promise<XBLDummyDeviceTokenResponse>} Device authenticate response
+ */
+export const EXPERIMENTAL_createDummyWin32DeviceToken =
+	async (): Promise<XBLDummyDeviceTokenResponse> => {
+		const trustedParty = 'https://xboxreplay.net/';
+		const serviceDeviceId = '21354D2F-352F-472F-5842-5265706C6179';
+		const serviceSignature =
+			'AAAAAQHW6oD31MwA6MAjn67vdCppWCbrMovubA85xejO06rtOAEdZ0tMTZFnu7xbI6lZDNvIWfuMaIPJSUcpvxjKqSFJl1oaWzQGBw==';
+
+		const serviceProofKey = {
+			crv: 'P-256',
+			alg: 'ES256',
+			use: 'sig',
+			kty: 'EC',
+			x: 'b8Zc6GPFeu41DqiWPJxRa_jqUTSiMA537emKVHt8UO8',
+			y: 'CXAuTEHet72GjgSDfDg6psBrwE1waxBsNEIGrRZV_90'
+		};
+
+		const response = await fetch(config.urls.deviceAuthenticate, {
+			method: 'POST',
+			headers: getBaseHeaders({
+				...XBLAdditionalHeaders,
+				Signature: serviceSignature
+			}),
+			body: JSON.stringify({
+				RelyingParty: 'http://auth.xboxlive.com',
+				TokenType: 'JWT',
+				Properties: {
+					AuthMethod: 'ProofOfPossession',
+					TrustedParty: trustedParty,
+					Id: `{${serviceDeviceId}}`,
+					DeviceType: 'Win32',
+					Version: '10.0.18363',
+					ProofKey: serviceProofKey
+				}
+			}),
+		});
+
+		if (!response.ok) {
+			throw XRError.badRequest(
+				`Could not create a valid device token, please fill an issue on ${commonConfig.github.createIssue}`,
+				response
+			);
+		}
+
+		return await response.json();
+	};
+
+//#endregion
