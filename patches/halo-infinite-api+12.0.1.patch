diff --git a/node_modules/halo-infinite-api/dist/core/token-persisters/index.cjs.map b/node_modules/halo-infinite-api/dist/core/token-persisters/index.cjs.map
index ed26022..44a54cb 100644
--- a/node_modules/halo-infinite-api/dist/core/token-persisters/index.cjs.map
+++ b/node_modules/halo-infinite-api/dist/core/token-persisters/index.cjs.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/core/token-persisters/local-storage-token-persister.ts","../../../src/core/token-persisters/node-fs-token-persister.ts","../../../src/core/token-persisters/in-memory-token-persister.ts"],"names":[],"mappings":"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","file":"index.cjs","sourcesContent":["import { TokenPersister } from \".\";\r\n\r\nexport const localStorageTokenPersister: TokenPersister = {\r\n  load: (tokenName) => {\r\n    const json = localStorage.getItem(tokenName);\r\n    if (json) {\r\n      return JSON.parse(json);\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n  save: (tokenName, token) => {\r\n    localStorage.setItem(tokenName, JSON.stringify(token));\r\n  },\r\n  clear: (tokenName) => {\r\n    localStorage.removeItem(tokenName);\r\n  },\r\n};\r\n","import type { TokenPersister } from \".\";\r\n\r\nexport const nodeFsTokenPersister: TokenPersister = {\r\n  load: async (tokenName) => {\r\n    const tokenDir =\r\n      process.env.TOKEN_ROOT ||\r\n      (await import(\"path\")).join(__dirname, \"./tokens\");\r\n    try {\r\n      const json = await (\r\n        await import(\"fs/promises\")\r\n      ).readFile(`${tokenDir}/${tokenName}`, {\r\n        encoding: \"utf-8\",\r\n      });\r\n      return JSON.parse(json);\r\n    } catch (e) {\r\n      if (e && typeof e === \"object\" && \"code\" in e && e.code === \"ENOENT\") {\r\n        return null;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n  },\r\n  save: async (tokenName, token) => {\r\n    const tokenDir =\r\n      process.env.TOKEN_ROOT ||\r\n      (await import(\"path\")).join(__dirname, \"./tokens\");\r\n    await (await import(\"fs/promises\")).mkdir(tokenDir, { recursive: true });\r\n    await (\r\n      await import(\"fs/promises\")\r\n    ).writeFile(`${tokenDir}/${tokenName}`, JSON.stringify(token));\r\n  },\r\n  clear: async (tokenName) => {\r\n    const tokenDir =\r\n      process.env.TOKEN_ROOT ||\r\n      (await import(\"path\")).join(__dirname, \"./tokens\");\r\n    await (await import(\"fs/promises\")).unlink(`${tokenDir}/${tokenName}`);\r\n  },\r\n};\r\n","import { TokenPersister } from \".\";\r\n\r\nconst tokens = new Map<string, any>();\r\n\r\nexport const inMemoryTokenPersister: TokenPersister = {\r\n  load: (tokenName) => {\r\n    return tokens.get(tokenName);\r\n  },\r\n  save: (tokenName, token) => {\r\n    tokens.set(tokenName, token);\r\n  },\r\n  clear: (tokenName) => {\r\n    tokens.delete(tokenName);\r\n  },\r\n};\r\n"]}
\ No newline at end of file
+{"version":3,"sources":["../../../src/core/token-persisters/local-storage-token-persister.ts","../../../src/core/token-persisters/node-fs-token-persister.ts","../../../src/core/token-persisters/in-memory-token-persister.ts"],"names":[],"mappings":"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","file":"index.cjs","sourcesContent":["import { TokenPersister } from \".\";\n\nexport const localStorageTokenPersister: TokenPersister = {\n  load: (tokenName) => {\n    const json = localStorage.getItem(tokenName);\n    if (json) {\n      return JSON.parse(json);\n    } else {\n      return null;\n    }\n  },\n  save: (tokenName, token) => {\n    localStorage.setItem(tokenName, JSON.stringify(token));\n  },\n  clear: (tokenName) => {\n    localStorage.removeItem(tokenName);\n  },\n};\n","import type { TokenPersister } from \".\";\n\nexport const nodeFsTokenPersister: TokenPersister = {\n  load: async (tokenName) => {\n    const tokenDir =\n      process.env.TOKEN_ROOT ||\n      (await import(\"path\")).join(__dirname, \"./tokens\");\n    try {\n      const json = await (\n        await import(\"fs/promises\")\n      ).readFile(`${tokenDir}/${tokenName}`, {\n        encoding: \"utf-8\",\n      });\n      return JSON.parse(json);\n    } catch (e) {\n      if (e && typeof e === \"object\" && \"code\" in e && e.code === \"ENOENT\") {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  },\n  save: async (tokenName, token) => {\n    const tokenDir =\n      process.env.TOKEN_ROOT ||\n      (await import(\"path\")).join(__dirname, \"./tokens\");\n    await (await import(\"fs/promises\")).mkdir(tokenDir, { recursive: true });\n    await (\n      await import(\"fs/promises\")\n    ).writeFile(`${tokenDir}/${tokenName}`, JSON.stringify(token));\n  },\n  clear: async (tokenName) => {\n    const tokenDir =\n      process.env.TOKEN_ROOT ||\n      (await import(\"path\")).join(__dirname, \"./tokens\");\n    await (await import(\"fs/promises\")).unlink(`${tokenDir}/${tokenName}`);\n  },\n};\n","import { TokenPersister } from \".\";\n\nconst tokens = new Map<string, any>();\n\nexport const inMemoryTokenPersister: TokenPersister = {\n  load: (tokenName) => {\n    return tokens.get(tokenName);\n  },\n  save: (tokenName, token) => {\n    tokens.set(tokenName, token);\n  },\n  clear: (tokenName) => {\n    tokens.delete(tokenName);\n  },\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/halo-infinite-api/dist/core/token-persisters/index.js.map b/node_modules/halo-infinite-api/dist/core/token-persisters/index.js.map
index e423dc3..9f26e30 100644
--- a/node_modules/halo-infinite-api/dist/core/token-persisters/index.js.map
+++ b/node_modules/halo-infinite-api/dist/core/token-persisters/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/core/token-persisters/local-storage-token-persister.ts","../../../src/core/token-persisters/node-fs-token-persister.ts","../../../src/core/token-persisters/in-memory-token-persister.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { TokenPersister } from \".\";\r\n\r\nexport const localStorageTokenPersister: TokenPersister = {\r\n  load: (tokenName) => {\r\n    const json = localStorage.getItem(tokenName);\r\n    if (json) {\r\n      return JSON.parse(json);\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n  save: (tokenName, token) => {\r\n    localStorage.setItem(tokenName, JSON.stringify(token));\r\n  },\r\n  clear: (tokenName) => {\r\n    localStorage.removeItem(tokenName);\r\n  },\r\n};\r\n","import type { TokenPersister } from \".\";\r\n\r\nexport const nodeFsTokenPersister: TokenPersister = {\r\n  load: async (tokenName) => {\r\n    const tokenDir =\r\n      process.env.TOKEN_ROOT ||\r\n      (await import(\"path\")).join(__dirname, \"./tokens\");\r\n    try {\r\n      const json = await (\r\n        await import(\"fs/promises\")\r\n      ).readFile(`${tokenDir}/${tokenName}`, {\r\n        encoding: \"utf-8\",\r\n      });\r\n      return JSON.parse(json);\r\n    } catch (e) {\r\n      if (e && typeof e === \"object\" && \"code\" in e && e.code === \"ENOENT\") {\r\n        return null;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n  },\r\n  save: async (tokenName, token) => {\r\n    const tokenDir =\r\n      process.env.TOKEN_ROOT ||\r\n      (await import(\"path\")).join(__dirname, \"./tokens\");\r\n    await (await import(\"fs/promises\")).mkdir(tokenDir, { recursive: true });\r\n    await (\r\n      await import(\"fs/promises\")\r\n    ).writeFile(`${tokenDir}/${tokenName}`, JSON.stringify(token));\r\n  },\r\n  clear: async (tokenName) => {\r\n    const tokenDir =\r\n      process.env.TOKEN_ROOT ||\r\n      (await import(\"path\")).join(__dirname, \"./tokens\");\r\n    await (await import(\"fs/promises\")).unlink(`${tokenDir}/${tokenName}`);\r\n  },\r\n};\r\n","import { TokenPersister } from \".\";\r\n\r\nconst tokens = new Map<string, any>();\r\n\r\nexport const inMemoryTokenPersister: TokenPersister = {\r\n  load: (tokenName) => {\r\n    return tokens.get(tokenName);\r\n  },\r\n  save: (tokenName, token) => {\r\n    tokens.set(tokenName, token);\r\n  },\r\n  clear: (tokenName) => {\r\n    tokens.delete(tokenName);\r\n  },\r\n};\r\n"]}
\ No newline at end of file
+{"version":3,"sources":["../../../src/core/token-persisters/local-storage-token-persister.ts","../../../src/core/token-persisters/node-fs-token-persister.ts","../../../src/core/token-persisters/in-memory-token-persister.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { TokenPersister } from \".\";\n\nexport const localStorageTokenPersister: TokenPersister = {\n  load: (tokenName) => {\n    const json = localStorage.getItem(tokenName);\n    if (json) {\n      return JSON.parse(json);\n    } else {\n      return null;\n    }\n  },\n  save: (tokenName, token) => {\n    localStorage.setItem(tokenName, JSON.stringify(token));\n  },\n  clear: (tokenName) => {\n    localStorage.removeItem(tokenName);\n  },\n};\n","import type { TokenPersister } from \".\";\n\nexport const nodeFsTokenPersister: TokenPersister = {\n  load: async (tokenName) => {\n    const tokenDir =\n      process.env.TOKEN_ROOT ||\n      (await import(\"path\")).join(__dirname, \"./tokens\");\n    try {\n      const json = await (\n        await import(\"fs/promises\")\n      ).readFile(`${tokenDir}/${tokenName}`, {\n        encoding: \"utf-8\",\n      });\n      return JSON.parse(json);\n    } catch (e) {\n      if (e && typeof e === \"object\" && \"code\" in e && e.code === \"ENOENT\") {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  },\n  save: async (tokenName, token) => {\n    const tokenDir =\n      process.env.TOKEN_ROOT ||\n      (await import(\"path\")).join(__dirname, \"./tokens\");\n    await (await import(\"fs/promises\")).mkdir(tokenDir, { recursive: true });\n    await (\n      await import(\"fs/promises\")\n    ).writeFile(`${tokenDir}/${tokenName}`, JSON.stringify(token));\n  },\n  clear: async (tokenName) => {\n    const tokenDir =\n      process.env.TOKEN_ROOT ||\n      (await import(\"path\")).join(__dirname, \"./tokens\");\n    await (await import(\"fs/promises\")).unlink(`${tokenDir}/${tokenName}`);\n  },\n};\n","import { TokenPersister } from \".\";\n\nconst tokens = new Map<string, any>();\n\nexport const inMemoryTokenPersister: TokenPersister = {\n  load: (tokenName) => {\n    return tokens.get(tokenName);\n  },\n  save: (tokenName, token) => {\n    tokens.set(tokenName, token);\n  },\n  clear: (tokenName) => {\n    tokens.delete(tokenName);\n  },\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/halo-infinite-api/dist/index.cjs.map b/node_modules/halo-infinite-api/dist/index.cjs.map
index 500ccb0..ce365fb 100644
--- a/node_modules/halo-infinite-api/dist/index.cjs.map
+++ b/node_modules/halo-infinite-api/dist/index.cjs.map
@@ -1 +1 @@
-{"version":3,"sources":["../src/util/resolvable-promise.ts","../src/util/date-time.ts","../src/util/expiry-token-cache.ts","../src/util/fetch-function.ts","../src/util/global-contants.ts","../src/util/request-error.ts","../src/core/request-policy.ts","../src/endpoints/halo-core-endpoints.ts","../src/authentication/halo-authentication-client.ts","../src/util/keyed-expiry-token-cache.ts","../src/authentication/xbox-authentication-client.ts","../src/models/halo-infinite/asset-kind.ts","../src/models/halo-infinite/match-type.ts","../src/util/xuid.ts","../src/core/halo-infinite-client.ts","../src/core/token-persisters/in-memory-token-persister.ts","../src/core/token-providers/auto-token-provider.ts","../src/core/token-providers/spartan-token-providers/static-xsts-ticket-token-spartan-token-provider.ts","../src/core/xbox-client.ts","../src/models/halo-infinite/game-variant-category.ts","../src/models/halo-infinite/match-outcome.ts","../src/models/halo-infinite/matches-privacy.ts","../src/models/halo-infinite/playlist-experience.ts","../src/models/halo-infinite/progression-file.ts"],"names":["DateTime","newToken","retry","handleType","RelyingParty","AssetKind","MatchType","tokenPersister","GameVariantCategory","MatchOutcome","Privacy","PlaylistExperience","ProgressionFileType"],"mappings":"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","file":"index.cjs","sourcesContent":["export class ResolvablePromise<TReturn> extends Promise<TReturn> {\r\n  isCompleted = false;\r\n  readonly resolve: (value: TReturn | PromiseLike<TReturn>) => void;\r\n  readonly reject: (reason?: unknown) => void;\r\n  constructor() {\r\n    let resolve!: (value: TReturn | PromiseLike<TReturn>) => void;\r\n    let reject!: (reason?: unknown) => void;\r\n    super((res, rej) => {\r\n      resolve = res;\r\n      reject = rej;\r\n    });\r\n    this.resolve = (v) => {\r\n      this.isCompleted = true;\r\n      return resolve(v);\r\n    };\r\n    this.reject = (r) => {\r\n      this.isCompleted = true;\r\n      return reject(r);\r\n    };\r\n  }\r\n\r\n  // you can also use Symbol.species in order to\r\n  // return a Promise for then/catch/finally\r\n  static get [Symbol.species]() {\r\n    return Promise;\r\n  }\r\n\r\n  // Promise overrides his Symbol.toStringTag\r\n  get [Symbol.toStringTag]() {\r\n    return \"ResolvablePromise\";\r\n  }\r\n}\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport function coalesceDateTime(maybeDateTime: unknown) {\r\n  if (DateTime.isDateTime(maybeDateTime)) {\r\n    return maybeDateTime;\r\n  } else if (maybeDateTime instanceof Date) {\r\n    return DateTime.fromJSDate(maybeDateTime);\r\n  } else if (typeof maybeDateTime === \"string\") {\r\n    return DateTime.fromISO(maybeDateTime);\r\n  }\r\n  return undefined;\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { ResolvablePromise } from \"./resolvable-promise\";\r\nimport { coalesceDateTime } from \"./date-time\";\r\n\r\nexport class ExpiryTokenCache<\r\n  TToken extends { expiresAt: DateTime },\r\n  TArgs extends any[]\r\n> {\r\n  private tokenFetchPromise: ResolvablePromise<TToken> | undefined = undefined;\r\n\r\n  constructor(\r\n    private readonly generateNewToken: (...args: TArgs) => Promise<TToken>,\r\n    private readonly existingTokenFetcher: () => Promise<\r\n      (Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null\r\n    >\r\n  ) {}\r\n\r\n  // TODO: Compare args and separate cache entries based on input\r\n  async getToken(...args: TArgs): Promise<TToken> {\r\n    if (this.tokenFetchPromise) {\r\n      // Someone either already has a token or is in the process of getting one\r\n      // Wait for them to finish, then check for validity\r\n      const currentToken = await this.tokenFetchPromise;\r\n\r\n      if (currentToken.expiresAt > DateTime.now().minus({ minute: 1 })) {\r\n        // Current token is valid, return it\r\n        return currentToken;\r\n      } else {\r\n        // Current token expired, start a new promise\r\n        const newPromise = new ResolvablePromise<TToken>();\r\n        this.tokenFetchPromise = newPromise;\r\n\r\n        try {\r\n          const newToken = await this.generateNewToken(...args);\r\n          newPromise.resolve(newToken);\r\n          return newToken;\r\n        } catch (e) {\r\n          newPromise.reject(e);\r\n          if (this.tokenFetchPromise === newPromise) {\r\n            this.tokenFetchPromise = undefined;\r\n          }\r\n          throw e;\r\n        }\r\n      }\r\n    } else {\r\n      // No one has a token, start a new promise\r\n      const newPromise = new ResolvablePromise<TToken>();\r\n      this.tokenFetchPromise = newPromise;\r\n\r\n      try {\r\n        const existingToken = await this.getExistingToken();\r\n\r\n        if (existingToken?.expiresAt) {\r\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n          if (expiresAt && expiresAt > DateTime.now()) {\r\n            const newToken = { ...existingToken, expiresAt } as TToken;\r\n            newPromise.resolve(newToken);\r\n            return newToken;\r\n          }\r\n        }\r\n\r\n        const newToken = await this.generateNewToken(...args);\r\n        newPromise.resolve(newToken);\r\n        return newToken;\r\n      } catch (e) {\r\n        newPromise.reject(e);\r\n        if (this.tokenFetchPromise === newPromise) {\r\n          this.tokenFetchPromise = undefined;\r\n        }\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  async getExistingToken() {\r\n    const existingToken = await this.existingTokenFetcher();\r\n\r\n    if (existingToken?.expiresAt) {\r\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n      if (expiresAt && expiresAt > DateTime.now()) {\r\n        return { ...existingToken, expiresAt } as TToken;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clearToken() {\r\n    this.tokenFetchPromise = undefined;\r\n  }\r\n}\r\n","export type FetchFunction = (\r\n  input: RequestInfo | URL,\r\n  init?: RequestInit\r\n) => Promise<Response>;\r\n\r\nexport const defaultFetch = async (\r\n  input: RequestInfo | URL,\r\n  init?: RequestInit\r\n): Promise<Response> => fetch(input, init);\r\n","export const GlobalConstants = {\r\n  HALO_WAYPOINT_USER_AGENT:\r\n    \"HaloWaypoint/2021112313511900 CFNetwork/1327.0.4 Darwin/21.2.0\",\r\n  HALO_PC_USER_AGENT: \"SHIVA-2043073184/6.10021.18539.0 (release; PC)\",\r\n  DEFAULT_AUTH_SCOPES: [\"Xboxlive.signin\", \"Xboxlive.offline_access\"],\r\n};\r\n","export class RequestError extends Error {\r\n  public readonly url: string;\r\n  constructor(\r\n    public readonly request: RequestInfo | URL,\r\n    public readonly response: Response\r\n  ) {\r\n    super(\r\n      `${response.status} from ${\r\n        typeof request === \"object\" && \"url\" in request\r\n          ? request.url\r\n          : typeof request === \"string\"\r\n          ? request\r\n          : request.href\r\n      }`\r\n    );\r\n    this.url =\r\n      typeof request === \"object\" && \"url\" in request\r\n        ? request.url\r\n        : typeof request === \"string\"\r\n        ? request\r\n        : request.href;\r\n    this.name = \"RequestError\";\r\n  }\r\n}\r\n","import { handleType, retry } from \"cockatiel\";\r\nimport { RequestError } from \"../util/request-error\";\r\n\r\nexport const unauthorizedRetryPolicy = retry(\r\n  handleType(RequestError, (error) => error.response.status === 401),\r\n  { maxAttempts: 2 }\r\n);\r\n","export const HaloCoreEndpoints = {\r\n  /** Skill origin */\r\n  SkillOrigin: \"skill\",\r\n  /** Profile origin */\r\n  Profile: \"profile\",\r\n  /** Stats origin */\r\n  StatsOrigin: \"halostats\",\r\n  /** Game CMS origin */\r\n  GameCmsOrigin: \"gamecms-hacs\",\r\n  /** Discovery origin */\r\n  DiscoveryOrigin: \"discovery-infiniteugc\",\r\n\r\n  CommsOrigin: \"wpcomms\",\r\n  BanProcessorOrigin: \"banprocessor\",\r\n  SettingsOrigin: \"settings\",\r\n\r\n  /** Service domain */\r\n  ServiceDomain: \"svc.halowaypoint.com:443\",\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport type { SpartanToken } from \"../models/spartan-token\";\r\nimport type { SpartanTokenRequest } from \"../models/spartan-token-request\";\r\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\r\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { GlobalConstants } from \"../util/global-contants\";\r\nimport { RequestError } from \"../util/request-error\";\r\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\r\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\r\n\r\nexport interface Token {\r\n  token: string;\r\n  expiresAt: DateTime;\r\n}\r\n\r\nexport class HaloAuthenticationClient {\r\n  private spartanTokenCache = new ExpiryTokenCache(\r\n    async () => {\r\n      const failureHandler = unauthorizedRetryPolicy.onFailure(\r\n        async ({ handled }) => {\r\n          if (handled) {\r\n            await this.clearXstsToken();\r\n          }\r\n        }\r\n      );\r\n      try {\r\n        return await unauthorizedRetryPolicy.execute(async () => {\r\n          const xstsToken = await this.fetchXstsToken();\r\n\r\n          const tokenRequest: SpartanTokenRequest = {\r\n            Audience: \"urn:343:s3:services\",\r\n            MinVersion: \"4\",\r\n            Proof: [\r\n              {\r\n                Token: xstsToken,\r\n                TokenType: \"Xbox_XSTSv3\",\r\n              },\r\n            ],\r\n          };\r\n          const url = `https://${HaloCoreEndpoints.SettingsOrigin}.${HaloCoreEndpoints.ServiceDomain}/spartan-token`;\r\n          const response = await this.fetchFn(url, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(tokenRequest),\r\n            headers: {\r\n              \"User-Agent\": GlobalConstants.HALO_WAYPOINT_USER_AGENT,\r\n              \"Content-Type\": \"application/json; charset=utf-8\",\r\n              Accept: \"application/json, text/plain, */*\",\r\n            },\r\n          });\r\n          if (response.status >= 200 && response.status < 300) {\r\n            const result_2 = (await response.json()) as SpartanToken;\r\n\r\n            const newToken = {\r\n              token: result_2.SpartanToken,\r\n              expiresAt: DateTime.fromISO(result_2.ExpiresUtc.ISO8601Date),\r\n            };\r\n            await this.saveToken(newToken);\r\n            return newToken;\r\n          } else {\r\n            throw new RequestError(url, response);\r\n          }\r\n        });\r\n      } finally {\r\n        failureHandler.dispose();\r\n      }\r\n    },\r\n    () => this.loadToken()\r\n  );\r\n\r\n  constructor(\r\n    private readonly fetchXstsToken: () => Promise<string> | string,\r\n    private readonly clearXstsToken: () => Promise<void>,\r\n    private readonly loadToken: () => Promise<{\r\n      token: string;\r\n      expiresAt: unknown;\r\n    } | null>,\r\n    private readonly saveToken: (token: Token) => Promise<void>,\r\n    private readonly clearToken: () => Promise<void>,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  public async getSpartanToken() {\r\n    const { token } = await this.spartanTokenCache.getToken();\r\n    return token;\r\n  }\r\n\r\n  public async clearSpartanToken() {\r\n    // Clear from memory\r\n    this.spartanTokenCache.clearToken();\r\n    // Clear from storage\r\n    await this.clearToken();\r\n  }\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { ResolvablePromise } from \"./resolvable-promise\";\r\nimport { coalesceDateTime } from \"./date-time\";\r\n\r\nexport class KeyedExpiryTokenCache<\r\n  TToken extends { expiresAt: DateTime },\r\n  TKey extends string,\r\n  TArgs extends any[]\r\n> {\r\n  private readonly tokenFetchPromiseMap = new Map<\r\n    TKey,\r\n    ResolvablePromise<TToken>\r\n  >();\r\n\r\n  constructor(\r\n    private readonly generateNewToken: (\r\n      key: TKey,\r\n      ...args: TArgs\r\n    ) => Promise<TToken>,\r\n    private readonly existingTokenFetcher: (\r\n      key: TKey\r\n    ) => Promise<(Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null>\r\n  ) {}\r\n\r\n  async getToken(key: TKey, ...args: TArgs): Promise<TToken> {\r\n    let tokenFetchPromise = this.tokenFetchPromiseMap.get(key);\r\n    if (tokenFetchPromise) {\r\n      // Someone either already has a token or is in the process of getting one\r\n      // Wait for them to finish, then check for validity\r\n      const currentToken = await tokenFetchPromise;\r\n\r\n      if (currentToken.expiresAt > DateTime.now()) {\r\n        // Current token is valid, return it\r\n        return currentToken;\r\n      } else {\r\n        // Current token expired, start a new promise\r\n        tokenFetchPromise = new ResolvablePromise<TToken>();\r\n        this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\r\n\r\n        try {\r\n          const newToken = await this.generateNewToken(key, ...args);\r\n          tokenFetchPromise.resolve(newToken);\r\n          return newToken;\r\n        } catch (e) {\r\n          tokenFetchPromise.reject(e);\r\n          tokenFetchPromise = undefined;\r\n          throw e;\r\n        }\r\n      }\r\n    } else {\r\n      // No one has a token, start a new promise\r\n      tokenFetchPromise = new ResolvablePromise<TToken>();\r\n      this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\r\n\r\n      try {\r\n        const existingToken = await this.getExistingToken(key);\r\n\r\n        if (existingToken?.expiresAt) {\r\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n          if (expiresAt && expiresAt > DateTime.now().minus({ minute: 1 })) {\r\n            const newToken = { ...existingToken, expiresAt } as TToken;\r\n            tokenFetchPromise.resolve(newToken);\r\n            return newToken;\r\n          }\r\n        }\r\n\r\n        const newToken = await this.generateNewToken(key, ...args);\r\n        tokenFetchPromise.resolve(newToken);\r\n        return newToken;\r\n      } catch (e) {\r\n        tokenFetchPromise.reject(e);\r\n        tokenFetchPromise = undefined;\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  async getExistingToken(key: TKey) {\r\n    const existingToken = await this.existingTokenFetcher(key);\r\n\r\n    if (existingToken?.expiresAt) {\r\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n      if (expiresAt && expiresAt > DateTime.now()) {\r\n        return { ...existingToken, expiresAt } as TToken;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clearToken(key: TKey) {\r\n    this.tokenFetchPromiseMap.delete(key);\r\n  }\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { TokenPersister } from \"../core/token-persisters\";\r\nimport { XboxTicket } from \"../models/xbox-ticket\";\r\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\r\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\r\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { RequestError } from \"../util/request-error\";\r\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\r\n\r\nexport enum RelyingParty {\r\n  Xbox = \"http://xboxlive.com\",\r\n  Halo = \"https://prod.xsts.halowaypoint.com/\",\r\n}\r\n\r\nexport interface XboxAuthenticationToken {\r\n  token: string;\r\n  expiresAt: DateTime;\r\n  refreshToken: string;\r\n}\r\n\r\nexport class XboxAuthenticationClient {\r\n  private userTokenCache = new ExpiryTokenCache(\r\n    async (accessToken: string) => {\r\n      const url = \"https://user.auth.xboxlive.com/user/authenticate\";\r\n      const response = await this.fetchFn(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          \"x-xbl-contract-version\": \"1\",\r\n        },\r\n        body: JSON.stringify({\r\n          RelyingParty: \"http://auth.xboxlive.com\",\r\n          TokenType: \"JWT\",\r\n          Properties: {\r\n            AuthMethod: \"RPS\",\r\n            SiteName: \"user.auth.xboxlive.com\",\r\n            RpsTicket: `d=${accessToken}`,\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (response.status >= 200 && response.status < 300) {\r\n        const result = (await response.json()) as XboxTicket;\r\n\r\n        const token = {\r\n          ...result,\r\n          expiresAt: DateTime.fromISO(result.NotAfter),\r\n        };\r\n        await (\r\n          await this.tokenPersisterOrPromise\r\n        )?.save(\"xbox.userToken\", token);\r\n        return token;\r\n      } else {\r\n        throw new RequestError(url, response);\r\n      }\r\n    },\r\n    async () => {\r\n      const tokenPersister = await this.tokenPersisterOrPromise;\r\n      return (\r\n        (await tokenPersister?.load<XboxTicket & { expiresAt: unknown }>(\r\n          \"xbox.userToken\"\r\n        )) ?? null\r\n      );\r\n    }\r\n  );\r\n  private xstsTicketCache = new KeyedExpiryTokenCache(\r\n    async (relyingParty: RelyingParty, userToken: string) => {\r\n      const url = \"https://xsts.auth.xboxlive.com/xsts/authorize\";\r\n      const response = await this.fetchFn(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          \"x-xbl-contract-version\": \"1\",\r\n        },\r\n        body: JSON.stringify({\r\n          RelyingParty: relyingParty,\r\n          TokenType: \"JWT\",\r\n          Properties: {\r\n            SandboxId: \"RETAIL\",\r\n            UserTokens: [userToken],\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (response.status >= 200 && response.status < 300) {\r\n        const result = (await response.json()) as XboxTicket;\r\n\r\n        const token = {\r\n          ...result,\r\n          expiresAt: DateTime.fromISO(result.NotAfter),\r\n        };\r\n        await (\r\n          await this.tokenPersisterOrPromise\r\n        )?.save(\"xbox.xstsTicket.\" + relyingParty, token);\r\n        return token;\r\n      } else {\r\n        throw new RequestError(url, response);\r\n      }\r\n    },\r\n    async (relyingParty) =>\r\n      (await (\r\n        await this.tokenPersisterOrPromise\r\n      )?.load<XboxTicket & { expiresAt: unknown }>(\r\n        \"xbox.xstsTicket.\" + relyingParty\r\n      )) ?? null\r\n  );\r\n\r\n  constructor(\r\n    private readonly tokenPersisterOrPromise?:\r\n      | TokenPersister\r\n      | Promise<TokenPersister>,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  public async getXstsTicket(\r\n    getOauth2AccessToken: () => Promise<string>,\r\n    relyingParty: RelyingParty\r\n  ) {\r\n    let xstsTicket = await this.xstsTicketCache.getExistingToken(relyingParty);\r\n    if (!xstsTicket) {\r\n      let userToken = await this.userTokenCache.getExistingToken();\r\n      const xstsTicketFailureHandler = unauthorizedRetryPolicy.onFailure(\r\n        async ({ handled }) => {\r\n          if (handled) {\r\n            // Clear from memory\r\n            this.userTokenCache.clearToken();\r\n            // Clear from storage\r\n            await (await this.tokenPersisterOrPromise)?.clear(\"xbox.userToken\");\r\n            userToken = null;\r\n          }\r\n        }\r\n      );\r\n      xstsTicket = await unauthorizedRetryPolicy\r\n        .execute(async () => {\r\n          if (!userToken) {\r\n            // Ouath2 token depends on nothing, so we can fetch it without\r\n            // worrying if it is expired.\r\n            const oauthToken = await getOauth2AccessToken();\r\n            userToken = await this.userTokenCache.getToken(oauthToken);\r\n          }\r\n          return this.xstsTicketCache.getToken(relyingParty, userToken.Token);\r\n        })\r\n        .finally(() => xstsTicketFailureHandler.dispose());\r\n    }\r\n    return xstsTicket;\r\n  }\r\n\r\n  public clearXstsTicket = async (relyingParty: RelyingParty) => {\r\n    // Clear from memory\r\n    this.xstsTicketCache.clearToken(relyingParty);\r\n    // Clear from storage\r\n    (await this.tokenPersisterOrPromise)?.clear(\r\n      \"xbox.xstsTicket.\" + relyingParty\r\n    );\r\n  };\r\n\r\n  public getXboxLiveV3Token = (xboxTicket: XboxTicket) =>\r\n    `XBL3.0 x=${xboxTicket.DisplayClaims.xui[0].uhs};${xboxTicket.Token}`;\r\n}\r\n","export enum AssetKind {\r\n  Film,\r\n  Map,\r\n  Playlist,\r\n  Prefab,\r\n  TestAsset,\r\n  UgcGameVariant,\r\n  MapModePair,\r\n  Project,\r\n  Manifest,\r\n  EngineGameVariant,\r\n}\r\n","export enum MatchType {\r\n  All = 0,\r\n  Matchmaking = 1,\r\n  Custom = 2,\r\n  Local = 3,\r\n}\r\n","export function wrapPlayerId(playerId: string) {\r\n  if (/^\\w+\\(\\d+\\)/.test(playerId)) {\r\n    return playerId;\r\n  } else {\r\n    // Assume xuid\r\n    return `xuid(${playerId})`;\r\n  }\r\n}\r\n\r\nexport function unwrapPlayerId(playerId: string) {\r\n  const match = /^\\w+\\((\\d+)\\)$/.exec(playerId);\r\n  if (match) {\r\n    return match[1];\r\n  } else {\r\n    return playerId;\r\n  }\r\n}\r\n","import { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\r\nimport {\r\n  MapAsset,\r\n  MapModePairAsset,\r\n  PlaylistAsset,\r\n  UgcGameVariantAsset,\r\n} from \"../models/halo-infinite/asset\";\r\nimport { AssetKind } from \"../models/halo-infinite/asset-kind\";\r\nimport { MatchSkill } from \"../models/halo-infinite/match-skill\";\r\nimport { MatchStats } from \"../models/halo-infinite/match-stats\";\r\nimport { MatchType } from \"../models/halo-infinite/match-type\";\r\nimport { PlayerMatchHistory } from \"../models/halo-infinite/player-match-history\";\r\nimport { Playlist } from \"../models/halo-infinite/playlist\";\r\nimport { PlaylistCsrContainer } from \"../models/halo-infinite/playlist-csr-container\";\r\nimport { ServiceRecord } from \"../models/halo-infinite/service-record\";\r\nimport { UserInfo } from \"../models/halo-infinite/user-info\";\r\nimport { GlobalConstants } from \"../util/global-contants\";\r\nimport { SpartanTokenProvider } from \"./token-providers/spartan-token-providers\";\r\nimport { RequestError } from \"../util/request-error\";\r\nimport { MatchesPrivacy } from \"../models/halo-infinite/matches-privacy\";\r\nimport { MedalsMetadataFile } from \"../models/halo-infinite/medals-metadata-file\";\r\nimport {\r\n  ProgressionFileType,\r\n  ProgressionFileTypeMap,\r\n} from \"../models/halo-infinite/progression-file\";\r\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\r\nimport { BanSummary } from \"../models/halo-infinite/ban-summary\";\r\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\r\nimport { DateTime } from \"luxon\";\r\nimport { wrapPlayerId, unwrapPlayerId } from \"../util/xuid\";\r\nimport { SeasonCalendarContainer } from \"../models/halo-infinite/season\";\r\n\r\nexport interface ResultContainer<TValue> {\r\n  Id: string;\r\n  ResultCode: 0 | 1;\r\n  Result: TValue;\r\n}\r\n\r\nexport interface ResultsContainer<TValue> {\r\n  Value: ResultContainer<TValue>[];\r\n}\r\n\r\ninterface PaginationContainer<TValue> {\r\n  Start: number;\r\n  Count: number;\r\n  ResultCount: number;\r\n  Results: TValue[];\r\n}\r\n\r\nexport type AssetKindTypeMap = {\r\n  [AssetKind.Map]: MapAsset;\r\n  [AssetKind.UgcGameVariant]: UgcGameVariantAsset;\r\n  [AssetKind.Playlist]: PlaylistAsset;\r\n  [AssetKind.MapModePair]: MapModePairAsset;\r\n};\r\n\r\nconst assetKindUrlMap = {\r\n  [AssetKind.Map]: \"Maps\" as const,\r\n  [AssetKind.UgcGameVariant]: \"UgcGameVariants\" as const,\r\n  [AssetKind.Playlist]: \"Playlists\" as const,\r\n  [AssetKind.MapModePair]: \"MapModePairs\" as const,\r\n} satisfies {\r\n  [key in keyof AssetKindTypeMap]: string;\r\n};\r\nexport class HaloInfiniteClient {\r\n  private clearanceMap = new Map<\r\n    string,\r\n    {\r\n      FlightConfigurationId: string;\r\n      expiresAt: DateTime;\r\n    }\r\n  >();\r\n  private clearanceCache = new KeyedExpiryTokenCache(\r\n    async () => {\r\n      const { xuid } = await this.getCurrentUser();\r\n      const response = await this.executeRequest(\r\n        `https://${HaloCoreEndpoints.SettingsOrigin}.${\r\n          HaloCoreEndpoints.ServiceDomain\r\n        }/oban/flight-configurations/titles/hi/audiences/retail/players/${wrapPlayerId(\r\n          xuid\r\n        )}/active`,\r\n        { method: \"get\" }\r\n      );\r\n      const {\r\n        FlightConfigurationId,\r\n      }: {\r\n        FlightConfigurationId: string;\r\n      } = await response.json();\r\n      const expiresHeader = response.headers.get(\"expires\");\r\n      return {\r\n        FlightConfigurationId,\r\n        expiresAt: expiresHeader\r\n          ? DateTime.fromHTTP(expiresHeader)\r\n          : DateTime.now().plus({ seconds: 5 }),\r\n      };\r\n    },\r\n    async (spartanToken) => this.clearanceMap.get(spartanToken) ?? null\r\n  );\r\n\r\n  constructor(\r\n    private readonly spartanTokenProvider: SpartanTokenProvider,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  private async executeRequest(url: string, init: RequestInit) {\r\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\r\n      async ({ handled }) => {\r\n        if (handled) {\r\n          await this.spartanTokenProvider.clearSpartanToken();\r\n        }\r\n      }\r\n    );\r\n    try {\r\n      return await unauthorizedRetryPolicy.execute(async () => {\r\n        const headers = new Headers(init.headers);\r\n        if (!headers.has(\"User-Agent\")) {\r\n          headers.set(\"User-Agent\", GlobalConstants.HALO_PC_USER_AGENT);\r\n        }\r\n        if (!headers.has(\"Accept\")) {\r\n          headers.set(\"Accept\", \"application/json\");\r\n        }\r\n        headers.set(\r\n          \"x-343-authorization-spartan\",\r\n          await this.spartanTokenProvider.getSpartanToken()\r\n        );\r\n\r\n        const response = await this.fetchFn(url, {\r\n          ...init,\r\n          headers,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new RequestError(url, response);\r\n        }\r\n\r\n        return response;\r\n      });\r\n    } finally {\r\n      failureHandler.dispose();\r\n    }\r\n  }\r\n\r\n  private async executeJsonRequest<T>(url: string, init: RequestInit) {\r\n    const response = await this.executeRequest(url, init);\r\n\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return (await response.json()) as T;\r\n    } else {\r\n      throw new RequestError(url, response);\r\n    }\r\n  }\r\n\r\n  private async executeResultsRequest<T>(\r\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\r\n  ) {\r\n    let resultsContainer: ResultsContainer<T>;\r\n    try {\r\n      resultsContainer = await this.executeJsonRequest<ResultsContainer<T>>(\r\n        ...args\r\n      );\r\n    } catch (e) {\r\n      if (e instanceof RequestError && e.response.status === 404) {\r\n        const contentLength = e.response.headers.get(\"Content-Length\");\r\n        if (contentLength && parseInt(contentLength) > 0) {\r\n          // 404s if even one of the xuids is invalid\r\n          resultsContainer = (await e.response.json()) as ResultsContainer<T>;\r\n        }\r\n      }\r\n\r\n      throw e;\r\n    }\r\n    return resultsContainer.Value;\r\n  }\r\n\r\n  private async executePaginationRequest<T>(\r\n    count: number,\r\n    start: number,\r\n    queryParameters: Record<string, string>,\r\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\r\n  ) {\r\n    const [url, ...rest] = args;\r\n    const result = await this.executeJsonRequest<PaginationContainer<T>>(\r\n      `${url}?${new URLSearchParams({\r\n        ...queryParameters,\r\n        count: count.toString(),\r\n        start: start.toString(),\r\n      })}`,\r\n      ...rest\r\n    );\r\n\r\n    return result.Results;\r\n  }\r\n\r\n  /** Gets playlist Competitive Skill Rank (CSR) for a player or a set of players.\r\n   * @param playlistId - Unique ID for the playlist.\r\n   * @param playerIds - Array of player xuids.\r\n   */\r\n  public getPlaylistCsr = (\r\n    playlistId: string,\r\n    playerIds: string[],\r\n    seasonId?: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    const urlParams = new URLSearchParams({\r\n      players: playerIds.map(wrapPlayerId).join(\",\"),\r\n    });\r\n    if (seasonId) {\r\n      urlParams.set(\"season\", seasonId);\r\n    }\r\n    return this.executeResultsRequest<PlaylistCsrContainer>(\r\n      `https://${HaloCoreEndpoints.SkillOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/playlist/${playlistId}/csrs?${urlParams}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n  };\r\n\r\n  /** Get gamertag info for a player.\r\n   * @param gamerTag - Gamertag to lookup.\r\n   */\r\n  public getUser = (\r\n    gamerTag: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<UserInfo>(\r\n      `https://${HaloCoreEndpoints.Profile}.${HaloCoreEndpoints.ServiceDomain}/users/gt(${gamerTag})`,\r\n\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Get gamertag info for several players.\r\n   * @param xuids - Xuids to lookup.\r\n   */\r\n  public getUsers = (\r\n    xuids: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    return this.executeJsonRequest<UserInfo[]>(\r\n      `https://${HaloCoreEndpoints.Profile}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/users?xuids=${xuids.map((x) => unwrapPlayerId(x)).join(\",\")}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n  };\r\n\r\n  /** Get service record for a player.\r\n   * @param gamerTag - Gamertag to lookup.\r\n   */\r\n  public getUserServiceRecord = (\r\n    gamerTagOrWrappedXuid: string,\r\n    queryParameters?: { seasonId?: string; playlistAssetId?: string },\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<ServiceRecord>(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${gamerTagOrWrappedXuid}/Matchmade/servicerecord?${new URLSearchParams(\r\n        queryParameters\r\n      ).toString()}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Get playlist information\r\n   * @param playlistId - Unique ID for the playlist.\r\n   */\r\n  public getPlaylist = async (\r\n    playlistId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    const clearanceToken = await this.clearanceCache.getToken(\r\n      await this.spartanTokenProvider.getSpartanToken()\r\n    );\r\n    return this.executeJsonRequest<Playlist>(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/multiplayer/file/playlists/assets/${playlistId}.json`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n        headers: {\r\n          ...init?.headers,\r\n          \"343-clearance\": clearanceToken.FlightConfigurationId,\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  public getPlayerMatches = (\r\n    playerXuid: string,\r\n    type: MatchType = MatchType.All,\r\n    count: number = 25,\r\n    start: number = 0,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    let params: Record<string, string> = {};\r\n    if (type !== MatchType.All) {\r\n      params.type = type.toString();\r\n    }\r\n    return this.executePaginationRequest<PlayerMatchHistory>(\r\n      count,\r\n      start,\r\n      params,\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n  };\r\n\r\n  public getMatchStats = (\r\n    matchId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<MatchStats>(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/matches/${matchId}/stats`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getMatchSkill = async (\r\n    matchId: string,\r\n    playerIds: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    await this.executeResultsRequest<MatchSkill>(\r\n      `https://${HaloCoreEndpoints.SkillOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/matches/${matchId}/skill?players=${playerIds\r\n        .map(wrapPlayerId)\r\n        .join(\",\")}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Gets authoring metadata about a specific asset. */\r\n  public getAsset = <TAssetType extends keyof AssetKindTypeMap>(\r\n    assetType: TAssetType,\r\n    assetId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\r\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Gets metadata related to a concrete version of a specified asset. */\r\n  public getSpecificAssetVersion = <TAssetType extends keyof AssetKindTypeMap>(\r\n    assetType: TAssetType,\r\n    assetId: string,\r\n    versionId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\r\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}/versions/${versionId}`,\r\n      {\r\n        ...init,\r\n        headers: {\r\n          Origin: \"https://www.halowaypoint.com\",\r\n        },\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  // Don't be fooled, the \"profile\" version of this endpoint is worthless\r\n  public getCurrentUser = (\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<{ xuid: string; notificationsReadDate: string }> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.CommsOrigin}.${HaloCoreEndpoints.ServiceDomain}/users/me`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getMatchesPrivacy = (\r\n    playerXuid: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<MatchesPrivacy> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public updateMatchesPrivacy = (\r\n    playerXuid: string,\r\n    matchesPrivacy: MatchesPrivacy,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<MatchesPrivacy> => {\r\n    const headers = new Headers(init?.headers);\r\n    headers.set(\"Content-Type\", \"application/json\");\r\n    return this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\r\n      {\r\n        ...init,\r\n        method: \"put\",\r\n        headers,\r\n        body: JSON.stringify({ matchesPrivacy }),\r\n      }\r\n    );\r\n  };\r\n\r\n  public getProgressionFile = <TFileType extends ProgressionFileType>(\r\n    filename: `${TFileType}/${string}.json`,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<ProgressionFileTypeMap[TFileType]> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Progression/file/${filename}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getMedalsMetadataFile = (\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<MedalsMetadataFile> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Waypoint/file/medals/metadata.json`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getBanSummary = (\r\n    xuids: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<BanSummary> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.BanProcessorOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/bansummary?targets={${xuids.map(wrapPlayerId).join(\",\")}}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getSeasonCalendar = (\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<SeasonCalendarContainer> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/progression/file/calendars/seasons/seasoncalendar.json`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n}\r\n","import { TokenPersister } from \".\";\r\n\r\nconst tokens = new Map<string, any>();\r\n\r\nexport const inMemoryTokenPersister: TokenPersister = {\r\n  load: (tokenName) => {\r\n    return tokens.get(tokenName);\r\n  },\r\n  save: (tokenName, token) => {\r\n    tokens.set(tokenName, token);\r\n  },\r\n  clear: (tokenName) => {\r\n    tokens.delete(tokenName);\r\n  },\r\n};\r\n","import {\r\n  RelyingParty,\r\n  XboxAuthenticationClient,\r\n} from \"../../authentication/xbox-authentication-client\";\r\nimport { TokenPersister } from \"../token-persisters\";\r\nimport { HaloAuthenticationClient } from \"../../authentication/halo-authentication-client\";\r\nimport { SpartanTokenProvider } from \"./spartan-token-providers\";\r\nimport { inMemoryTokenPersister } from \"../token-persisters/in-memory-token-persister\";\r\nimport { XboxTokenProvider } from \"./xbox-token-provider\";\r\nimport type { FetchFunction } from \"../../util/fetch-function\";\r\n\r\n/**\r\n * A SpartanTokenProvider that fetches both the Xbox and Halo tokens in the same\r\n * process. This is useful for applications that do not need to contend with\r\n * CORS restrictions.\r\n */\r\nexport class AutoTokenProvider\r\n  implements SpartanTokenProvider, XboxTokenProvider\r\n{\r\n  public readonly getSpartanToken: () => Promise<string>;\r\n  public readonly clearSpartanToken: () => Promise<void>;\r\n  public readonly getXboxLiveV3Token: () => Promise<string>;\r\n  public readonly clearXboxLiveV3Token: () => Promise<void>;\r\n\r\n  constructor(\r\n    getOauth2AccessToken: () => Promise<string>,\r\n    tokenPersister?: TokenPersister | Promise<TokenPersister>,\r\n    fetchFn?: FetchFunction\r\n  ) {\r\n    let tokenPeristerOrPromise: TokenPersister | Promise<TokenPersister>;\r\n    if (tokenPersister) {\r\n      tokenPeristerOrPromise = tokenPersister;\r\n    } else {\r\n      tokenPeristerOrPromise = inMemoryTokenPersister;\r\n    }\r\n    const xboxAuthClient = new XboxAuthenticationClient(\r\n      tokenPersister,\r\n      fetchFn\r\n    );\r\n    const haloAuthClient = new HaloAuthenticationClient(\r\n      async () => {\r\n        const xstsTicket = await xboxAuthClient.getXstsTicket(\r\n          getOauth2AccessToken,\r\n          RelyingParty.Halo\r\n        );\r\n        return xstsTicket.Token;\r\n      },\r\n      async () => {\r\n        await xboxAuthClient.clearXstsTicket(RelyingParty.Halo);\r\n      },\r\n      async () => {\r\n        const tokenPersister = await tokenPeristerOrPromise;\r\n        return await tokenPersister.load(\"halo.authToken\");\r\n      },\r\n      async (token) => {\r\n        const tokenPersister = await tokenPeristerOrPromise;\r\n        await tokenPersister.save(\"halo.authToken\", token);\r\n      },\r\n      async () => {\r\n        const tokenPersister = await tokenPeristerOrPromise;\r\n        await tokenPersister.clear(\"halo.authToken\");\r\n      },\r\n      fetchFn\r\n    );\r\n\r\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\r\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\r\n    this.getXboxLiveV3Token = async () => {\r\n      const xstsTicket = await xboxAuthClient.getXstsTicket(\r\n        getOauth2AccessToken,\r\n        RelyingParty.Xbox\r\n      );\r\n      return xboxAuthClient.getXboxLiveV3Token(xstsTicket);\r\n    };\r\n    this.clearXboxLiveV3Token = () =>\r\n      xboxAuthClient.clearXstsTicket(RelyingParty.Xbox);\r\n  }\r\n}\r\n","import { TokenPersister } from \"../../token-persisters\";\r\nimport { HaloAuthenticationClient } from \"../../../authentication/halo-authentication-client\";\r\nimport { SpartanTokenProvider } from \".\";\r\nimport { inMemoryTokenPersister } from \"../../token-persisters/in-memory-token-persister\";\r\n\r\n/**\r\n * A SpartanTokenProvider that fetches uses a pre-fetched XSTS ticket token.\r\n * Since requests to the Halo API are subject to CORS restrictions a\r\n * HaloAuthenticationClient can be instantitated with a pre-fetched XSTS ticket\r\n * and run on a server (such as one provided by the user).\r\n */\r\nexport class StaticXstsTicketTokenSpartanTokenProvider\r\n  implements SpartanTokenProvider\r\n{\r\n  public readonly getSpartanToken: () => Promise<string>;\r\n  public readonly clearSpartanToken: () => Promise<void>;\r\n\r\n  constructor(\r\n    xstsTicketToken: string,\r\n    tokenPersister?: TokenPersister | Promise<TokenPersister>\r\n  ) {\r\n    let actualTokenPersister: TokenPersister | Promise<TokenPersister>;\r\n    if (tokenPersister) {\r\n      actualTokenPersister = tokenPersister;\r\n    } else {\r\n      actualTokenPersister = inMemoryTokenPersister;\r\n    }\r\n\r\n    const haloAuthClient = new HaloAuthenticationClient(\r\n      () => xstsTicketToken,\r\n      async () => {\r\n        console.warn(\r\n          \"StaticXstsTicketTokenSpartanTokenProvider does not clearing xstsTickets\"\r\n        );\r\n      },\r\n      async () =>\r\n        (await (await actualTokenPersister).load(\"halo.authToken\")) ?? null,\r\n      async (token) => {\r\n        await (await actualTokenPersister).save(\"halo.authToken\", token);\r\n      },\r\n      async () => {\r\n        await (await actualTokenPersister).clear(\"halo.authToken\");\r\n      }\r\n    );\r\n\r\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\r\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\r\n  }\r\n}\r\n","import { RequestError } from \"../util/request-error\";\r\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { XboxTokenProvider } from \"./token-providers/xbox-token-provider\";\r\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\r\nimport { unwrapPlayerId } from \"../util/xuid\";\r\n\r\nexport class XboxClient {\r\n  constructor(\r\n    private readonly xboxTokenProvider: XboxTokenProvider,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  private async executeRequest<T>(url: string, init: RequestInit): Promise<T> {\r\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\r\n      async ({ handled }) => {\r\n        if (handled) {\r\n          await this.xboxTokenProvider.clearXboxLiveV3Token();\r\n        }\r\n      }\r\n    );\r\n    try {\r\n      return await unauthorizedRetryPolicy.execute(async () => {\r\n        const headers = new Headers(init.headers);\r\n        if (!headers.has(\"Accept\")) {\r\n          headers.set(\"Accept\", \"application/json\");\r\n        }\r\n        if (!headers.has(\"Authorization\")) {\r\n          headers.set(\r\n            \"Authorization\",\r\n            await this.xboxTokenProvider.getXboxLiveV3Token()\r\n          );\r\n        }\r\n        if (!headers.has(\"x-xbl-contract-version\")) {\r\n          headers.set(\"x-xbl-contract-version\", \"3\");\r\n        }\r\n        const response = await this.fetchFn(url, {\r\n          ...init,\r\n          headers,\r\n        });\r\n\r\n        if (response.status >= 200 && response.status < 300) {\r\n          return (await response.json()) as T;\r\n        } else {\r\n          throw new RequestError(url, response);\r\n        }\r\n      });\r\n    } finally {\r\n      failureHandler.dispose();\r\n    }\r\n  }\r\n\r\n  public async searchUsers(\r\n    query: string,\r\n    maxItems: number = 5,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) {\r\n    const { people } = await this.executeRequest<{\r\n      people: [\r\n        {\r\n          xuid: string;\r\n          gamertag: string;\r\n          displayPicRaw: string;\r\n        }\r\n      ];\r\n    }>(\r\n      `https://peoplehub.xboxlive.com/users/me/people/search?q=${encodeURIComponent(\r\n        query\r\n      )}&maxItems=${maxItems}`,\r\n      { ...init, method: \"GET\" }\r\n    );\r\n    return people;\r\n  }\r\n\r\n  public async recentPlayers(init?: Omit<RequestInit, \"body\" | \"method\">) {\r\n    return await this.executeRequest<unknown>(\r\n      \"https://peoplehub.xboxlive.com/users/me/people/recentplayers\",\r\n      { ...init, method: \"GET\" }\r\n    );\r\n  }\r\n\r\n  public async getProfiles(\r\n    xuids: string[],\r\n    settings: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) {\r\n    init?.headers;\r\n    return await this.executeRequest<{\r\n      profileUsers: {\r\n        id: string;\r\n        settings: { id: string; value: string }[];\r\n      }[];\r\n    }>(\"https://profile.xboxlive.com/users/batch/profile/settings\", {\r\n      ...init,\r\n      headers: {\r\n        ...init?.headers,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        userIds: xuids.map(unwrapPlayerId),\r\n        settings,\r\n      }),\r\n    });\r\n  }\r\n}\r\n","export enum GameVariantCategory {\r\n  MultiplayerSlayer = 6,\r\n  MultiplayerAttrition = 7,\r\n  MultiplayerElimination = 8,\r\n  MultiplayerFiesta = 9,\r\n  MultiplayerStrongholds = 11,\r\n  MultiplayerKingOfTheHill = 12,\r\n  MultiplayerTotalControl = 14,\r\n  MultiplayerCtf = 15,\r\n  MultiplayerExtraction = 17,\r\n  MultiplayerOddball = 18,\r\n  MultiplayerStockpile = 19,\r\n  MultiplayerInfection = 22,\r\n  MultiplayerVIP = 23,\r\n  MultiplayerEscalation = 24,\r\n  MultiplayerGrifball = 25,\r\n  MultiplayerLandGrab = 39,\r\n  MultiplayerMinigame = 41,\r\n  MultiplayerFirefight = 42,\r\n}\r\n","export enum MatchOutcome {\r\n  Tie = 1,\r\n  Win = 2,\r\n  Loss = 3,\r\n  DidNotFinish = 4,\r\n}\r\n","export enum Privacy {\r\n  Show = 1,\r\n  Hide = 2,\r\n}\r\n\r\nexport interface MatchesPrivacy {\r\n  MatchmadeGames: Privacy;\r\n  OtherGames: Privacy;\r\n}\r\n","export enum PlaylistExperience {\r\n  Arena = 2,\r\n  Social = 3,\r\n  Featured = 5,\r\n}\r\n","import { ApiFormattedDate } from \"./api-formatted-date\";\r\n\r\nexport enum ProgressionFileType {\r\n  Seasons = \"Seasons\",\r\n  Calendars = \"Calendars\",\r\n  \"Csr/Seasons\" = \"Csr/Seasons\",\r\n}\r\n\r\nexport type ProgressionFileTypeMap = {\r\n  Calendars: SeasonCalendarProgressionFile;\r\n  Seasons: SeasonProgressionFile;\r\n  [\"Csr/Seasons\"]: CsrSeasonCalendarProgressionFile;\r\n};\r\n\r\nexport interface SeasonCalendarProgressionFile {\r\n  Seasons: {\r\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\r\n    OperationTrackPath: `RewardTracks/Operations/${string}.json`;\r\n    SeasonMetadata: `Seasons/${string}.json`;\r\n    StartDate: ApiFormattedDate;\r\n    EndDate: ApiFormattedDate;\r\n  }[];\r\n  Events: {\r\n    RewardTrackPath: `RewardTracks/Events/Rituals/${string}.json`;\r\n    StartDate: ApiFormattedDate;\r\n    EndDate: ApiFormattedDate;\r\n  }[];\r\n  CareerRank: { RewardTrackPath: `RewardTracks/CareerRanks/${string}.json` };\r\n}\r\n\r\nexport interface CsrSeasonCalendarProgressionFile {\r\n  Seasons: {\r\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\r\n    StartDate: ApiFormattedDate;\r\n    EndDate: ApiFormattedDate;\r\n  }[];\r\n}\r\n\r\nexport interface SeasonProgressionFile {\r\n  DateRange: string;\r\n  Name: string;\r\n  Logo: string;\r\n  Number: number;\r\n  Description: string;\r\n  SummaryBackgroundPath: string;\r\n  BattlePassSeasonUpsellBackgroundImage: string;\r\n  ChallengesBackgroundPath: string;\r\n  BattlePassLogoImage: string;\r\n  SeasonLogoImage: string;\r\n  RitualLogoImage: string;\r\n  StorefrontBackgroundImage: string;\r\n  CardBackgroundImage: string;\r\n  ProgressionBackgroundImage: string;\r\n}\r\n"]}
\ No newline at end of file
+{"version":3,"sources":["../src/util/resolvable-promise.ts","../src/util/date-time.ts","../src/util/expiry-token-cache.ts","../src/util/fetch-function.ts","../src/util/global-contants.ts","../src/util/request-error.ts","../src/core/request-policy.ts","../src/endpoints/halo-core-endpoints.ts","../src/authentication/halo-authentication-client.ts","../src/util/keyed-expiry-token-cache.ts","../src/authentication/xbox-authentication-client.ts","../src/models/halo-infinite/asset-kind.ts","../src/models/halo-infinite/match-type.ts","../src/util/xuid.ts","../src/core/halo-infinite-client.ts","../src/core/token-persisters/in-memory-token-persister.ts","../src/core/token-providers/auto-token-provider.ts","../src/core/token-providers/spartan-token-providers/static-xsts-ticket-token-spartan-token-provider.ts","../src/core/xbox-client.ts","../src/models/halo-infinite/game-variant-category.ts","../src/models/halo-infinite/match-outcome.ts","../src/models/halo-infinite/matches-privacy.ts","../src/models/halo-infinite/playlist-experience.ts","../src/models/halo-infinite/progression-file.ts"],"names":["DateTime","newToken","retry","handleType","RelyingParty","AssetKind","MatchType","tokenPersister","GameVariantCategory","MatchOutcome","Privacy","PlaylistExperience","ProgressionFileType"],"mappings":"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","file":"index.cjs","sourcesContent":["export class ResolvablePromise<TReturn> extends Promise<TReturn> {\n  isCompleted = false;\n  readonly resolve: (value: TReturn | PromiseLike<TReturn>) => void;\n  readonly reject: (reason?: unknown) => void;\n  constructor() {\n    let resolve!: (value: TReturn | PromiseLike<TReturn>) => void;\n    let reject!: (reason?: unknown) => void;\n    super((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    this.resolve = (v) => {\n      this.isCompleted = true;\n      return resolve(v);\n    };\n    this.reject = (r) => {\n      this.isCompleted = true;\n      return reject(r);\n    };\n  }\n\n  // you can also use Symbol.species in order to\n  // return a Promise for then/catch/finally\n  static get [Symbol.species]() {\n    return Promise;\n  }\n\n  // Promise overrides his Symbol.toStringTag\n  get [Symbol.toStringTag]() {\n    return \"ResolvablePromise\";\n  }\n}\n","import { DateTime } from \"luxon\";\n\nexport function coalesceDateTime(maybeDateTime: unknown) {\n  if (DateTime.isDateTime(maybeDateTime)) {\n    return maybeDateTime;\n  } else if (maybeDateTime instanceof Date) {\n    return DateTime.fromJSDate(maybeDateTime);\n  } else if (typeof maybeDateTime === \"string\") {\n    return DateTime.fromISO(maybeDateTime);\n  }\n  return undefined;\n}\n","import { DateTime } from \"luxon\";\nimport { ResolvablePromise } from \"./resolvable-promise\";\nimport { coalesceDateTime } from \"./date-time\";\n\nexport class ExpiryTokenCache<\n  TToken extends { expiresAt: DateTime },\n  TArgs extends any[]\n> {\n  private tokenFetchPromise: ResolvablePromise<TToken> | undefined = undefined;\n\n  constructor(\n    private readonly generateNewToken: (...args: TArgs) => Promise<TToken>,\n    private readonly existingTokenFetcher: () => Promise<\n      (Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null\n    >\n  ) {}\n\n  // TODO: Compare args and separate cache entries based on input\n  async getToken(...args: TArgs): Promise<TToken> {\n    if (this.tokenFetchPromise) {\n      // Someone either already has a token or is in the process of getting one\n      // Wait for them to finish, then check for validity\n      const currentToken = await this.tokenFetchPromise;\n\n      if (currentToken.expiresAt > DateTime.now().minus({ minute: 1 })) {\n        // Current token is valid, return it\n        return currentToken;\n      } else {\n        // Current token expired, start a new promise\n        const newPromise = new ResolvablePromise<TToken>();\n        this.tokenFetchPromise = newPromise;\n\n        try {\n          const newToken = await this.generateNewToken(...args);\n          newPromise.resolve(newToken);\n          return newToken;\n        } catch (e) {\n          newPromise.reject(e);\n          if (this.tokenFetchPromise === newPromise) {\n            this.tokenFetchPromise = undefined;\n          }\n          throw e;\n        }\n      }\n    } else {\n      // No one has a token, start a new promise\n      const newPromise = new ResolvablePromise<TToken>();\n      this.tokenFetchPromise = newPromise;\n\n      try {\n        const existingToken = await this.getExistingToken();\n\n        if (existingToken?.expiresAt) {\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\n          if (expiresAt && expiresAt > DateTime.now()) {\n            const newToken = { ...existingToken, expiresAt } as TToken;\n            newPromise.resolve(newToken);\n            return newToken;\n          }\n        }\n\n        const newToken = await this.generateNewToken(...args);\n        newPromise.resolve(newToken);\n        return newToken;\n      } catch (e) {\n        newPromise.reject(e);\n        if (this.tokenFetchPromise === newPromise) {\n          this.tokenFetchPromise = undefined;\n        }\n        throw e;\n      }\n    }\n  }\n\n  async getExistingToken() {\n    const existingToken = await this.existingTokenFetcher();\n\n    if (existingToken?.expiresAt) {\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\n      if (expiresAt && expiresAt > DateTime.now()) {\n        return { ...existingToken, expiresAt } as TToken;\n      }\n    }\n\n    return null;\n  }\n\n  clearToken() {\n    this.tokenFetchPromise = undefined;\n  }\n}\n","export type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit\n) => Promise<Response>;\n\nexport const defaultFetch = async (\n  input: RequestInfo | URL,\n  init?: RequestInit\n): Promise<Response> => fetch(input, init);\n","export const GlobalConstants = {\n  HALO_WAYPOINT_USER_AGENT:\n    \"HaloWaypoint/2021112313511900 CFNetwork/1327.0.4 Darwin/21.2.0\",\n  HALO_PC_USER_AGENT: \"SHIVA-2043073184/6.10021.18539.0 (release; PC)\",\n  DEFAULT_AUTH_SCOPES: [\"Xboxlive.signin\", \"Xboxlive.offline_access\"],\n};\n","export class RequestError extends Error {\n  public readonly url: string;\n  constructor(\n    public readonly request: RequestInfo | URL,\n    public readonly response: Response\n  ) {\n    super(\n      `${response.status} from ${\n        typeof request === \"object\" && \"url\" in request\n          ? request.url\n          : typeof request === \"string\"\n          ? request\n          : request.href\n      }`\n    );\n    this.url =\n      typeof request === \"object\" && \"url\" in request\n        ? request.url\n        : typeof request === \"string\"\n        ? request\n        : request.href;\n    this.name = \"RequestError\";\n  }\n}\n","import { handleType, retry } from \"cockatiel\";\nimport { RequestError } from \"../util/request-error\";\n\nexport const unauthorizedRetryPolicy = retry(\n  handleType(RequestError, (error) => error.response.status === 401),\n  { maxAttempts: 2 }\n);\n","export const HaloCoreEndpoints = {\n  /** Skill origin */\n  SkillOrigin: \"skill\",\n  /** Profile origin */\n  Profile: \"profile\",\n  /** Stats origin */\n  StatsOrigin: \"halostats\",\n  /** Game CMS origin */\n  GameCmsOrigin: \"gamecms-hacs\",\n  /** Discovery origin */\n  DiscoveryOrigin: \"discovery-infiniteugc\",\n\n  CommsOrigin: \"wpcomms\",\n  BanProcessorOrigin: \"banprocessor\",\n  SettingsOrigin: \"settings\",\n\n  /** Service domain */\n  ServiceDomain: \"svc.halowaypoint.com:443\",\n};\n","import { DateTime } from \"luxon\";\nimport type { SpartanToken } from \"../models/spartan-token\";\nimport type { SpartanTokenRequest } from \"../models/spartan-token-request\";\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { GlobalConstants } from \"../util/global-contants\";\nimport { RequestError } from \"../util/request-error\";\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\n\nexport interface Token {\n  token: string;\n  expiresAt: DateTime;\n}\n\nexport class HaloAuthenticationClient {\n  private spartanTokenCache = new ExpiryTokenCache(\n    async () => {\n      const failureHandler = unauthorizedRetryPolicy.onFailure(\n        async ({ handled }) => {\n          if (handled) {\n            await this.clearXstsToken();\n          }\n        }\n      );\n      try {\n        return await unauthorizedRetryPolicy.execute(async () => {\n          const xstsToken = await this.fetchXstsToken();\n\n          const tokenRequest: SpartanTokenRequest = {\n            Audience: \"urn:343:s3:services\",\n            MinVersion: \"4\",\n            Proof: [\n              {\n                Token: xstsToken,\n                TokenType: \"Xbox_XSTSv3\",\n              },\n            ],\n          };\n          const url = `https://${HaloCoreEndpoints.SettingsOrigin}.${HaloCoreEndpoints.ServiceDomain}/spartan-token`;\n          const response = await this.fetchFn(url, {\n            method: \"POST\",\n            body: JSON.stringify(tokenRequest),\n            headers: {\n              \"User-Agent\": GlobalConstants.HALO_WAYPOINT_USER_AGENT,\n              \"Content-Type\": \"application/json; charset=utf-8\",\n              Accept: \"application/json, text/plain, */*\",\n            },\n          });\n          if (response.status >= 200 && response.status < 300) {\n            const result_2 = (await response.json()) as SpartanToken;\n\n            const newToken = {\n              token: result_2.SpartanToken,\n              expiresAt: DateTime.fromISO(result_2.ExpiresUtc.ISO8601Date),\n            };\n            await this.saveToken(newToken);\n            return newToken;\n          } else {\n            throw new RequestError(url, response);\n          }\n        });\n      } finally {\n        failureHandler.dispose();\n      }\n    },\n    () => this.loadToken()\n  );\n\n  constructor(\n    private readonly fetchXstsToken: () => Promise<string> | string,\n    private readonly clearXstsToken: () => Promise<void>,\n    private readonly loadToken: () => Promise<{\n      token: string;\n      expiresAt: unknown;\n    } | null>,\n    private readonly saveToken: (token: Token) => Promise<void>,\n    private readonly clearToken: () => Promise<void>,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  public async getSpartanToken() {\n    const { token } = await this.spartanTokenCache.getToken();\n    return token;\n  }\n\n  public async clearSpartanToken() {\n    // Clear from memory\n    this.spartanTokenCache.clearToken();\n    // Clear from storage\n    await this.clearToken();\n  }\n}\n","import { DateTime } from \"luxon\";\nimport { ResolvablePromise } from \"./resolvable-promise\";\nimport { coalesceDateTime } from \"./date-time\";\n\nexport class KeyedExpiryTokenCache<\n  TToken extends { expiresAt: DateTime },\n  TKey extends string,\n  TArgs extends any[]\n> {\n  private readonly tokenFetchPromiseMap = new Map<\n    TKey,\n    ResolvablePromise<TToken>\n  >();\n\n  constructor(\n    private readonly generateNewToken: (\n      key: TKey,\n      ...args: TArgs\n    ) => Promise<TToken>,\n    private readonly existingTokenFetcher: (\n      key: TKey\n    ) => Promise<(Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null>\n  ) {}\n\n  async getToken(key: TKey, ...args: TArgs): Promise<TToken> {\n    let tokenFetchPromise = this.tokenFetchPromiseMap.get(key);\n    if (tokenFetchPromise) {\n      // Someone either already has a token or is in the process of getting one\n      // Wait for them to finish, then check for validity\n      const currentToken = await tokenFetchPromise;\n\n      if (currentToken.expiresAt > DateTime.now()) {\n        // Current token is valid, return it\n        return currentToken;\n      } else {\n        // Current token expired, start a new promise\n        tokenFetchPromise = new ResolvablePromise<TToken>();\n        this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\n\n        try {\n          const newToken = await this.generateNewToken(key, ...args);\n          tokenFetchPromise.resolve(newToken);\n          return newToken;\n        } catch (e) {\n          tokenFetchPromise.reject(e);\n          tokenFetchPromise = undefined;\n          throw e;\n        }\n      }\n    } else {\n      // No one has a token, start a new promise\n      tokenFetchPromise = new ResolvablePromise<TToken>();\n      this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\n\n      try {\n        const existingToken = await this.getExistingToken(key);\n\n        if (existingToken?.expiresAt) {\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\n          if (expiresAt && expiresAt > DateTime.now().minus({ minute: 1 })) {\n            const newToken = { ...existingToken, expiresAt } as TToken;\n            tokenFetchPromise.resolve(newToken);\n            return newToken;\n          }\n        }\n\n        const newToken = await this.generateNewToken(key, ...args);\n        tokenFetchPromise.resolve(newToken);\n        return newToken;\n      } catch (e) {\n        tokenFetchPromise.reject(e);\n        tokenFetchPromise = undefined;\n        throw e;\n      }\n    }\n  }\n\n  async getExistingToken(key: TKey) {\n    const existingToken = await this.existingTokenFetcher(key);\n\n    if (existingToken?.expiresAt) {\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\n      if (expiresAt && expiresAt > DateTime.now()) {\n        return { ...existingToken, expiresAt } as TToken;\n      }\n    }\n\n    return null;\n  }\n\n  clearToken(key: TKey) {\n    this.tokenFetchPromiseMap.delete(key);\n  }\n}\n","import { DateTime } from \"luxon\";\nimport { TokenPersister } from \"../core/token-persisters\";\nimport { XboxTicket } from \"../models/xbox-ticket\";\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { RequestError } from \"../util/request-error\";\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\n\nexport enum RelyingParty {\n  Xbox = \"http://xboxlive.com\",\n  Halo = \"https://prod.xsts.halowaypoint.com/\",\n}\n\nexport interface XboxAuthenticationToken {\n  token: string;\n  expiresAt: DateTime;\n  refreshToken: string;\n}\n\nexport class XboxAuthenticationClient {\n  private userTokenCache = new ExpiryTokenCache(\n    async (accessToken: string) => {\n      const url = \"https://user.auth.xboxlive.com/user/authenticate\";\n      const response = await this.fetchFn(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"x-xbl-contract-version\": \"1\",\n        },\n        body: JSON.stringify({\n          RelyingParty: \"http://auth.xboxlive.com\",\n          TokenType: \"JWT\",\n          Properties: {\n            AuthMethod: \"RPS\",\n            SiteName: \"user.auth.xboxlive.com\",\n            RpsTicket: `d=${accessToken}`,\n          },\n        }),\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        const result = (await response.json()) as XboxTicket;\n\n        const token = {\n          ...result,\n          expiresAt: DateTime.fromISO(result.NotAfter),\n        };\n        await (\n          await this.tokenPersisterOrPromise\n        )?.save(\"xbox.userToken\", token);\n        return token;\n      } else {\n        throw new RequestError(url, response);\n      }\n    },\n    async () => {\n      const tokenPersister = await this.tokenPersisterOrPromise;\n      return (\n        (await tokenPersister?.load<XboxTicket & { expiresAt: unknown }>(\n          \"xbox.userToken\"\n        )) ?? null\n      );\n    }\n  );\n  private xstsTicketCache = new KeyedExpiryTokenCache(\n    async (relyingParty: RelyingParty, userToken: string) => {\n      const url = \"https://xsts.auth.xboxlive.com/xsts/authorize\";\n      const response = await this.fetchFn(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"x-xbl-contract-version\": \"1\",\n        },\n        body: JSON.stringify({\n          RelyingParty: relyingParty,\n          TokenType: \"JWT\",\n          Properties: {\n            SandboxId: \"RETAIL\",\n            UserTokens: [userToken],\n          },\n        }),\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        const result = (await response.json()) as XboxTicket;\n\n        const token = {\n          ...result,\n          expiresAt: DateTime.fromISO(result.NotAfter),\n        };\n        await (\n          await this.tokenPersisterOrPromise\n        )?.save(\"xbox.xstsTicket.\" + relyingParty, token);\n        return token;\n      } else {\n        throw new RequestError(url, response);\n      }\n    },\n    async (relyingParty) =>\n      (await (\n        await this.tokenPersisterOrPromise\n      )?.load<XboxTicket & { expiresAt: unknown }>(\n        \"xbox.xstsTicket.\" + relyingParty\n      )) ?? null\n  );\n\n  constructor(\n    private readonly tokenPersisterOrPromise?:\n      | TokenPersister\n      | Promise<TokenPersister>,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  public async getXstsTicket(\n    getOauth2AccessToken: () => Promise<string>,\n    relyingParty: RelyingParty\n  ) {\n    let xstsTicket = await this.xstsTicketCache.getExistingToken(relyingParty);\n    if (!xstsTicket) {\n      let userToken = await this.userTokenCache.getExistingToken();\n      const xstsTicketFailureHandler = unauthorizedRetryPolicy.onFailure(\n        async ({ handled }) => {\n          if (handled) {\n            // Clear from memory\n            this.userTokenCache.clearToken();\n            // Clear from storage\n            await (await this.tokenPersisterOrPromise)?.clear(\"xbox.userToken\");\n            userToken = null;\n          }\n        }\n      );\n      xstsTicket = await unauthorizedRetryPolicy\n        .execute(async () => {\n          if (!userToken) {\n            // Ouath2 token depends on nothing, so we can fetch it without\n            // worrying if it is expired.\n            const oauthToken = await getOauth2AccessToken();\n            userToken = await this.userTokenCache.getToken(oauthToken);\n          }\n          return this.xstsTicketCache.getToken(relyingParty, userToken.Token);\n        })\n        .finally(() => xstsTicketFailureHandler.dispose());\n    }\n    return xstsTicket;\n  }\n\n  public clearXstsTicket = async (relyingParty: RelyingParty) => {\n    // Clear from memory\n    this.xstsTicketCache.clearToken(relyingParty);\n    // Clear from storage\n    (await this.tokenPersisterOrPromise)?.clear(\n      \"xbox.xstsTicket.\" + relyingParty\n    );\n  };\n\n  public getXboxLiveV3Token = (xboxTicket: XboxTicket) =>\n    `XBL3.0 x=${xboxTicket.DisplayClaims.xui[0].uhs};${xboxTicket.Token}`;\n}\n","export enum AssetKind {\n  Film,\n  Map,\n  Playlist,\n  Prefab,\n  TestAsset,\n  UgcGameVariant,\n  MapModePair,\n  Project,\n  Manifest,\n  EngineGameVariant,\n}\n","export enum MatchType {\n  All = 0,\n  Matchmaking = 1,\n  Custom = 2,\n  Local = 3,\n}\n","export function wrapPlayerId(playerId: string) {\n  if (/^\\w+\\(\\d+\\)/.test(playerId)) {\n    return playerId;\n  } else {\n    // Assume xuid\n    return `xuid(${playerId})`;\n  }\n}\n\nexport function unwrapPlayerId(playerId: string) {\n  const match = /^\\w+\\((\\d+)\\)$/.exec(playerId);\n  if (match) {\n    return match[1];\n  } else {\n    return playerId;\n  }\n}\n","import { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\nimport {\n  MapAsset,\n  MapModePairAsset,\n  PlaylistAsset,\n  UgcGameVariantAsset,\n} from \"../models/halo-infinite/asset\";\nimport { AssetKind } from \"../models/halo-infinite/asset-kind\";\nimport { MatchSkill } from \"../models/halo-infinite/match-skill\";\nimport { MatchStats } from \"../models/halo-infinite/match-stats\";\nimport { MatchType } from \"../models/halo-infinite/match-type\";\nimport { PlayerMatchHistory } from \"../models/halo-infinite/player-match-history\";\nimport { Playlist } from \"../models/halo-infinite/playlist\";\nimport { PlaylistCsrContainer } from \"../models/halo-infinite/playlist-csr-container\";\nimport { ServiceRecord } from \"../models/halo-infinite/service-record\";\nimport { UserInfo } from \"../models/halo-infinite/user-info\";\nimport { GlobalConstants } from \"../util/global-contants\";\nimport { SpartanTokenProvider } from \"./token-providers/spartan-token-providers\";\nimport { RequestError } from \"../util/request-error\";\nimport { MatchesPrivacy } from \"../models/halo-infinite/matches-privacy\";\nimport { MedalsMetadataFile } from \"../models/halo-infinite/medals-metadata-file\";\nimport {\n  ProgressionFileType,\n  ProgressionFileTypeMap,\n} from \"../models/halo-infinite/progression-file\";\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\nimport { BanSummary } from \"../models/halo-infinite/ban-summary\";\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\nimport { DateTime } from \"luxon\";\nimport { wrapPlayerId, unwrapPlayerId } from \"../util/xuid\";\nimport { SeasonCalendarContainer } from \"../models/halo-infinite/season\";\n\nexport interface ResultContainer<TValue> {\n  Id: string;\n  ResultCode: 0 | 1;\n  Result: TValue;\n}\n\nexport interface ResultsContainer<TValue> {\n  Value: ResultContainer<TValue>[];\n}\n\ninterface PaginationContainer<TValue> {\n  Start: number;\n  Count: number;\n  ResultCount: number;\n  Results: TValue[];\n}\n\nexport type AssetKindTypeMap = {\n  [AssetKind.Map]: MapAsset;\n  [AssetKind.UgcGameVariant]: UgcGameVariantAsset;\n  [AssetKind.Playlist]: PlaylistAsset;\n  [AssetKind.MapModePair]: MapModePairAsset;\n};\n\nconst assetKindUrlMap = {\n  [AssetKind.Map]: \"Maps\" as const,\n  [AssetKind.UgcGameVariant]: \"UgcGameVariants\" as const,\n  [AssetKind.Playlist]: \"Playlists\" as const,\n  [AssetKind.MapModePair]: \"MapModePairs\" as const,\n} satisfies {\n  [key in keyof AssetKindTypeMap]: string;\n};\nexport class HaloInfiniteClient {\n  private clearanceMap = new Map<\n    string,\n    {\n      FlightConfigurationId: string;\n      expiresAt: DateTime;\n    }\n  >();\n  private clearanceCache = new KeyedExpiryTokenCache(\n    async () => {\n      const { xuid } = await this.getCurrentUser();\n      const response = await this.executeRequest(\n        `https://${HaloCoreEndpoints.SettingsOrigin}.${\n          HaloCoreEndpoints.ServiceDomain\n        }/oban/flight-configurations/titles/hi/audiences/retail/players/${wrapPlayerId(\n          xuid\n        )}/active`,\n        { method: \"get\" }\n      );\n      const {\n        FlightConfigurationId,\n      }: {\n        FlightConfigurationId: string;\n      } = await response.json();\n      const expiresHeader = response.headers.get(\"expires\");\n      return {\n        FlightConfigurationId,\n        expiresAt: expiresHeader\n          ? DateTime.fromHTTP(expiresHeader)\n          : DateTime.now().plus({ seconds: 5 }),\n      };\n    },\n    async (spartanToken) => this.clearanceMap.get(spartanToken) ?? null\n  );\n\n  constructor(\n    private readonly spartanTokenProvider: SpartanTokenProvider,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  private async executeRequest(url: string, init: RequestInit) {\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\n      async ({ handled }) => {\n        if (handled) {\n          await this.spartanTokenProvider.clearSpartanToken();\n        }\n      }\n    );\n    try {\n      return await unauthorizedRetryPolicy.execute(async () => {\n        const headers = new Headers(init.headers);\n        if (!headers.has(\"User-Agent\")) {\n          headers.set(\"User-Agent\", GlobalConstants.HALO_PC_USER_AGENT);\n        }\n        if (!headers.has(\"Accept\")) {\n          headers.set(\"Accept\", \"application/json\");\n        }\n        headers.set(\n          \"x-343-authorization-spartan\",\n          await this.spartanTokenProvider.getSpartanToken()\n        );\n\n        const response = await this.fetchFn(url, {\n          ...init,\n          headers,\n        });\n\n        if (!response.ok) {\n          throw new RequestError(url, response);\n        }\n\n        return response;\n      });\n    } finally {\n      failureHandler.dispose();\n    }\n  }\n\n  private async executeJsonRequest<T>(url: string, init: RequestInit) {\n    const response = await this.executeRequest(url, init);\n\n    if (response.status >= 200 && response.status < 300) {\n      return (await response.json()) as T;\n    } else {\n      throw new RequestError(url, response);\n    }\n  }\n\n  private async executeResultsRequest<T>(\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\n  ) {\n    let resultsContainer: ResultsContainer<T>;\n    try {\n      resultsContainer = await this.executeJsonRequest<ResultsContainer<T>>(\n        ...args\n      );\n    } catch (e) {\n      if (e instanceof RequestError && e.response.status === 404) {\n        const contentLength = e.response.headers.get(\"Content-Length\");\n        if (contentLength && parseInt(contentLength) > 0) {\n          // 404s if even one of the xuids is invalid\n          resultsContainer = (await e.response.json()) as ResultsContainer<T>;\n        }\n      }\n\n      throw e;\n    }\n    return resultsContainer.Value;\n  }\n\n  private async executePaginationRequest<T>(\n    count: number,\n    start: number,\n    queryParameters: Record<string, string>,\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\n  ) {\n    const [url, ...rest] = args;\n    const result = await this.executeJsonRequest<PaginationContainer<T>>(\n      `${url}?${new URLSearchParams({\n        ...queryParameters,\n        count: count.toString(),\n        start: start.toString(),\n      })}`,\n      ...rest\n    );\n\n    return result.Results;\n  }\n\n  /** Gets playlist Competitive Skill Rank (CSR) for a player or a set of players.\n   * @param playlistId - Unique ID for the playlist.\n   * @param playerIds - Array of player xuids.\n   */\n  public getPlaylistCsr = (\n    playlistId: string,\n    playerIds: string[],\n    seasonId?: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    const urlParams = new URLSearchParams({\n      players: playerIds.map(wrapPlayerId).join(\",\"),\n    });\n    if (seasonId) {\n      urlParams.set(\"season\", seasonId);\n    }\n    return this.executeResultsRequest<PlaylistCsrContainer>(\n      `https://${HaloCoreEndpoints.SkillOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/playlist/${playlistId}/csrs?${urlParams}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n  };\n\n  /** Get gamertag info for a player.\n   * @param gamerTag - Gamertag to lookup.\n   */\n  public getUser = (\n    gamerTag: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<UserInfo>(\n      `https://${HaloCoreEndpoints.Profile}.${HaloCoreEndpoints.ServiceDomain}/users/gt(${gamerTag})`,\n\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Get gamertag info for several players.\n   * @param xuids - Xuids to lookup.\n   */\n  public getUsers = (\n    xuids: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    return this.executeJsonRequest<UserInfo[]>(\n      `https://${HaloCoreEndpoints.Profile}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/users?xuids=${xuids.map((x) => unwrapPlayerId(x)).join(\",\")}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n  };\n\n  /** Get service record for a player.\n   * @param gamerTag - Gamertag to lookup.\n   */\n  public getUserServiceRecord = (\n    gamerTagOrWrappedXuid: string,\n    queryParameters?: { seasonId?: string; playlistAssetId?: string },\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<ServiceRecord>(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${gamerTagOrWrappedXuid}/Matchmade/servicerecord?${new URLSearchParams(\n        queryParameters\n      ).toString()}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Get playlist information\n   * @param playlistId - Unique ID for the playlist.\n   */\n  public getPlaylist = async (\n    playlistId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    const clearanceToken = await this.clearanceCache.getToken(\n      await this.spartanTokenProvider.getSpartanToken()\n    );\n    return this.executeJsonRequest<Playlist>(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/multiplayer/file/playlists/assets/${playlistId}.json`,\n      {\n        ...init,\n        method: \"get\",\n        headers: {\n          ...init?.headers,\n          \"343-clearance\": clearanceToken.FlightConfigurationId,\n        },\n      }\n    );\n  };\n\n  public getPlayerMatches = (\n    playerXuid: string,\n    type: MatchType = MatchType.All,\n    count: number = 25,\n    start: number = 0,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    let params: Record<string, string> = {};\n    if (type !== MatchType.All) {\n      params.type = type.toString();\n    }\n    return this.executePaginationRequest<PlayerMatchHistory>(\n      count,\n      start,\n      params,\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n  };\n\n  public getMatchStats = (\n    matchId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<MatchStats>(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/matches/${matchId}/stats`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getMatchSkill = async (\n    matchId: string,\n    playerIds: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    await this.executeResultsRequest<MatchSkill>(\n      `https://${HaloCoreEndpoints.SkillOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/matches/${matchId}/skill?players=${playerIds\n        .map(wrapPlayerId)\n        .join(\",\")}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Gets authoring metadata about a specific asset. */\n  public getAsset = <TAssetType extends keyof AssetKindTypeMap>(\n    assetType: TAssetType,\n    assetId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Gets metadata related to a concrete version of a specified asset. */\n  public getSpecificAssetVersion = <TAssetType extends keyof AssetKindTypeMap>(\n    assetType: TAssetType,\n    assetId: string,\n    versionId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}/versions/${versionId}`,\n      {\n        ...init,\n        headers: {\n          Origin: \"https://www.halowaypoint.com\",\n        },\n        method: \"get\",\n      }\n    );\n\n  // Don't be fooled, the \"profile\" version of this endpoint is worthless\n  public getCurrentUser = (\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<{ xuid: string; notificationsReadDate: string }> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.CommsOrigin}.${HaloCoreEndpoints.ServiceDomain}/users/me`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getMatchesPrivacy = (\n    playerXuid: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<MatchesPrivacy> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public updateMatchesPrivacy = (\n    playerXuid: string,\n    matchesPrivacy: MatchesPrivacy,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<MatchesPrivacy> => {\n    const headers = new Headers(init?.headers);\n    headers.set(\"Content-Type\", \"application/json\");\n    return this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\n      {\n        ...init,\n        method: \"put\",\n        headers,\n        body: JSON.stringify({ matchesPrivacy }),\n      }\n    );\n  };\n\n  public getProgressionFile = <TFileType extends ProgressionFileType>(\n    filename: `${TFileType}/${string}.json`,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<ProgressionFileTypeMap[TFileType]> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Progression/file/${filename}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getMedalsMetadataFile = (\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<MedalsMetadataFile> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Waypoint/file/medals/metadata.json`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getBanSummary = (\n    xuids: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<BanSummary> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.BanProcessorOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/bansummary?targets={${xuids.map(wrapPlayerId).join(\",\")}}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getSeasonCalendar = (\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<SeasonCalendarContainer> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/progression/file/calendars/seasons/seasoncalendar.json`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n}\n","import { TokenPersister } from \".\";\n\nconst tokens = new Map<string, any>();\n\nexport const inMemoryTokenPersister: TokenPersister = {\n  load: (tokenName) => {\n    return tokens.get(tokenName);\n  },\n  save: (tokenName, token) => {\n    tokens.set(tokenName, token);\n  },\n  clear: (tokenName) => {\n    tokens.delete(tokenName);\n  },\n};\n","import {\n  RelyingParty,\n  XboxAuthenticationClient,\n} from \"../../authentication/xbox-authentication-client\";\nimport { TokenPersister } from \"../token-persisters\";\nimport { HaloAuthenticationClient } from \"../../authentication/halo-authentication-client\";\nimport { SpartanTokenProvider } from \"./spartan-token-providers\";\nimport { inMemoryTokenPersister } from \"../token-persisters/in-memory-token-persister\";\nimport { XboxTokenProvider } from \"./xbox-token-provider\";\nimport type { FetchFunction } from \"../../util/fetch-function\";\n\n/**\n * A SpartanTokenProvider that fetches both the Xbox and Halo tokens in the same\n * process. This is useful for applications that do not need to contend with\n * CORS restrictions.\n */\nexport class AutoTokenProvider\n  implements SpartanTokenProvider, XboxTokenProvider\n{\n  public readonly getSpartanToken: () => Promise<string>;\n  public readonly clearSpartanToken: () => Promise<void>;\n  public readonly getXboxLiveV3Token: () => Promise<string>;\n  public readonly clearXboxLiveV3Token: () => Promise<void>;\n\n  constructor(\n    getOauth2AccessToken: () => Promise<string>,\n    tokenPersister?: TokenPersister | Promise<TokenPersister>,\n    fetchFn?: FetchFunction\n  ) {\n    let tokenPeristerOrPromise: TokenPersister | Promise<TokenPersister>;\n    if (tokenPersister) {\n      tokenPeristerOrPromise = tokenPersister;\n    } else {\n      tokenPeristerOrPromise = inMemoryTokenPersister;\n    }\n    const xboxAuthClient = new XboxAuthenticationClient(\n      tokenPersister,\n      fetchFn\n    );\n    const haloAuthClient = new HaloAuthenticationClient(\n      async () => {\n        const xstsTicket = await xboxAuthClient.getXstsTicket(\n          getOauth2AccessToken,\n          RelyingParty.Halo\n        );\n        return xstsTicket.Token;\n      },\n      async () => {\n        await xboxAuthClient.clearXstsTicket(RelyingParty.Halo);\n      },\n      async () => {\n        const tokenPersister = await tokenPeristerOrPromise;\n        return await tokenPersister.load(\"halo.authToken\");\n      },\n      async (token) => {\n        const tokenPersister = await tokenPeristerOrPromise;\n        await tokenPersister.save(\"halo.authToken\", token);\n      },\n      async () => {\n        const tokenPersister = await tokenPeristerOrPromise;\n        await tokenPersister.clear(\"halo.authToken\");\n      },\n      fetchFn\n    );\n\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\n    this.getXboxLiveV3Token = async () => {\n      const xstsTicket = await xboxAuthClient.getXstsTicket(\n        getOauth2AccessToken,\n        RelyingParty.Xbox\n      );\n      return xboxAuthClient.getXboxLiveV3Token(xstsTicket);\n    };\n    this.clearXboxLiveV3Token = () =>\n      xboxAuthClient.clearXstsTicket(RelyingParty.Xbox);\n  }\n}\n","import { TokenPersister } from \"../../token-persisters\";\nimport { HaloAuthenticationClient } from \"../../../authentication/halo-authentication-client\";\nimport { SpartanTokenProvider } from \".\";\nimport { inMemoryTokenPersister } from \"../../token-persisters/in-memory-token-persister\";\n\n/**\n * A SpartanTokenProvider that fetches uses a pre-fetched XSTS ticket token.\n * Since requests to the Halo API are subject to CORS restrictions a\n * HaloAuthenticationClient can be instantitated with a pre-fetched XSTS ticket\n * and run on a server (such as one provided by the user).\n */\nexport class StaticXstsTicketTokenSpartanTokenProvider\n  implements SpartanTokenProvider\n{\n  public readonly getSpartanToken: () => Promise<string>;\n  public readonly clearSpartanToken: () => Promise<void>;\n\n  constructor(\n    xstsTicketToken: string,\n    tokenPersister?: TokenPersister | Promise<TokenPersister>\n  ) {\n    let actualTokenPersister: TokenPersister | Promise<TokenPersister>;\n    if (tokenPersister) {\n      actualTokenPersister = tokenPersister;\n    } else {\n      actualTokenPersister = inMemoryTokenPersister;\n    }\n\n    const haloAuthClient = new HaloAuthenticationClient(\n      () => xstsTicketToken,\n      async () => {\n        console.warn(\n          \"StaticXstsTicketTokenSpartanTokenProvider does not clearing xstsTickets\"\n        );\n      },\n      async () =>\n        (await (await actualTokenPersister).load(\"halo.authToken\")) ?? null,\n      async (token) => {\n        await (await actualTokenPersister).save(\"halo.authToken\", token);\n      },\n      async () => {\n        await (await actualTokenPersister).clear(\"halo.authToken\");\n      }\n    );\n\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\n  }\n}\n","import { RequestError } from \"../util/request-error\";\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { XboxTokenProvider } from \"./token-providers/xbox-token-provider\";\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\nimport { unwrapPlayerId } from \"../util/xuid\";\n\nexport class XboxClient {\n  constructor(\n    private readonly xboxTokenProvider: XboxTokenProvider,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  private async executeRequest<T>(url: string, init: RequestInit): Promise<T> {\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\n      async ({ handled }) => {\n        if (handled) {\n          await this.xboxTokenProvider.clearXboxLiveV3Token();\n        }\n      }\n    );\n    try {\n      return await unauthorizedRetryPolicy.execute(async () => {\n        const headers = new Headers(init.headers);\n        if (!headers.has(\"Accept\")) {\n          headers.set(\"Accept\", \"application/json\");\n        }\n        if (!headers.has(\"Authorization\")) {\n          headers.set(\n            \"Authorization\",\n            await this.xboxTokenProvider.getXboxLiveV3Token()\n          );\n        }\n        if (!headers.has(\"x-xbl-contract-version\")) {\n          headers.set(\"x-xbl-contract-version\", \"3\");\n        }\n        const response = await this.fetchFn(url, {\n          ...init,\n          headers,\n        });\n\n        if (response.status >= 200 && response.status < 300) {\n          return (await response.json()) as T;\n        } else {\n          throw new RequestError(url, response);\n        }\n      });\n    } finally {\n      failureHandler.dispose();\n    }\n  }\n\n  public async searchUsers(\n    query: string,\n    maxItems: number = 5,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) {\n    const { people } = await this.executeRequest<{\n      people: [\n        {\n          xuid: string;\n          gamertag: string;\n          displayPicRaw: string;\n        }\n      ];\n    }>(\n      `https://peoplehub.xboxlive.com/users/me/people/search?q=${encodeURIComponent(\n        query\n      )}&maxItems=${maxItems}`,\n      { ...init, method: \"GET\" }\n    );\n    return people;\n  }\n\n  public async recentPlayers(init?: Omit<RequestInit, \"body\" | \"method\">) {\n    return await this.executeRequest<unknown>(\n      \"https://peoplehub.xboxlive.com/users/me/people/recentplayers\",\n      { ...init, method: \"GET\" }\n    );\n  }\n\n  public async getProfiles(\n    xuids: string[],\n    settings: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) {\n    init?.headers;\n    return await this.executeRequest<{\n      profileUsers: {\n        id: string;\n        settings: { id: string; value: string }[];\n      }[];\n    }>(\"https://profile.xboxlive.com/users/batch/profile/settings\", {\n      ...init,\n      headers: {\n        ...init?.headers,\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        userIds: xuids.map(unwrapPlayerId),\n        settings,\n      }),\n    });\n  }\n}\n","export enum GameVariantCategory {\n  MultiplayerSlayer = 6,\n  MultiplayerAttrition = 7,\n  MultiplayerElimination = 8,\n  MultiplayerFiesta = 9,\n  MultiplayerStrongholds = 11,\n  MultiplayerKingOfTheHill = 12,\n  MultiplayerTotalControl = 14,\n  MultiplayerCtf = 15,\n  MultiplayerExtraction = 17,\n  MultiplayerOddball = 18,\n  MultiplayerStockpile = 19,\n  MultiplayerInfection = 22,\n  MultiplayerVIP = 23,\n  MultiplayerEscalation = 24,\n  MultiplayerGrifball = 25,\n  MultiplayerLandGrab = 39,\n  MultiplayerMinigame = 41,\n  MultiplayerFirefight = 42,\n}\n","export enum MatchOutcome {\n  Tie = 1,\n  Win = 2,\n  Loss = 3,\n  DidNotFinish = 4,\n}\n","export enum Privacy {\n  Show = 1,\n  Hide = 2,\n}\n\nexport interface MatchesPrivacy {\n  MatchmadeGames: Privacy;\n  OtherGames: Privacy;\n}\n","export enum PlaylistExperience {\n  Arena = 2,\n  Social = 3,\n  Featured = 5,\n}\n","import { ApiFormattedDate } from \"./api-formatted-date\";\n\nexport enum ProgressionFileType {\n  Seasons = \"Seasons\",\n  Calendars = \"Calendars\",\n  \"Csr/Seasons\" = \"Csr/Seasons\",\n}\n\nexport type ProgressionFileTypeMap = {\n  Calendars: SeasonCalendarProgressionFile;\n  Seasons: SeasonProgressionFile;\n  [\"Csr/Seasons\"]: CsrSeasonCalendarProgressionFile;\n};\n\nexport interface SeasonCalendarProgressionFile {\n  Seasons: {\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\n    OperationTrackPath: `RewardTracks/Operations/${string}.json`;\n    SeasonMetadata: `Seasons/${string}.json`;\n    StartDate: ApiFormattedDate;\n    EndDate: ApiFormattedDate;\n  }[];\n  Events: {\n    RewardTrackPath: `RewardTracks/Events/Rituals/${string}.json`;\n    StartDate: ApiFormattedDate;\n    EndDate: ApiFormattedDate;\n  }[];\n  CareerRank: { RewardTrackPath: `RewardTracks/CareerRanks/${string}.json` };\n}\n\nexport interface CsrSeasonCalendarProgressionFile {\n  Seasons: {\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\n    StartDate: ApiFormattedDate;\n    EndDate: ApiFormattedDate;\n  }[];\n}\n\nexport interface SeasonProgressionFile {\n  DateRange: string;\n  Name: string;\n  Logo: string;\n  Number: number;\n  Description: string;\n  SummaryBackgroundPath: string;\n  BattlePassSeasonUpsellBackgroundImage: string;\n  ChallengesBackgroundPath: string;\n  BattlePassLogoImage: string;\n  SeasonLogoImage: string;\n  RitualLogoImage: string;\n  StorefrontBackgroundImage: string;\n  CardBackgroundImage: string;\n  ProgressionBackgroundImage: string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/halo-infinite-api/dist/index.js.map b/node_modules/halo-infinite-api/dist/index.js.map
index c49cfb9..2c5df2a 100644
--- a/node_modules/halo-infinite-api/dist/index.js.map
+++ b/node_modules/halo-infinite-api/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../src/util/resolvable-promise.ts","../src/util/date-time.ts","../src/util/expiry-token-cache.ts","../src/util/fetch-function.ts","../src/util/global-contants.ts","../src/util/request-error.ts","../src/core/request-policy.ts","../src/endpoints/halo-core-endpoints.ts","../src/authentication/halo-authentication-client.ts","../src/util/keyed-expiry-token-cache.ts","../src/authentication/xbox-authentication-client.ts","../src/models/halo-infinite/asset-kind.ts","../src/models/halo-infinite/match-type.ts","../src/util/xuid.ts","../src/core/halo-infinite-client.ts","../src/core/token-persisters/in-memory-token-persister.ts","../src/core/token-providers/auto-token-provider.ts","../src/core/token-providers/spartan-token-providers/static-xsts-ticket-token-spartan-token-provider.ts","../src/core/xbox-client.ts","../src/models/halo-infinite/game-variant-category.ts","../src/models/halo-infinite/match-outcome.ts","../src/models/halo-infinite/matches-privacy.ts","../src/models/halo-infinite/playlist-experience.ts","../src/models/halo-infinite/progression-file.ts"],"names":["DateTime","newToken","RelyingParty","AssetKind","MatchType","tokenPersister","GameVariantCategory","MatchOutcome","Privacy","PlaylistExperience","ProgressionFileType"],"mappings":"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","file":"index.js","sourcesContent":["export class ResolvablePromise<TReturn> extends Promise<TReturn> {\r\n  isCompleted = false;\r\n  readonly resolve: (value: TReturn | PromiseLike<TReturn>) => void;\r\n  readonly reject: (reason?: unknown) => void;\r\n  constructor() {\r\n    let resolve!: (value: TReturn | PromiseLike<TReturn>) => void;\r\n    let reject!: (reason?: unknown) => void;\r\n    super((res, rej) => {\r\n      resolve = res;\r\n      reject = rej;\r\n    });\r\n    this.resolve = (v) => {\r\n      this.isCompleted = true;\r\n      return resolve(v);\r\n    };\r\n    this.reject = (r) => {\r\n      this.isCompleted = true;\r\n      return reject(r);\r\n    };\r\n  }\r\n\r\n  // you can also use Symbol.species in order to\r\n  // return a Promise for then/catch/finally\r\n  static get [Symbol.species]() {\r\n    return Promise;\r\n  }\r\n\r\n  // Promise overrides his Symbol.toStringTag\r\n  get [Symbol.toStringTag]() {\r\n    return \"ResolvablePromise\";\r\n  }\r\n}\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport function coalesceDateTime(maybeDateTime: unknown) {\r\n  if (DateTime.isDateTime(maybeDateTime)) {\r\n    return maybeDateTime;\r\n  } else if (maybeDateTime instanceof Date) {\r\n    return DateTime.fromJSDate(maybeDateTime);\r\n  } else if (typeof maybeDateTime === \"string\") {\r\n    return DateTime.fromISO(maybeDateTime);\r\n  }\r\n  return undefined;\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { ResolvablePromise } from \"./resolvable-promise\";\r\nimport { coalesceDateTime } from \"./date-time\";\r\n\r\nexport class ExpiryTokenCache<\r\n  TToken extends { expiresAt: DateTime },\r\n  TArgs extends any[]\r\n> {\r\n  private tokenFetchPromise: ResolvablePromise<TToken> | undefined = undefined;\r\n\r\n  constructor(\r\n    private readonly generateNewToken: (...args: TArgs) => Promise<TToken>,\r\n    private readonly existingTokenFetcher: () => Promise<\r\n      (Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null\r\n    >\r\n  ) {}\r\n\r\n  // TODO: Compare args and separate cache entries based on input\r\n  async getToken(...args: TArgs): Promise<TToken> {\r\n    if (this.tokenFetchPromise) {\r\n      // Someone either already has a token or is in the process of getting one\r\n      // Wait for them to finish, then check for validity\r\n      const currentToken = await this.tokenFetchPromise;\r\n\r\n      if (currentToken.expiresAt > DateTime.now().minus({ minute: 1 })) {\r\n        // Current token is valid, return it\r\n        return currentToken;\r\n      } else {\r\n        // Current token expired, start a new promise\r\n        const newPromise = new ResolvablePromise<TToken>();\r\n        this.tokenFetchPromise = newPromise;\r\n\r\n        try {\r\n          const newToken = await this.generateNewToken(...args);\r\n          newPromise.resolve(newToken);\r\n          return newToken;\r\n        } catch (e) {\r\n          newPromise.reject(e);\r\n          if (this.tokenFetchPromise === newPromise) {\r\n            this.tokenFetchPromise = undefined;\r\n          }\r\n          throw e;\r\n        }\r\n      }\r\n    } else {\r\n      // No one has a token, start a new promise\r\n      const newPromise = new ResolvablePromise<TToken>();\r\n      this.tokenFetchPromise = newPromise;\r\n\r\n      try {\r\n        const existingToken = await this.getExistingToken();\r\n\r\n        if (existingToken?.expiresAt) {\r\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n          if (expiresAt && expiresAt > DateTime.now()) {\r\n            const newToken = { ...existingToken, expiresAt } as TToken;\r\n            newPromise.resolve(newToken);\r\n            return newToken;\r\n          }\r\n        }\r\n\r\n        const newToken = await this.generateNewToken(...args);\r\n        newPromise.resolve(newToken);\r\n        return newToken;\r\n      } catch (e) {\r\n        newPromise.reject(e);\r\n        if (this.tokenFetchPromise === newPromise) {\r\n          this.tokenFetchPromise = undefined;\r\n        }\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  async getExistingToken() {\r\n    const existingToken = await this.existingTokenFetcher();\r\n\r\n    if (existingToken?.expiresAt) {\r\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n      if (expiresAt && expiresAt > DateTime.now()) {\r\n        return { ...existingToken, expiresAt } as TToken;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clearToken() {\r\n    this.tokenFetchPromise = undefined;\r\n  }\r\n}\r\n","export type FetchFunction = (\r\n  input: RequestInfo | URL,\r\n  init?: RequestInit\r\n) => Promise<Response>;\r\n\r\nexport const defaultFetch = async (\r\n  input: RequestInfo | URL,\r\n  init?: RequestInit\r\n): Promise<Response> => fetch(input, init);\r\n","export const GlobalConstants = {\r\n  HALO_WAYPOINT_USER_AGENT:\r\n    \"HaloWaypoint/2021112313511900 CFNetwork/1327.0.4 Darwin/21.2.0\",\r\n  HALO_PC_USER_AGENT: \"SHIVA-2043073184/6.10021.18539.0 (release; PC)\",\r\n  DEFAULT_AUTH_SCOPES: [\"Xboxlive.signin\", \"Xboxlive.offline_access\"],\r\n};\r\n","export class RequestError extends Error {\r\n  public readonly url: string;\r\n  constructor(\r\n    public readonly request: RequestInfo | URL,\r\n    public readonly response: Response\r\n  ) {\r\n    super(\r\n      `${response.status} from ${\r\n        typeof request === \"object\" && \"url\" in request\r\n          ? request.url\r\n          : typeof request === \"string\"\r\n          ? request\r\n          : request.href\r\n      }`\r\n    );\r\n    this.url =\r\n      typeof request === \"object\" && \"url\" in request\r\n        ? request.url\r\n        : typeof request === \"string\"\r\n        ? request\r\n        : request.href;\r\n    this.name = \"RequestError\";\r\n  }\r\n}\r\n","import { handleType, retry } from \"cockatiel\";\r\nimport { RequestError } from \"../util/request-error\";\r\n\r\nexport const unauthorizedRetryPolicy = retry(\r\n  handleType(RequestError, (error) => error.response.status === 401),\r\n  { maxAttempts: 2 }\r\n);\r\n","export const HaloCoreEndpoints = {\r\n  /** Skill origin */\r\n  SkillOrigin: \"skill\",\r\n  /** Profile origin */\r\n  Profile: \"profile\",\r\n  /** Stats origin */\r\n  StatsOrigin: \"halostats\",\r\n  /** Game CMS origin */\r\n  GameCmsOrigin: \"gamecms-hacs\",\r\n  /** Discovery origin */\r\n  DiscoveryOrigin: \"discovery-infiniteugc\",\r\n\r\n  CommsOrigin: \"wpcomms\",\r\n  BanProcessorOrigin: \"banprocessor\",\r\n  SettingsOrigin: \"settings\",\r\n\r\n  /** Service domain */\r\n  ServiceDomain: \"svc.halowaypoint.com:443\",\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport type { SpartanToken } from \"../models/spartan-token\";\r\nimport type { SpartanTokenRequest } from \"../models/spartan-token-request\";\r\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\r\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { GlobalConstants } from \"../util/global-contants\";\r\nimport { RequestError } from \"../util/request-error\";\r\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\r\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\r\n\r\nexport interface Token {\r\n  token: string;\r\n  expiresAt: DateTime;\r\n}\r\n\r\nexport class HaloAuthenticationClient {\r\n  private spartanTokenCache = new ExpiryTokenCache(\r\n    async () => {\r\n      const failureHandler = unauthorizedRetryPolicy.onFailure(\r\n        async ({ handled }) => {\r\n          if (handled) {\r\n            await this.clearXstsToken();\r\n          }\r\n        }\r\n      );\r\n      try {\r\n        return await unauthorizedRetryPolicy.execute(async () => {\r\n          const xstsToken = await this.fetchXstsToken();\r\n\r\n          const tokenRequest: SpartanTokenRequest = {\r\n            Audience: \"urn:343:s3:services\",\r\n            MinVersion: \"4\",\r\n            Proof: [\r\n              {\r\n                Token: xstsToken,\r\n                TokenType: \"Xbox_XSTSv3\",\r\n              },\r\n            ],\r\n          };\r\n          const url = `https://${HaloCoreEndpoints.SettingsOrigin}.${HaloCoreEndpoints.ServiceDomain}/spartan-token`;\r\n          const response = await this.fetchFn(url, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(tokenRequest),\r\n            headers: {\r\n              \"User-Agent\": GlobalConstants.HALO_WAYPOINT_USER_AGENT,\r\n              \"Content-Type\": \"application/json; charset=utf-8\",\r\n              Accept: \"application/json, text/plain, */*\",\r\n            },\r\n          });\r\n          if (response.status >= 200 && response.status < 300) {\r\n            const result_2 = (await response.json()) as SpartanToken;\r\n\r\n            const newToken = {\r\n              token: result_2.SpartanToken,\r\n              expiresAt: DateTime.fromISO(result_2.ExpiresUtc.ISO8601Date),\r\n            };\r\n            await this.saveToken(newToken);\r\n            return newToken;\r\n          } else {\r\n            throw new RequestError(url, response);\r\n          }\r\n        });\r\n      } finally {\r\n        failureHandler.dispose();\r\n      }\r\n    },\r\n    () => this.loadToken()\r\n  );\r\n\r\n  constructor(\r\n    private readonly fetchXstsToken: () => Promise<string> | string,\r\n    private readonly clearXstsToken: () => Promise<void>,\r\n    private readonly loadToken: () => Promise<{\r\n      token: string;\r\n      expiresAt: unknown;\r\n    } | null>,\r\n    private readonly saveToken: (token: Token) => Promise<void>,\r\n    private readonly clearToken: () => Promise<void>,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  public async getSpartanToken() {\r\n    const { token } = await this.spartanTokenCache.getToken();\r\n    return token;\r\n  }\r\n\r\n  public async clearSpartanToken() {\r\n    // Clear from memory\r\n    this.spartanTokenCache.clearToken();\r\n    // Clear from storage\r\n    await this.clearToken();\r\n  }\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { ResolvablePromise } from \"./resolvable-promise\";\r\nimport { coalesceDateTime } from \"./date-time\";\r\n\r\nexport class KeyedExpiryTokenCache<\r\n  TToken extends { expiresAt: DateTime },\r\n  TKey extends string,\r\n  TArgs extends any[]\r\n> {\r\n  private readonly tokenFetchPromiseMap = new Map<\r\n    TKey,\r\n    ResolvablePromise<TToken>\r\n  >();\r\n\r\n  constructor(\r\n    private readonly generateNewToken: (\r\n      key: TKey,\r\n      ...args: TArgs\r\n    ) => Promise<TToken>,\r\n    private readonly existingTokenFetcher: (\r\n      key: TKey\r\n    ) => Promise<(Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null>\r\n  ) {}\r\n\r\n  async getToken(key: TKey, ...args: TArgs): Promise<TToken> {\r\n    let tokenFetchPromise = this.tokenFetchPromiseMap.get(key);\r\n    if (tokenFetchPromise) {\r\n      // Someone either already has a token or is in the process of getting one\r\n      // Wait for them to finish, then check for validity\r\n      const currentToken = await tokenFetchPromise;\r\n\r\n      if (currentToken.expiresAt > DateTime.now()) {\r\n        // Current token is valid, return it\r\n        return currentToken;\r\n      } else {\r\n        // Current token expired, start a new promise\r\n        tokenFetchPromise = new ResolvablePromise<TToken>();\r\n        this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\r\n\r\n        try {\r\n          const newToken = await this.generateNewToken(key, ...args);\r\n          tokenFetchPromise.resolve(newToken);\r\n          return newToken;\r\n        } catch (e) {\r\n          tokenFetchPromise.reject(e);\r\n          tokenFetchPromise = undefined;\r\n          throw e;\r\n        }\r\n      }\r\n    } else {\r\n      // No one has a token, start a new promise\r\n      tokenFetchPromise = new ResolvablePromise<TToken>();\r\n      this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\r\n\r\n      try {\r\n        const existingToken = await this.getExistingToken(key);\r\n\r\n        if (existingToken?.expiresAt) {\r\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n          if (expiresAt && expiresAt > DateTime.now().minus({ minute: 1 })) {\r\n            const newToken = { ...existingToken, expiresAt } as TToken;\r\n            tokenFetchPromise.resolve(newToken);\r\n            return newToken;\r\n          }\r\n        }\r\n\r\n        const newToken = await this.generateNewToken(key, ...args);\r\n        tokenFetchPromise.resolve(newToken);\r\n        return newToken;\r\n      } catch (e) {\r\n        tokenFetchPromise.reject(e);\r\n        tokenFetchPromise = undefined;\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  async getExistingToken(key: TKey) {\r\n    const existingToken = await this.existingTokenFetcher(key);\r\n\r\n    if (existingToken?.expiresAt) {\r\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\r\n      if (expiresAt && expiresAt > DateTime.now()) {\r\n        return { ...existingToken, expiresAt } as TToken;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clearToken(key: TKey) {\r\n    this.tokenFetchPromiseMap.delete(key);\r\n  }\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { TokenPersister } from \"../core/token-persisters\";\r\nimport { XboxTicket } from \"../models/xbox-ticket\";\r\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\r\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\r\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { RequestError } from \"../util/request-error\";\r\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\r\n\r\nexport enum RelyingParty {\r\n  Xbox = \"http://xboxlive.com\",\r\n  Halo = \"https://prod.xsts.halowaypoint.com/\",\r\n}\r\n\r\nexport interface XboxAuthenticationToken {\r\n  token: string;\r\n  expiresAt: DateTime;\r\n  refreshToken: string;\r\n}\r\n\r\nexport class XboxAuthenticationClient {\r\n  private userTokenCache = new ExpiryTokenCache(\r\n    async (accessToken: string) => {\r\n      const url = \"https://user.auth.xboxlive.com/user/authenticate\";\r\n      const response = await this.fetchFn(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          \"x-xbl-contract-version\": \"1\",\r\n        },\r\n        body: JSON.stringify({\r\n          RelyingParty: \"http://auth.xboxlive.com\",\r\n          TokenType: \"JWT\",\r\n          Properties: {\r\n            AuthMethod: \"RPS\",\r\n            SiteName: \"user.auth.xboxlive.com\",\r\n            RpsTicket: `d=${accessToken}`,\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (response.status >= 200 && response.status < 300) {\r\n        const result = (await response.json()) as XboxTicket;\r\n\r\n        const token = {\r\n          ...result,\r\n          expiresAt: DateTime.fromISO(result.NotAfter),\r\n        };\r\n        await (\r\n          await this.tokenPersisterOrPromise\r\n        )?.save(\"xbox.userToken\", token);\r\n        return token;\r\n      } else {\r\n        throw new RequestError(url, response);\r\n      }\r\n    },\r\n    async () => {\r\n      const tokenPersister = await this.tokenPersisterOrPromise;\r\n      return (\r\n        (await tokenPersister?.load<XboxTicket & { expiresAt: unknown }>(\r\n          \"xbox.userToken\"\r\n        )) ?? null\r\n      );\r\n    }\r\n  );\r\n  private xstsTicketCache = new KeyedExpiryTokenCache(\r\n    async (relyingParty: RelyingParty, userToken: string) => {\r\n      const url = \"https://xsts.auth.xboxlive.com/xsts/authorize\";\r\n      const response = await this.fetchFn(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          \"x-xbl-contract-version\": \"1\",\r\n        },\r\n        body: JSON.stringify({\r\n          RelyingParty: relyingParty,\r\n          TokenType: \"JWT\",\r\n          Properties: {\r\n            SandboxId: \"RETAIL\",\r\n            UserTokens: [userToken],\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (response.status >= 200 && response.status < 300) {\r\n        const result = (await response.json()) as XboxTicket;\r\n\r\n        const token = {\r\n          ...result,\r\n          expiresAt: DateTime.fromISO(result.NotAfter),\r\n        };\r\n        await (\r\n          await this.tokenPersisterOrPromise\r\n        )?.save(\"xbox.xstsTicket.\" + relyingParty, token);\r\n        return token;\r\n      } else {\r\n        throw new RequestError(url, response);\r\n      }\r\n    },\r\n    async (relyingParty) =>\r\n      (await (\r\n        await this.tokenPersisterOrPromise\r\n      )?.load<XboxTicket & { expiresAt: unknown }>(\r\n        \"xbox.xstsTicket.\" + relyingParty\r\n      )) ?? null\r\n  );\r\n\r\n  constructor(\r\n    private readonly tokenPersisterOrPromise?:\r\n      | TokenPersister\r\n      | Promise<TokenPersister>,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  public async getXstsTicket(\r\n    getOauth2AccessToken: () => Promise<string>,\r\n    relyingParty: RelyingParty\r\n  ) {\r\n    let xstsTicket = await this.xstsTicketCache.getExistingToken(relyingParty);\r\n    if (!xstsTicket) {\r\n      let userToken = await this.userTokenCache.getExistingToken();\r\n      const xstsTicketFailureHandler = unauthorizedRetryPolicy.onFailure(\r\n        async ({ handled }) => {\r\n          if (handled) {\r\n            // Clear from memory\r\n            this.userTokenCache.clearToken();\r\n            // Clear from storage\r\n            await (await this.tokenPersisterOrPromise)?.clear(\"xbox.userToken\");\r\n            userToken = null;\r\n          }\r\n        }\r\n      );\r\n      xstsTicket = await unauthorizedRetryPolicy\r\n        .execute(async () => {\r\n          if (!userToken) {\r\n            // Ouath2 token depends on nothing, so we can fetch it without\r\n            // worrying if it is expired.\r\n            const oauthToken = await getOauth2AccessToken();\r\n            userToken = await this.userTokenCache.getToken(oauthToken);\r\n          }\r\n          return this.xstsTicketCache.getToken(relyingParty, userToken.Token);\r\n        })\r\n        .finally(() => xstsTicketFailureHandler.dispose());\r\n    }\r\n    return xstsTicket;\r\n  }\r\n\r\n  public clearXstsTicket = async (relyingParty: RelyingParty) => {\r\n    // Clear from memory\r\n    this.xstsTicketCache.clearToken(relyingParty);\r\n    // Clear from storage\r\n    (await this.tokenPersisterOrPromise)?.clear(\r\n      \"xbox.xstsTicket.\" + relyingParty\r\n    );\r\n  };\r\n\r\n  public getXboxLiveV3Token = (xboxTicket: XboxTicket) =>\r\n    `XBL3.0 x=${xboxTicket.DisplayClaims.xui[0].uhs};${xboxTicket.Token}`;\r\n}\r\n","export enum AssetKind {\r\n  Film,\r\n  Map,\r\n  Playlist,\r\n  Prefab,\r\n  TestAsset,\r\n  UgcGameVariant,\r\n  MapModePair,\r\n  Project,\r\n  Manifest,\r\n  EngineGameVariant,\r\n}\r\n","export enum MatchType {\r\n  All = 0,\r\n  Matchmaking = 1,\r\n  Custom = 2,\r\n  Local = 3,\r\n}\r\n","export function wrapPlayerId(playerId: string) {\r\n  if (/^\\w+\\(\\d+\\)/.test(playerId)) {\r\n    return playerId;\r\n  } else {\r\n    // Assume xuid\r\n    return `xuid(${playerId})`;\r\n  }\r\n}\r\n\r\nexport function unwrapPlayerId(playerId: string) {\r\n  const match = /^\\w+\\((\\d+)\\)$/.exec(playerId);\r\n  if (match) {\r\n    return match[1];\r\n  } else {\r\n    return playerId;\r\n  }\r\n}\r\n","import { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\r\nimport {\r\n  MapAsset,\r\n  MapModePairAsset,\r\n  PlaylistAsset,\r\n  UgcGameVariantAsset,\r\n} from \"../models/halo-infinite/asset\";\r\nimport { AssetKind } from \"../models/halo-infinite/asset-kind\";\r\nimport { MatchSkill } from \"../models/halo-infinite/match-skill\";\r\nimport { MatchStats } from \"../models/halo-infinite/match-stats\";\r\nimport { MatchType } from \"../models/halo-infinite/match-type\";\r\nimport { PlayerMatchHistory } from \"../models/halo-infinite/player-match-history\";\r\nimport { Playlist } from \"../models/halo-infinite/playlist\";\r\nimport { PlaylistCsrContainer } from \"../models/halo-infinite/playlist-csr-container\";\r\nimport { ServiceRecord } from \"../models/halo-infinite/service-record\";\r\nimport { UserInfo } from \"../models/halo-infinite/user-info\";\r\nimport { GlobalConstants } from \"../util/global-contants\";\r\nimport { SpartanTokenProvider } from \"./token-providers/spartan-token-providers\";\r\nimport { RequestError } from \"../util/request-error\";\r\nimport { MatchesPrivacy } from \"../models/halo-infinite/matches-privacy\";\r\nimport { MedalsMetadataFile } from \"../models/halo-infinite/medals-metadata-file\";\r\nimport {\r\n  ProgressionFileType,\r\n  ProgressionFileTypeMap,\r\n} from \"../models/halo-infinite/progression-file\";\r\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\r\nimport { BanSummary } from \"../models/halo-infinite/ban-summary\";\r\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\r\nimport { DateTime } from \"luxon\";\r\nimport { wrapPlayerId, unwrapPlayerId } from \"../util/xuid\";\r\nimport { SeasonCalendarContainer } from \"../models/halo-infinite/season\";\r\n\r\nexport interface ResultContainer<TValue> {\r\n  Id: string;\r\n  ResultCode: 0 | 1;\r\n  Result: TValue;\r\n}\r\n\r\nexport interface ResultsContainer<TValue> {\r\n  Value: ResultContainer<TValue>[];\r\n}\r\n\r\ninterface PaginationContainer<TValue> {\r\n  Start: number;\r\n  Count: number;\r\n  ResultCount: number;\r\n  Results: TValue[];\r\n}\r\n\r\nexport type AssetKindTypeMap = {\r\n  [AssetKind.Map]: MapAsset;\r\n  [AssetKind.UgcGameVariant]: UgcGameVariantAsset;\r\n  [AssetKind.Playlist]: PlaylistAsset;\r\n  [AssetKind.MapModePair]: MapModePairAsset;\r\n};\r\n\r\nconst assetKindUrlMap = {\r\n  [AssetKind.Map]: \"Maps\" as const,\r\n  [AssetKind.UgcGameVariant]: \"UgcGameVariants\" as const,\r\n  [AssetKind.Playlist]: \"Playlists\" as const,\r\n  [AssetKind.MapModePair]: \"MapModePairs\" as const,\r\n} satisfies {\r\n  [key in keyof AssetKindTypeMap]: string;\r\n};\r\nexport class HaloInfiniteClient {\r\n  private clearanceMap = new Map<\r\n    string,\r\n    {\r\n      FlightConfigurationId: string;\r\n      expiresAt: DateTime;\r\n    }\r\n  >();\r\n  private clearanceCache = new KeyedExpiryTokenCache(\r\n    async () => {\r\n      const { xuid } = await this.getCurrentUser();\r\n      const response = await this.executeRequest(\r\n        `https://${HaloCoreEndpoints.SettingsOrigin}.${\r\n          HaloCoreEndpoints.ServiceDomain\r\n        }/oban/flight-configurations/titles/hi/audiences/retail/players/${wrapPlayerId(\r\n          xuid\r\n        )}/active`,\r\n        { method: \"get\" }\r\n      );\r\n      const {\r\n        FlightConfigurationId,\r\n      }: {\r\n        FlightConfigurationId: string;\r\n      } = await response.json();\r\n      const expiresHeader = response.headers.get(\"expires\");\r\n      return {\r\n        FlightConfigurationId,\r\n        expiresAt: expiresHeader\r\n          ? DateTime.fromHTTP(expiresHeader)\r\n          : DateTime.now().plus({ seconds: 5 }),\r\n      };\r\n    },\r\n    async (spartanToken) => this.clearanceMap.get(spartanToken) ?? null\r\n  );\r\n\r\n  constructor(\r\n    private readonly spartanTokenProvider: SpartanTokenProvider,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  private async executeRequest(url: string, init: RequestInit) {\r\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\r\n      async ({ handled }) => {\r\n        if (handled) {\r\n          await this.spartanTokenProvider.clearSpartanToken();\r\n        }\r\n      }\r\n    );\r\n    try {\r\n      return await unauthorizedRetryPolicy.execute(async () => {\r\n        const headers = new Headers(init.headers);\r\n        if (!headers.has(\"User-Agent\")) {\r\n          headers.set(\"User-Agent\", GlobalConstants.HALO_PC_USER_AGENT);\r\n        }\r\n        if (!headers.has(\"Accept\")) {\r\n          headers.set(\"Accept\", \"application/json\");\r\n        }\r\n        headers.set(\r\n          \"x-343-authorization-spartan\",\r\n          await this.spartanTokenProvider.getSpartanToken()\r\n        );\r\n\r\n        const response = await this.fetchFn(url, {\r\n          ...init,\r\n          headers,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new RequestError(url, response);\r\n        }\r\n\r\n        return response;\r\n      });\r\n    } finally {\r\n      failureHandler.dispose();\r\n    }\r\n  }\r\n\r\n  private async executeJsonRequest<T>(url: string, init: RequestInit) {\r\n    const response = await this.executeRequest(url, init);\r\n\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return (await response.json()) as T;\r\n    } else {\r\n      throw new RequestError(url, response);\r\n    }\r\n  }\r\n\r\n  private async executeResultsRequest<T>(\r\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\r\n  ) {\r\n    let resultsContainer: ResultsContainer<T>;\r\n    try {\r\n      resultsContainer = await this.executeJsonRequest<ResultsContainer<T>>(\r\n        ...args\r\n      );\r\n    } catch (e) {\r\n      if (e instanceof RequestError && e.response.status === 404) {\r\n        const contentLength = e.response.headers.get(\"Content-Length\");\r\n        if (contentLength && parseInt(contentLength) > 0) {\r\n          // 404s if even one of the xuids is invalid\r\n          resultsContainer = (await e.response.json()) as ResultsContainer<T>;\r\n        }\r\n      }\r\n\r\n      throw e;\r\n    }\r\n    return resultsContainer.Value;\r\n  }\r\n\r\n  private async executePaginationRequest<T>(\r\n    count: number,\r\n    start: number,\r\n    queryParameters: Record<string, string>,\r\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\r\n  ) {\r\n    const [url, ...rest] = args;\r\n    const result = await this.executeJsonRequest<PaginationContainer<T>>(\r\n      `${url}?${new URLSearchParams({\r\n        ...queryParameters,\r\n        count: count.toString(),\r\n        start: start.toString(),\r\n      })}`,\r\n      ...rest\r\n    );\r\n\r\n    return result.Results;\r\n  }\r\n\r\n  /** Gets playlist Competitive Skill Rank (CSR) for a player or a set of players.\r\n   * @param playlistId - Unique ID for the playlist.\r\n   * @param playerIds - Array of player xuids.\r\n   */\r\n  public getPlaylistCsr = (\r\n    playlistId: string,\r\n    playerIds: string[],\r\n    seasonId?: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    const urlParams = new URLSearchParams({\r\n      players: playerIds.map(wrapPlayerId).join(\",\"),\r\n    });\r\n    if (seasonId) {\r\n      urlParams.set(\"season\", seasonId);\r\n    }\r\n    return this.executeResultsRequest<PlaylistCsrContainer>(\r\n      `https://${HaloCoreEndpoints.SkillOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/playlist/${playlistId}/csrs?${urlParams}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n  };\r\n\r\n  /** Get gamertag info for a player.\r\n   * @param gamerTag - Gamertag to lookup.\r\n   */\r\n  public getUser = (\r\n    gamerTag: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<UserInfo>(\r\n      `https://${HaloCoreEndpoints.Profile}.${HaloCoreEndpoints.ServiceDomain}/users/gt(${gamerTag})`,\r\n\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Get gamertag info for several players.\r\n   * @param xuids - Xuids to lookup.\r\n   */\r\n  public getUsers = (\r\n    xuids: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    return this.executeJsonRequest<UserInfo[]>(\r\n      `https://${HaloCoreEndpoints.Profile}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/users?xuids=${xuids.map((x) => unwrapPlayerId(x)).join(\",\")}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n  };\r\n\r\n  /** Get service record for a player.\r\n   * @param gamerTag - Gamertag to lookup.\r\n   */\r\n  public getUserServiceRecord = (\r\n    gamerTagOrWrappedXuid: string,\r\n    queryParameters?: { seasonId?: string; playlistAssetId?: string },\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<ServiceRecord>(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${gamerTagOrWrappedXuid}/Matchmade/servicerecord?${new URLSearchParams(\r\n        queryParameters\r\n      ).toString()}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Get playlist information\r\n   * @param playlistId - Unique ID for the playlist.\r\n   */\r\n  public getPlaylist = async (\r\n    playlistId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    const clearanceToken = await this.clearanceCache.getToken(\r\n      await this.spartanTokenProvider.getSpartanToken()\r\n    );\r\n    return this.executeJsonRequest<Playlist>(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/multiplayer/file/playlists/assets/${playlistId}.json`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n        headers: {\r\n          ...init?.headers,\r\n          \"343-clearance\": clearanceToken.FlightConfigurationId,\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  public getPlayerMatches = (\r\n    playerXuid: string,\r\n    type: MatchType = MatchType.All,\r\n    count: number = 25,\r\n    start: number = 0,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) => {\r\n    let params: Record<string, string> = {};\r\n    if (type !== MatchType.All) {\r\n      params.type = type.toString();\r\n    }\r\n    return this.executePaginationRequest<PlayerMatchHistory>(\r\n      count,\r\n      start,\r\n      params,\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n  };\r\n\r\n  public getMatchStats = (\r\n    matchId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<MatchStats>(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/matches/${matchId}/stats`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getMatchSkill = async (\r\n    matchId: string,\r\n    playerIds: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    await this.executeResultsRequest<MatchSkill>(\r\n      `https://${HaloCoreEndpoints.SkillOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/matches/${matchId}/skill?players=${playerIds\r\n        .map(wrapPlayerId)\r\n        .join(\",\")}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Gets authoring metadata about a specific asset. */\r\n  public getAsset = <TAssetType extends keyof AssetKindTypeMap>(\r\n    assetType: TAssetType,\r\n    assetId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\r\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  /** Gets metadata related to a concrete version of a specified asset. */\r\n  public getSpecificAssetVersion = <TAssetType extends keyof AssetKindTypeMap>(\r\n    assetType: TAssetType,\r\n    assetId: string,\r\n    versionId: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) =>\r\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\r\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}/versions/${versionId}`,\r\n      {\r\n        ...init,\r\n        headers: {\r\n          Origin: \"https://www.halowaypoint.com\",\r\n        },\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  // Don't be fooled, the \"profile\" version of this endpoint is worthless\r\n  public getCurrentUser = (\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<{ xuid: string; notificationsReadDate: string }> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.CommsOrigin}.${HaloCoreEndpoints.ServiceDomain}/users/me`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getMatchesPrivacy = (\r\n    playerXuid: string,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<MatchesPrivacy> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public updateMatchesPrivacy = (\r\n    playerXuid: string,\r\n    matchesPrivacy: MatchesPrivacy,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<MatchesPrivacy> => {\r\n    const headers = new Headers(init?.headers);\r\n    headers.set(\"Content-Type\", \"application/json\");\r\n    return this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\r\n      {\r\n        ...init,\r\n        method: \"put\",\r\n        headers,\r\n        body: JSON.stringify({ matchesPrivacy }),\r\n      }\r\n    );\r\n  };\r\n\r\n  public getProgressionFile = <TFileType extends ProgressionFileType>(\r\n    filename: `${TFileType}/${string}.json`,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<ProgressionFileTypeMap[TFileType]> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Progression/file/${filename}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getMedalsMetadataFile = (\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<MedalsMetadataFile> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Waypoint/file/medals/metadata.json`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getBanSummary = (\r\n    xuids: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<BanSummary> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.BanProcessorOrigin}.${\r\n        HaloCoreEndpoints.ServiceDomain\r\n      }/hi/bansummary?targets={${xuids.map(wrapPlayerId).join(\",\")}}`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n\r\n  public getSeasonCalendar = (\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ): Promise<SeasonCalendarContainer> =>\r\n    this.executeJsonRequest(\r\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/progression/file/calendars/seasons/seasoncalendar.json`,\r\n      {\r\n        ...init,\r\n        method: \"get\",\r\n      }\r\n    );\r\n}\r\n","import { TokenPersister } from \".\";\r\n\r\nconst tokens = new Map<string, any>();\r\n\r\nexport const inMemoryTokenPersister: TokenPersister = {\r\n  load: (tokenName) => {\r\n    return tokens.get(tokenName);\r\n  },\r\n  save: (tokenName, token) => {\r\n    tokens.set(tokenName, token);\r\n  },\r\n  clear: (tokenName) => {\r\n    tokens.delete(tokenName);\r\n  },\r\n};\r\n","import {\r\n  RelyingParty,\r\n  XboxAuthenticationClient,\r\n} from \"../../authentication/xbox-authentication-client\";\r\nimport { TokenPersister } from \"../token-persisters\";\r\nimport { HaloAuthenticationClient } from \"../../authentication/halo-authentication-client\";\r\nimport { SpartanTokenProvider } from \"./spartan-token-providers\";\r\nimport { inMemoryTokenPersister } from \"../token-persisters/in-memory-token-persister\";\r\nimport { XboxTokenProvider } from \"./xbox-token-provider\";\r\nimport type { FetchFunction } from \"../../util/fetch-function\";\r\n\r\n/**\r\n * A SpartanTokenProvider that fetches both the Xbox and Halo tokens in the same\r\n * process. This is useful for applications that do not need to contend with\r\n * CORS restrictions.\r\n */\r\nexport class AutoTokenProvider\r\n  implements SpartanTokenProvider, XboxTokenProvider\r\n{\r\n  public readonly getSpartanToken: () => Promise<string>;\r\n  public readonly clearSpartanToken: () => Promise<void>;\r\n  public readonly getXboxLiveV3Token: () => Promise<string>;\r\n  public readonly clearXboxLiveV3Token: () => Promise<void>;\r\n\r\n  constructor(\r\n    getOauth2AccessToken: () => Promise<string>,\r\n    tokenPersister?: TokenPersister | Promise<TokenPersister>,\r\n    fetchFn?: FetchFunction\r\n  ) {\r\n    let tokenPeristerOrPromise: TokenPersister | Promise<TokenPersister>;\r\n    if (tokenPersister) {\r\n      tokenPeristerOrPromise = tokenPersister;\r\n    } else {\r\n      tokenPeristerOrPromise = inMemoryTokenPersister;\r\n    }\r\n    const xboxAuthClient = new XboxAuthenticationClient(\r\n      tokenPersister,\r\n      fetchFn\r\n    );\r\n    const haloAuthClient = new HaloAuthenticationClient(\r\n      async () => {\r\n        const xstsTicket = await xboxAuthClient.getXstsTicket(\r\n          getOauth2AccessToken,\r\n          RelyingParty.Halo\r\n        );\r\n        return xstsTicket.Token;\r\n      },\r\n      async () => {\r\n        await xboxAuthClient.clearXstsTicket(RelyingParty.Halo);\r\n      },\r\n      async () => {\r\n        const tokenPersister = await tokenPeristerOrPromise;\r\n        return await tokenPersister.load(\"halo.authToken\");\r\n      },\r\n      async (token) => {\r\n        const tokenPersister = await tokenPeristerOrPromise;\r\n        await tokenPersister.save(\"halo.authToken\", token);\r\n      },\r\n      async () => {\r\n        const tokenPersister = await tokenPeristerOrPromise;\r\n        await tokenPersister.clear(\"halo.authToken\");\r\n      },\r\n      fetchFn\r\n    );\r\n\r\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\r\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\r\n    this.getXboxLiveV3Token = async () => {\r\n      const xstsTicket = await xboxAuthClient.getXstsTicket(\r\n        getOauth2AccessToken,\r\n        RelyingParty.Xbox\r\n      );\r\n      return xboxAuthClient.getXboxLiveV3Token(xstsTicket);\r\n    };\r\n    this.clearXboxLiveV3Token = () =>\r\n      xboxAuthClient.clearXstsTicket(RelyingParty.Xbox);\r\n  }\r\n}\r\n","import { TokenPersister } from \"../../token-persisters\";\r\nimport { HaloAuthenticationClient } from \"../../../authentication/halo-authentication-client\";\r\nimport { SpartanTokenProvider } from \".\";\r\nimport { inMemoryTokenPersister } from \"../../token-persisters/in-memory-token-persister\";\r\n\r\n/**\r\n * A SpartanTokenProvider that fetches uses a pre-fetched XSTS ticket token.\r\n * Since requests to the Halo API are subject to CORS restrictions a\r\n * HaloAuthenticationClient can be instantitated with a pre-fetched XSTS ticket\r\n * and run on a server (such as one provided by the user).\r\n */\r\nexport class StaticXstsTicketTokenSpartanTokenProvider\r\n  implements SpartanTokenProvider\r\n{\r\n  public readonly getSpartanToken: () => Promise<string>;\r\n  public readonly clearSpartanToken: () => Promise<void>;\r\n\r\n  constructor(\r\n    xstsTicketToken: string,\r\n    tokenPersister?: TokenPersister | Promise<TokenPersister>\r\n  ) {\r\n    let actualTokenPersister: TokenPersister | Promise<TokenPersister>;\r\n    if (tokenPersister) {\r\n      actualTokenPersister = tokenPersister;\r\n    } else {\r\n      actualTokenPersister = inMemoryTokenPersister;\r\n    }\r\n\r\n    const haloAuthClient = new HaloAuthenticationClient(\r\n      () => xstsTicketToken,\r\n      async () => {\r\n        console.warn(\r\n          \"StaticXstsTicketTokenSpartanTokenProvider does not clearing xstsTickets\"\r\n        );\r\n      },\r\n      async () =>\r\n        (await (await actualTokenPersister).load(\"halo.authToken\")) ?? null,\r\n      async (token) => {\r\n        await (await actualTokenPersister).save(\"halo.authToken\", token);\r\n      },\r\n      async () => {\r\n        await (await actualTokenPersister).clear(\"halo.authToken\");\r\n      }\r\n    );\r\n\r\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\r\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\r\n  }\r\n}\r\n","import { RequestError } from \"../util/request-error\";\r\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\r\nimport { XboxTokenProvider } from \"./token-providers/xbox-token-provider\";\r\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\r\nimport { unwrapPlayerId } from \"../util/xuid\";\r\n\r\nexport class XboxClient {\r\n  constructor(\r\n    private readonly xboxTokenProvider: XboxTokenProvider,\r\n    private readonly fetchFn: FetchFunction = defaultFetch\r\n  ) {}\r\n\r\n  private async executeRequest<T>(url: string, init: RequestInit): Promise<T> {\r\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\r\n      async ({ handled }) => {\r\n        if (handled) {\r\n          await this.xboxTokenProvider.clearXboxLiveV3Token();\r\n        }\r\n      }\r\n    );\r\n    try {\r\n      return await unauthorizedRetryPolicy.execute(async () => {\r\n        const headers = new Headers(init.headers);\r\n        if (!headers.has(\"Accept\")) {\r\n          headers.set(\"Accept\", \"application/json\");\r\n        }\r\n        if (!headers.has(\"Authorization\")) {\r\n          headers.set(\r\n            \"Authorization\",\r\n            await this.xboxTokenProvider.getXboxLiveV3Token()\r\n          );\r\n        }\r\n        if (!headers.has(\"x-xbl-contract-version\")) {\r\n          headers.set(\"x-xbl-contract-version\", \"3\");\r\n        }\r\n        const response = await this.fetchFn(url, {\r\n          ...init,\r\n          headers,\r\n        });\r\n\r\n        if (response.status >= 200 && response.status < 300) {\r\n          return (await response.json()) as T;\r\n        } else {\r\n          throw new RequestError(url, response);\r\n        }\r\n      });\r\n    } finally {\r\n      failureHandler.dispose();\r\n    }\r\n  }\r\n\r\n  public async searchUsers(\r\n    query: string,\r\n    maxItems: number = 5,\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) {\r\n    const { people } = await this.executeRequest<{\r\n      people: [\r\n        {\r\n          xuid: string;\r\n          gamertag: string;\r\n          displayPicRaw: string;\r\n        }\r\n      ];\r\n    }>(\r\n      `https://peoplehub.xboxlive.com/users/me/people/search?q=${encodeURIComponent(\r\n        query\r\n      )}&maxItems=${maxItems}`,\r\n      { ...init, method: \"GET\" }\r\n    );\r\n    return people;\r\n  }\r\n\r\n  public async recentPlayers(init?: Omit<RequestInit, \"body\" | \"method\">) {\r\n    return await this.executeRequest<unknown>(\r\n      \"https://peoplehub.xboxlive.com/users/me/people/recentplayers\",\r\n      { ...init, method: \"GET\" }\r\n    );\r\n  }\r\n\r\n  public async getProfiles(\r\n    xuids: string[],\r\n    settings: string[],\r\n    init?: Omit<RequestInit, \"body\" | \"method\">\r\n  ) {\r\n    init?.headers;\r\n    return await this.executeRequest<{\r\n      profileUsers: {\r\n        id: string;\r\n        settings: { id: string; value: string }[];\r\n      }[];\r\n    }>(\"https://profile.xboxlive.com/users/batch/profile/settings\", {\r\n      ...init,\r\n      headers: {\r\n        ...init?.headers,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        userIds: xuids.map(unwrapPlayerId),\r\n        settings,\r\n      }),\r\n    });\r\n  }\r\n}\r\n","export enum GameVariantCategory {\r\n  MultiplayerSlayer = 6,\r\n  MultiplayerAttrition = 7,\r\n  MultiplayerElimination = 8,\r\n  MultiplayerFiesta = 9,\r\n  MultiplayerStrongholds = 11,\r\n  MultiplayerKingOfTheHill = 12,\r\n  MultiplayerTotalControl = 14,\r\n  MultiplayerCtf = 15,\r\n  MultiplayerExtraction = 17,\r\n  MultiplayerOddball = 18,\r\n  MultiplayerStockpile = 19,\r\n  MultiplayerInfection = 22,\r\n  MultiplayerVIP = 23,\r\n  MultiplayerEscalation = 24,\r\n  MultiplayerGrifball = 25,\r\n  MultiplayerLandGrab = 39,\r\n  MultiplayerMinigame = 41,\r\n  MultiplayerFirefight = 42,\r\n}\r\n","export enum MatchOutcome {\r\n  Tie = 1,\r\n  Win = 2,\r\n  Loss = 3,\r\n  DidNotFinish = 4,\r\n}\r\n","export enum Privacy {\r\n  Show = 1,\r\n  Hide = 2,\r\n}\r\n\r\nexport interface MatchesPrivacy {\r\n  MatchmadeGames: Privacy;\r\n  OtherGames: Privacy;\r\n}\r\n","export enum PlaylistExperience {\r\n  Arena = 2,\r\n  Social = 3,\r\n  Featured = 5,\r\n}\r\n","import { ApiFormattedDate } from \"./api-formatted-date\";\r\n\r\nexport enum ProgressionFileType {\r\n  Seasons = \"Seasons\",\r\n  Calendars = \"Calendars\",\r\n  \"Csr/Seasons\" = \"Csr/Seasons\",\r\n}\r\n\r\nexport type ProgressionFileTypeMap = {\r\n  Calendars: SeasonCalendarProgressionFile;\r\n  Seasons: SeasonProgressionFile;\r\n  [\"Csr/Seasons\"]: CsrSeasonCalendarProgressionFile;\r\n};\r\n\r\nexport interface SeasonCalendarProgressionFile {\r\n  Seasons: {\r\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\r\n    OperationTrackPath: `RewardTracks/Operations/${string}.json`;\r\n    SeasonMetadata: `Seasons/${string}.json`;\r\n    StartDate: ApiFormattedDate;\r\n    EndDate: ApiFormattedDate;\r\n  }[];\r\n  Events: {\r\n    RewardTrackPath: `RewardTracks/Events/Rituals/${string}.json`;\r\n    StartDate: ApiFormattedDate;\r\n    EndDate: ApiFormattedDate;\r\n  }[];\r\n  CareerRank: { RewardTrackPath: `RewardTracks/CareerRanks/${string}.json` };\r\n}\r\n\r\nexport interface CsrSeasonCalendarProgressionFile {\r\n  Seasons: {\r\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\r\n    StartDate: ApiFormattedDate;\r\n    EndDate: ApiFormattedDate;\r\n  }[];\r\n}\r\n\r\nexport interface SeasonProgressionFile {\r\n  DateRange: string;\r\n  Name: string;\r\n  Logo: string;\r\n  Number: number;\r\n  Description: string;\r\n  SummaryBackgroundPath: string;\r\n  BattlePassSeasonUpsellBackgroundImage: string;\r\n  ChallengesBackgroundPath: string;\r\n  BattlePassLogoImage: string;\r\n  SeasonLogoImage: string;\r\n  RitualLogoImage: string;\r\n  StorefrontBackgroundImage: string;\r\n  CardBackgroundImage: string;\r\n  ProgressionBackgroundImage: string;\r\n}\r\n"]}
\ No newline at end of file
+{"version":3,"sources":["../src/util/resolvable-promise.ts","../src/util/date-time.ts","../src/util/expiry-token-cache.ts","../src/util/fetch-function.ts","../src/util/global-contants.ts","../src/util/request-error.ts","../src/core/request-policy.ts","../src/endpoints/halo-core-endpoints.ts","../src/authentication/halo-authentication-client.ts","../src/util/keyed-expiry-token-cache.ts","../src/authentication/xbox-authentication-client.ts","../src/models/halo-infinite/asset-kind.ts","../src/models/halo-infinite/match-type.ts","../src/util/xuid.ts","../src/core/halo-infinite-client.ts","../src/core/token-persisters/in-memory-token-persister.ts","../src/core/token-providers/auto-token-provider.ts","../src/core/token-providers/spartan-token-providers/static-xsts-ticket-token-spartan-token-provider.ts","../src/core/xbox-client.ts","../src/models/halo-infinite/game-variant-category.ts","../src/models/halo-infinite/match-outcome.ts","../src/models/halo-infinite/matches-privacy.ts","../src/models/halo-infinite/playlist-experience.ts","../src/models/halo-infinite/progression-file.ts"],"names":["DateTime","newToken","RelyingParty","AssetKind","MatchType","tokenPersister","GameVariantCategory","MatchOutcome","Privacy","PlaylistExperience","ProgressionFileType"],"mappings":"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","file":"index.js","sourcesContent":["export class ResolvablePromise<TReturn> extends Promise<TReturn> {\n  isCompleted = false;\n  readonly resolve: (value: TReturn | PromiseLike<TReturn>) => void;\n  readonly reject: (reason?: unknown) => void;\n  constructor() {\n    let resolve!: (value: TReturn | PromiseLike<TReturn>) => void;\n    let reject!: (reason?: unknown) => void;\n    super((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    this.resolve = (v) => {\n      this.isCompleted = true;\n      return resolve(v);\n    };\n    this.reject = (r) => {\n      this.isCompleted = true;\n      return reject(r);\n    };\n  }\n\n  // you can also use Symbol.species in order to\n  // return a Promise for then/catch/finally\n  static get [Symbol.species]() {\n    return Promise;\n  }\n\n  // Promise overrides his Symbol.toStringTag\n  get [Symbol.toStringTag]() {\n    return \"ResolvablePromise\";\n  }\n}\n","import { DateTime } from \"luxon\";\n\nexport function coalesceDateTime(maybeDateTime: unknown) {\n  if (DateTime.isDateTime(maybeDateTime)) {\n    return maybeDateTime;\n  } else if (maybeDateTime instanceof Date) {\n    return DateTime.fromJSDate(maybeDateTime);\n  } else if (typeof maybeDateTime === \"string\") {\n    return DateTime.fromISO(maybeDateTime);\n  }\n  return undefined;\n}\n","import { DateTime } from \"luxon\";\nimport { ResolvablePromise } from \"./resolvable-promise\";\nimport { coalesceDateTime } from \"./date-time\";\n\nexport class ExpiryTokenCache<\n  TToken extends { expiresAt: DateTime },\n  TArgs extends any[]\n> {\n  private tokenFetchPromise: ResolvablePromise<TToken> | undefined = undefined;\n\n  constructor(\n    private readonly generateNewToken: (...args: TArgs) => Promise<TToken>,\n    private readonly existingTokenFetcher: () => Promise<\n      (Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null\n    >\n  ) {}\n\n  // TODO: Compare args and separate cache entries based on input\n  async getToken(...args: TArgs): Promise<TToken> {\n    if (this.tokenFetchPromise) {\n      // Someone either already has a token or is in the process of getting one\n      // Wait for them to finish, then check for validity\n      const currentToken = await this.tokenFetchPromise;\n\n      if (currentToken.expiresAt > DateTime.now().minus({ minute: 1 })) {\n        // Current token is valid, return it\n        return currentToken;\n      } else {\n        // Current token expired, start a new promise\n        const newPromise = new ResolvablePromise<TToken>();\n        this.tokenFetchPromise = newPromise;\n\n        try {\n          const newToken = await this.generateNewToken(...args);\n          newPromise.resolve(newToken);\n          return newToken;\n        } catch (e) {\n          newPromise.reject(e);\n          if (this.tokenFetchPromise === newPromise) {\n            this.tokenFetchPromise = undefined;\n          }\n          throw e;\n        }\n      }\n    } else {\n      // No one has a token, start a new promise\n      const newPromise = new ResolvablePromise<TToken>();\n      this.tokenFetchPromise = newPromise;\n\n      try {\n        const existingToken = await this.getExistingToken();\n\n        if (existingToken?.expiresAt) {\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\n          if (expiresAt && expiresAt > DateTime.now()) {\n            const newToken = { ...existingToken, expiresAt } as TToken;\n            newPromise.resolve(newToken);\n            return newToken;\n          }\n        }\n\n        const newToken = await this.generateNewToken(...args);\n        newPromise.resolve(newToken);\n        return newToken;\n      } catch (e) {\n        newPromise.reject(e);\n        if (this.tokenFetchPromise === newPromise) {\n          this.tokenFetchPromise = undefined;\n        }\n        throw e;\n      }\n    }\n  }\n\n  async getExistingToken() {\n    const existingToken = await this.existingTokenFetcher();\n\n    if (existingToken?.expiresAt) {\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\n      if (expiresAt && expiresAt > DateTime.now()) {\n        return { ...existingToken, expiresAt } as TToken;\n      }\n    }\n\n    return null;\n  }\n\n  clearToken() {\n    this.tokenFetchPromise = undefined;\n  }\n}\n","export type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit\n) => Promise<Response>;\n\nexport const defaultFetch = async (\n  input: RequestInfo | URL,\n  init?: RequestInit\n): Promise<Response> => fetch(input, init);\n","export const GlobalConstants = {\n  HALO_WAYPOINT_USER_AGENT:\n    \"HaloWaypoint/2021112313511900 CFNetwork/1327.0.4 Darwin/21.2.0\",\n  HALO_PC_USER_AGENT: \"SHIVA-2043073184/6.10021.18539.0 (release; PC)\",\n  DEFAULT_AUTH_SCOPES: [\"Xboxlive.signin\", \"Xboxlive.offline_access\"],\n};\n","export class RequestError extends Error {\n  public readonly url: string;\n  constructor(\n    public readonly request: RequestInfo | URL,\n    public readonly response: Response\n  ) {\n    super(\n      `${response.status} from ${\n        typeof request === \"object\" && \"url\" in request\n          ? request.url\n          : typeof request === \"string\"\n          ? request\n          : request.href\n      }`\n    );\n    this.url =\n      typeof request === \"object\" && \"url\" in request\n        ? request.url\n        : typeof request === \"string\"\n        ? request\n        : request.href;\n    this.name = \"RequestError\";\n  }\n}\n","import { handleType, retry } from \"cockatiel\";\nimport { RequestError } from \"../util/request-error\";\n\nexport const unauthorizedRetryPolicy = retry(\n  handleType(RequestError, (error) => error.response.status === 401),\n  { maxAttempts: 2 }\n);\n","export const HaloCoreEndpoints = {\n  /** Skill origin */\n  SkillOrigin: \"skill\",\n  /** Profile origin */\n  Profile: \"profile\",\n  /** Stats origin */\n  StatsOrigin: \"halostats\",\n  /** Game CMS origin */\n  GameCmsOrigin: \"gamecms-hacs\",\n  /** Discovery origin */\n  DiscoveryOrigin: \"discovery-infiniteugc\",\n\n  CommsOrigin: \"wpcomms\",\n  BanProcessorOrigin: \"banprocessor\",\n  SettingsOrigin: \"settings\",\n\n  /** Service domain */\n  ServiceDomain: \"svc.halowaypoint.com:443\",\n};\n","import { DateTime } from \"luxon\";\nimport type { SpartanToken } from \"../models/spartan-token\";\nimport type { SpartanTokenRequest } from \"../models/spartan-token-request\";\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { GlobalConstants } from \"../util/global-contants\";\nimport { RequestError } from \"../util/request-error\";\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\n\nexport interface Token {\n  token: string;\n  expiresAt: DateTime;\n}\n\nexport class HaloAuthenticationClient {\n  private spartanTokenCache = new ExpiryTokenCache(\n    async () => {\n      const failureHandler = unauthorizedRetryPolicy.onFailure(\n        async ({ handled }) => {\n          if (handled) {\n            await this.clearXstsToken();\n          }\n        }\n      );\n      try {\n        return await unauthorizedRetryPolicy.execute(async () => {\n          const xstsToken = await this.fetchXstsToken();\n\n          const tokenRequest: SpartanTokenRequest = {\n            Audience: \"urn:343:s3:services\",\n            MinVersion: \"4\",\n            Proof: [\n              {\n                Token: xstsToken,\n                TokenType: \"Xbox_XSTSv3\",\n              },\n            ],\n          };\n          const url = `https://${HaloCoreEndpoints.SettingsOrigin}.${HaloCoreEndpoints.ServiceDomain}/spartan-token`;\n          const response = await this.fetchFn(url, {\n            method: \"POST\",\n            body: JSON.stringify(tokenRequest),\n            headers: {\n              \"User-Agent\": GlobalConstants.HALO_WAYPOINT_USER_AGENT,\n              \"Content-Type\": \"application/json; charset=utf-8\",\n              Accept: \"application/json, text/plain, */*\",\n            },\n          });\n          if (response.status >= 200 && response.status < 300) {\n            const result_2 = (await response.json()) as SpartanToken;\n\n            const newToken = {\n              token: result_2.SpartanToken,\n              expiresAt: DateTime.fromISO(result_2.ExpiresUtc.ISO8601Date),\n            };\n            await this.saveToken(newToken);\n            return newToken;\n          } else {\n            throw new RequestError(url, response);\n          }\n        });\n      } finally {\n        failureHandler.dispose();\n      }\n    },\n    () => this.loadToken()\n  );\n\n  constructor(\n    private readonly fetchXstsToken: () => Promise<string> | string,\n    private readonly clearXstsToken: () => Promise<void>,\n    private readonly loadToken: () => Promise<{\n      token: string;\n      expiresAt: unknown;\n    } | null>,\n    private readonly saveToken: (token: Token) => Promise<void>,\n    private readonly clearToken: () => Promise<void>,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  public async getSpartanToken() {\n    const { token } = await this.spartanTokenCache.getToken();\n    return token;\n  }\n\n  public async clearSpartanToken() {\n    // Clear from memory\n    this.spartanTokenCache.clearToken();\n    // Clear from storage\n    await this.clearToken();\n  }\n}\n","import { DateTime } from \"luxon\";\nimport { ResolvablePromise } from \"./resolvable-promise\";\nimport { coalesceDateTime } from \"./date-time\";\n\nexport class KeyedExpiryTokenCache<\n  TToken extends { expiresAt: DateTime },\n  TKey extends string,\n  TArgs extends any[]\n> {\n  private readonly tokenFetchPromiseMap = new Map<\n    TKey,\n    ResolvablePromise<TToken>\n  >();\n\n  constructor(\n    private readonly generateNewToken: (\n      key: TKey,\n      ...args: TArgs\n    ) => Promise<TToken>,\n    private readonly existingTokenFetcher: (\n      key: TKey\n    ) => Promise<(Omit<TToken, \"expiresAt\"> & { expiresAt: unknown }) | null>\n  ) {}\n\n  async getToken(key: TKey, ...args: TArgs): Promise<TToken> {\n    let tokenFetchPromise = this.tokenFetchPromiseMap.get(key);\n    if (tokenFetchPromise) {\n      // Someone either already has a token or is in the process of getting one\n      // Wait for them to finish, then check for validity\n      const currentToken = await tokenFetchPromise;\n\n      if (currentToken.expiresAt > DateTime.now()) {\n        // Current token is valid, return it\n        return currentToken;\n      } else {\n        // Current token expired, start a new promise\n        tokenFetchPromise = new ResolvablePromise<TToken>();\n        this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\n\n        try {\n          const newToken = await this.generateNewToken(key, ...args);\n          tokenFetchPromise.resolve(newToken);\n          return newToken;\n        } catch (e) {\n          tokenFetchPromise.reject(e);\n          tokenFetchPromise = undefined;\n          throw e;\n        }\n      }\n    } else {\n      // No one has a token, start a new promise\n      tokenFetchPromise = new ResolvablePromise<TToken>();\n      this.tokenFetchPromiseMap.set(key, tokenFetchPromise);\n\n      try {\n        const existingToken = await this.getExistingToken(key);\n\n        if (existingToken?.expiresAt) {\n          const expiresAt = coalesceDateTime(existingToken.expiresAt);\n          if (expiresAt && expiresAt > DateTime.now().minus({ minute: 1 })) {\n            const newToken = { ...existingToken, expiresAt } as TToken;\n            tokenFetchPromise.resolve(newToken);\n            return newToken;\n          }\n        }\n\n        const newToken = await this.generateNewToken(key, ...args);\n        tokenFetchPromise.resolve(newToken);\n        return newToken;\n      } catch (e) {\n        tokenFetchPromise.reject(e);\n        tokenFetchPromise = undefined;\n        throw e;\n      }\n    }\n  }\n\n  async getExistingToken(key: TKey) {\n    const existingToken = await this.existingTokenFetcher(key);\n\n    if (existingToken?.expiresAt) {\n      const expiresAt = coalesceDateTime(existingToken.expiresAt);\n      if (expiresAt && expiresAt > DateTime.now()) {\n        return { ...existingToken, expiresAt } as TToken;\n      }\n    }\n\n    return null;\n  }\n\n  clearToken(key: TKey) {\n    this.tokenFetchPromiseMap.delete(key);\n  }\n}\n","import { DateTime } from \"luxon\";\nimport { TokenPersister } from \"../core/token-persisters\";\nimport { XboxTicket } from \"../models/xbox-ticket\";\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\nimport { ExpiryTokenCache } from \"../util/expiry-token-cache\";\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { RequestError } from \"../util/request-error\";\nimport { unauthorizedRetryPolicy } from \"../core/request-policy\";\n\nexport enum RelyingParty {\n  Xbox = \"http://xboxlive.com\",\n  Halo = \"https://prod.xsts.halowaypoint.com/\",\n}\n\nexport interface XboxAuthenticationToken {\n  token: string;\n  expiresAt: DateTime;\n  refreshToken: string;\n}\n\nexport class XboxAuthenticationClient {\n  private userTokenCache = new ExpiryTokenCache(\n    async (accessToken: string) => {\n      const url = \"https://user.auth.xboxlive.com/user/authenticate\";\n      const response = await this.fetchFn(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"x-xbl-contract-version\": \"1\",\n        },\n        body: JSON.stringify({\n          RelyingParty: \"http://auth.xboxlive.com\",\n          TokenType: \"JWT\",\n          Properties: {\n            AuthMethod: \"RPS\",\n            SiteName: \"user.auth.xboxlive.com\",\n            RpsTicket: `d=${accessToken}`,\n          },\n        }),\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        const result = (await response.json()) as XboxTicket;\n\n        const token = {\n          ...result,\n          expiresAt: DateTime.fromISO(result.NotAfter),\n        };\n        await (\n          await this.tokenPersisterOrPromise\n        )?.save(\"xbox.userToken\", token);\n        return token;\n      } else {\n        throw new RequestError(url, response);\n      }\n    },\n    async () => {\n      const tokenPersister = await this.tokenPersisterOrPromise;\n      return (\n        (await tokenPersister?.load<XboxTicket & { expiresAt: unknown }>(\n          \"xbox.userToken\"\n        )) ?? null\n      );\n    }\n  );\n  private xstsTicketCache = new KeyedExpiryTokenCache(\n    async (relyingParty: RelyingParty, userToken: string) => {\n      const url = \"https://xsts.auth.xboxlive.com/xsts/authorize\";\n      const response = await this.fetchFn(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"x-xbl-contract-version\": \"1\",\n        },\n        body: JSON.stringify({\n          RelyingParty: relyingParty,\n          TokenType: \"JWT\",\n          Properties: {\n            SandboxId: \"RETAIL\",\n            UserTokens: [userToken],\n          },\n        }),\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        const result = (await response.json()) as XboxTicket;\n\n        const token = {\n          ...result,\n          expiresAt: DateTime.fromISO(result.NotAfter),\n        };\n        await (\n          await this.tokenPersisterOrPromise\n        )?.save(\"xbox.xstsTicket.\" + relyingParty, token);\n        return token;\n      } else {\n        throw new RequestError(url, response);\n      }\n    },\n    async (relyingParty) =>\n      (await (\n        await this.tokenPersisterOrPromise\n      )?.load<XboxTicket & { expiresAt: unknown }>(\n        \"xbox.xstsTicket.\" + relyingParty\n      )) ?? null\n  );\n\n  constructor(\n    private readonly tokenPersisterOrPromise?:\n      | TokenPersister\n      | Promise<TokenPersister>,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  public async getXstsTicket(\n    getOauth2AccessToken: () => Promise<string>,\n    relyingParty: RelyingParty\n  ) {\n    let xstsTicket = await this.xstsTicketCache.getExistingToken(relyingParty);\n    if (!xstsTicket) {\n      let userToken = await this.userTokenCache.getExistingToken();\n      const xstsTicketFailureHandler = unauthorizedRetryPolicy.onFailure(\n        async ({ handled }) => {\n          if (handled) {\n            // Clear from memory\n            this.userTokenCache.clearToken();\n            // Clear from storage\n            await (await this.tokenPersisterOrPromise)?.clear(\"xbox.userToken\");\n            userToken = null;\n          }\n        }\n      );\n      xstsTicket = await unauthorizedRetryPolicy\n        .execute(async () => {\n          if (!userToken) {\n            // Ouath2 token depends on nothing, so we can fetch it without\n            // worrying if it is expired.\n            const oauthToken = await getOauth2AccessToken();\n            userToken = await this.userTokenCache.getToken(oauthToken);\n          }\n          return this.xstsTicketCache.getToken(relyingParty, userToken.Token);\n        })\n        .finally(() => xstsTicketFailureHandler.dispose());\n    }\n    return xstsTicket;\n  }\n\n  public clearXstsTicket = async (relyingParty: RelyingParty) => {\n    // Clear from memory\n    this.xstsTicketCache.clearToken(relyingParty);\n    // Clear from storage\n    (await this.tokenPersisterOrPromise)?.clear(\n      \"xbox.xstsTicket.\" + relyingParty\n    );\n  };\n\n  public getXboxLiveV3Token = (xboxTicket: XboxTicket) =>\n    `XBL3.0 x=${xboxTicket.DisplayClaims.xui[0].uhs};${xboxTicket.Token}`;\n}\n","export enum AssetKind {\n  Film,\n  Map,\n  Playlist,\n  Prefab,\n  TestAsset,\n  UgcGameVariant,\n  MapModePair,\n  Project,\n  Manifest,\n  EngineGameVariant,\n}\n","export enum MatchType {\n  All = 0,\n  Matchmaking = 1,\n  Custom = 2,\n  Local = 3,\n}\n","export function wrapPlayerId(playerId: string) {\n  if (/^\\w+\\(\\d+\\)/.test(playerId)) {\n    return playerId;\n  } else {\n    // Assume xuid\n    return `xuid(${playerId})`;\n  }\n}\n\nexport function unwrapPlayerId(playerId: string) {\n  const match = /^\\w+\\((\\d+)\\)$/.exec(playerId);\n  if (match) {\n    return match[1];\n  } else {\n    return playerId;\n  }\n}\n","import { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { HaloCoreEndpoints } from \"../endpoints/halo-core-endpoints\";\nimport {\n  MapAsset,\n  MapModePairAsset,\n  PlaylistAsset,\n  UgcGameVariantAsset,\n} from \"../models/halo-infinite/asset\";\nimport { AssetKind } from \"../models/halo-infinite/asset-kind\";\nimport { MatchSkill } from \"../models/halo-infinite/match-skill\";\nimport { MatchStats } from \"../models/halo-infinite/match-stats\";\nimport { MatchType } from \"../models/halo-infinite/match-type\";\nimport { PlayerMatchHistory } from \"../models/halo-infinite/player-match-history\";\nimport { Playlist } from \"../models/halo-infinite/playlist\";\nimport { PlaylistCsrContainer } from \"../models/halo-infinite/playlist-csr-container\";\nimport { ServiceRecord } from \"../models/halo-infinite/service-record\";\nimport { UserInfo } from \"../models/halo-infinite/user-info\";\nimport { GlobalConstants } from \"../util/global-contants\";\nimport { SpartanTokenProvider } from \"./token-providers/spartan-token-providers\";\nimport { RequestError } from \"../util/request-error\";\nimport { MatchesPrivacy } from \"../models/halo-infinite/matches-privacy\";\nimport { MedalsMetadataFile } from \"../models/halo-infinite/medals-metadata-file\";\nimport {\n  ProgressionFileType,\n  ProgressionFileTypeMap,\n} from \"../models/halo-infinite/progression-file\";\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\nimport { BanSummary } from \"../models/halo-infinite/ban-summary\";\nimport { KeyedExpiryTokenCache } from \"../util/keyed-expiry-token-cache\";\nimport { DateTime } from \"luxon\";\nimport { wrapPlayerId, unwrapPlayerId } from \"../util/xuid\";\nimport { SeasonCalendarContainer } from \"../models/halo-infinite/season\";\n\nexport interface ResultContainer<TValue> {\n  Id: string;\n  ResultCode: 0 | 1;\n  Result: TValue;\n}\n\nexport interface ResultsContainer<TValue> {\n  Value: ResultContainer<TValue>[];\n}\n\ninterface PaginationContainer<TValue> {\n  Start: number;\n  Count: number;\n  ResultCount: number;\n  Results: TValue[];\n}\n\nexport type AssetKindTypeMap = {\n  [AssetKind.Map]: MapAsset;\n  [AssetKind.UgcGameVariant]: UgcGameVariantAsset;\n  [AssetKind.Playlist]: PlaylistAsset;\n  [AssetKind.MapModePair]: MapModePairAsset;\n};\n\nconst assetKindUrlMap = {\n  [AssetKind.Map]: \"Maps\" as const,\n  [AssetKind.UgcGameVariant]: \"UgcGameVariants\" as const,\n  [AssetKind.Playlist]: \"Playlists\" as const,\n  [AssetKind.MapModePair]: \"MapModePairs\" as const,\n} satisfies {\n  [key in keyof AssetKindTypeMap]: string;\n};\nexport class HaloInfiniteClient {\n  private clearanceMap = new Map<\n    string,\n    {\n      FlightConfigurationId: string;\n      expiresAt: DateTime;\n    }\n  >();\n  private clearanceCache = new KeyedExpiryTokenCache(\n    async () => {\n      const { xuid } = await this.getCurrentUser();\n      const response = await this.executeRequest(\n        `https://${HaloCoreEndpoints.SettingsOrigin}.${\n          HaloCoreEndpoints.ServiceDomain\n        }/oban/flight-configurations/titles/hi/audiences/retail/players/${wrapPlayerId(\n          xuid\n        )}/active`,\n        { method: \"get\" }\n      );\n      const {\n        FlightConfigurationId,\n      }: {\n        FlightConfigurationId: string;\n      } = await response.json();\n      const expiresHeader = response.headers.get(\"expires\");\n      return {\n        FlightConfigurationId,\n        expiresAt: expiresHeader\n          ? DateTime.fromHTTP(expiresHeader)\n          : DateTime.now().plus({ seconds: 5 }),\n      };\n    },\n    async (spartanToken) => this.clearanceMap.get(spartanToken) ?? null\n  );\n\n  constructor(\n    private readonly spartanTokenProvider: SpartanTokenProvider,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  private async executeRequest(url: string, init: RequestInit) {\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\n      async ({ handled }) => {\n        if (handled) {\n          await this.spartanTokenProvider.clearSpartanToken();\n        }\n      }\n    );\n    try {\n      return await unauthorizedRetryPolicy.execute(async () => {\n        const headers = new Headers(init.headers);\n        if (!headers.has(\"User-Agent\")) {\n          headers.set(\"User-Agent\", GlobalConstants.HALO_PC_USER_AGENT);\n        }\n        if (!headers.has(\"Accept\")) {\n          headers.set(\"Accept\", \"application/json\");\n        }\n        headers.set(\n          \"x-343-authorization-spartan\",\n          await this.spartanTokenProvider.getSpartanToken()\n        );\n\n        const response = await this.fetchFn(url, {\n          ...init,\n          headers,\n        });\n\n        if (!response.ok) {\n          throw new RequestError(url, response);\n        }\n\n        return response;\n      });\n    } finally {\n      failureHandler.dispose();\n    }\n  }\n\n  private async executeJsonRequest<T>(url: string, init: RequestInit) {\n    const response = await this.executeRequest(url, init);\n\n    if (response.status >= 200 && response.status < 300) {\n      return (await response.json()) as T;\n    } else {\n      throw new RequestError(url, response);\n    }\n  }\n\n  private async executeResultsRequest<T>(\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\n  ) {\n    let resultsContainer: ResultsContainer<T>;\n    try {\n      resultsContainer = await this.executeJsonRequest<ResultsContainer<T>>(\n        ...args\n      );\n    } catch (e) {\n      if (e instanceof RequestError && e.response.status === 404) {\n        const contentLength = e.response.headers.get(\"Content-Length\");\n        if (contentLength && parseInt(contentLength) > 0) {\n          // 404s if even one of the xuids is invalid\n          resultsContainer = (await e.response.json()) as ResultsContainer<T>;\n        }\n      }\n\n      throw e;\n    }\n    return resultsContainer.Value;\n  }\n\n  private async executePaginationRequest<T>(\n    count: number,\n    start: number,\n    queryParameters: Record<string, string>,\n    ...args: Parameters<HaloInfiniteClient[\"executeJsonRequest\"]>\n  ) {\n    const [url, ...rest] = args;\n    const result = await this.executeJsonRequest<PaginationContainer<T>>(\n      `${url}?${new URLSearchParams({\n        ...queryParameters,\n        count: count.toString(),\n        start: start.toString(),\n      })}`,\n      ...rest\n    );\n\n    return result.Results;\n  }\n\n  /** Gets playlist Competitive Skill Rank (CSR) for a player or a set of players.\n   * @param playlistId - Unique ID for the playlist.\n   * @param playerIds - Array of player xuids.\n   */\n  public getPlaylistCsr = (\n    playlistId: string,\n    playerIds: string[],\n    seasonId?: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    const urlParams = new URLSearchParams({\n      players: playerIds.map(wrapPlayerId).join(\",\"),\n    });\n    if (seasonId) {\n      urlParams.set(\"season\", seasonId);\n    }\n    return this.executeResultsRequest<PlaylistCsrContainer>(\n      `https://${HaloCoreEndpoints.SkillOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/playlist/${playlistId}/csrs?${urlParams}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n  };\n\n  /** Get gamertag info for a player.\n   * @param gamerTag - Gamertag to lookup.\n   */\n  public getUser = (\n    gamerTag: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<UserInfo>(\n      `https://${HaloCoreEndpoints.Profile}.${HaloCoreEndpoints.ServiceDomain}/users/gt(${gamerTag})`,\n\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Get gamertag info for several players.\n   * @param xuids - Xuids to lookup.\n   */\n  public getUsers = (\n    xuids: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    return this.executeJsonRequest<UserInfo[]>(\n      `https://${HaloCoreEndpoints.Profile}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/users?xuids=${xuids.map((x) => unwrapPlayerId(x)).join(\",\")}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n  };\n\n  /** Get service record for a player.\n   * @param gamerTag - Gamertag to lookup.\n   */\n  public getUserServiceRecord = (\n    gamerTagOrWrappedXuid: string,\n    queryParameters?: { seasonId?: string; playlistAssetId?: string },\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<ServiceRecord>(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${gamerTagOrWrappedXuid}/Matchmade/servicerecord?${new URLSearchParams(\n        queryParameters\n      ).toString()}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Get playlist information\n   * @param playlistId - Unique ID for the playlist.\n   */\n  public getPlaylist = async (\n    playlistId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    const clearanceToken = await this.clearanceCache.getToken(\n      await this.spartanTokenProvider.getSpartanToken()\n    );\n    return this.executeJsonRequest<Playlist>(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/multiplayer/file/playlists/assets/${playlistId}.json`,\n      {\n        ...init,\n        method: \"get\",\n        headers: {\n          ...init?.headers,\n          \"343-clearance\": clearanceToken.FlightConfigurationId,\n        },\n      }\n    );\n  };\n\n  public getPlayerMatches = (\n    playerXuid: string,\n    type: MatchType = MatchType.All,\n    count: number = 25,\n    start: number = 0,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) => {\n    let params: Record<string, string> = {};\n    if (type !== MatchType.All) {\n      params.type = type.toString();\n    }\n    return this.executePaginationRequest<PlayerMatchHistory>(\n      count,\n      start,\n      params,\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n  };\n\n  public getMatchStats = (\n    matchId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<MatchStats>(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/matches/${matchId}/stats`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getMatchSkill = async (\n    matchId: string,\n    playerIds: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    await this.executeResultsRequest<MatchSkill>(\n      `https://${HaloCoreEndpoints.SkillOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/matches/${matchId}/skill?players=${playerIds\n        .map(wrapPlayerId)\n        .join(\",\")}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Gets authoring metadata about a specific asset. */\n  public getAsset = <TAssetType extends keyof AssetKindTypeMap>(\n    assetType: TAssetType,\n    assetId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  /** Gets metadata related to a concrete version of a specified asset. */\n  public getSpecificAssetVersion = <TAssetType extends keyof AssetKindTypeMap>(\n    assetType: TAssetType,\n    assetId: string,\n    versionId: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) =>\n    this.executeJsonRequest<AssetKindTypeMap[TAssetType]>(\n      `https://${HaloCoreEndpoints.DiscoveryOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/${assetKindUrlMap[assetType]}/${assetId}/versions/${versionId}`,\n      {\n        ...init,\n        headers: {\n          Origin: \"https://www.halowaypoint.com\",\n        },\n        method: \"get\",\n      }\n    );\n\n  // Don't be fooled, the \"profile\" version of this endpoint is worthless\n  public getCurrentUser = (\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<{ xuid: string; notificationsReadDate: string }> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.CommsOrigin}.${HaloCoreEndpoints.ServiceDomain}/users/me`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getMatchesPrivacy = (\n    playerXuid: string,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<MatchesPrivacy> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public updateMatchesPrivacy = (\n    playerXuid: string,\n    matchesPrivacy: MatchesPrivacy,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<MatchesPrivacy> => {\n    const headers = new Headers(init?.headers);\n    headers.set(\"Content-Type\", \"application/json\");\n    return this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.StatsOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/players/${wrapPlayerId(playerXuid)}/matches-privacy`,\n      {\n        ...init,\n        method: \"put\",\n        headers,\n        body: JSON.stringify({ matchesPrivacy }),\n      }\n    );\n  };\n\n  public getProgressionFile = <TFileType extends ProgressionFileType>(\n    filename: `${TFileType}/${string}.json`,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<ProgressionFileTypeMap[TFileType]> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Progression/file/${filename}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getMedalsMetadataFile = (\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<MedalsMetadataFile> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/Waypoint/file/medals/metadata.json`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getBanSummary = (\n    xuids: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<BanSummary> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.BanProcessorOrigin}.${\n        HaloCoreEndpoints.ServiceDomain\n      }/hi/bansummary?targets={${xuids.map(wrapPlayerId).join(\",\")}}`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n\n  public getSeasonCalendar = (\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ): Promise<SeasonCalendarContainer> =>\n    this.executeJsonRequest(\n      `https://${HaloCoreEndpoints.GameCmsOrigin}.${HaloCoreEndpoints.ServiceDomain}/hi/progression/file/calendars/seasons/seasoncalendar.json`,\n      {\n        ...init,\n        method: \"get\",\n      }\n    );\n}\n","import { TokenPersister } from \".\";\n\nconst tokens = new Map<string, any>();\n\nexport const inMemoryTokenPersister: TokenPersister = {\n  load: (tokenName) => {\n    return tokens.get(tokenName);\n  },\n  save: (tokenName, token) => {\n    tokens.set(tokenName, token);\n  },\n  clear: (tokenName) => {\n    tokens.delete(tokenName);\n  },\n};\n","import {\n  RelyingParty,\n  XboxAuthenticationClient,\n} from \"../../authentication/xbox-authentication-client\";\nimport { TokenPersister } from \"../token-persisters\";\nimport { HaloAuthenticationClient } from \"../../authentication/halo-authentication-client\";\nimport { SpartanTokenProvider } from \"./spartan-token-providers\";\nimport { inMemoryTokenPersister } from \"../token-persisters/in-memory-token-persister\";\nimport { XboxTokenProvider } from \"./xbox-token-provider\";\nimport type { FetchFunction } from \"../../util/fetch-function\";\n\n/**\n * A SpartanTokenProvider that fetches both the Xbox and Halo tokens in the same\n * process. This is useful for applications that do not need to contend with\n * CORS restrictions.\n */\nexport class AutoTokenProvider\n  implements SpartanTokenProvider, XboxTokenProvider\n{\n  public readonly getSpartanToken: () => Promise<string>;\n  public readonly clearSpartanToken: () => Promise<void>;\n  public readonly getXboxLiveV3Token: () => Promise<string>;\n  public readonly clearXboxLiveV3Token: () => Promise<void>;\n\n  constructor(\n    getOauth2AccessToken: () => Promise<string>,\n    tokenPersister?: TokenPersister | Promise<TokenPersister>,\n    fetchFn?: FetchFunction\n  ) {\n    let tokenPeristerOrPromise: TokenPersister | Promise<TokenPersister>;\n    if (tokenPersister) {\n      tokenPeristerOrPromise = tokenPersister;\n    } else {\n      tokenPeristerOrPromise = inMemoryTokenPersister;\n    }\n    const xboxAuthClient = new XboxAuthenticationClient(\n      tokenPersister,\n      fetchFn\n    );\n    const haloAuthClient = new HaloAuthenticationClient(\n      async () => {\n        const xstsTicket = await xboxAuthClient.getXstsTicket(\n          getOauth2AccessToken,\n          RelyingParty.Halo\n        );\n        return xstsTicket.Token;\n      },\n      async () => {\n        await xboxAuthClient.clearXstsTicket(RelyingParty.Halo);\n      },\n      async () => {\n        const tokenPersister = await tokenPeristerOrPromise;\n        return await tokenPersister.load(\"halo.authToken\");\n      },\n      async (token) => {\n        const tokenPersister = await tokenPeristerOrPromise;\n        await tokenPersister.save(\"halo.authToken\", token);\n      },\n      async () => {\n        const tokenPersister = await tokenPeristerOrPromise;\n        await tokenPersister.clear(\"halo.authToken\");\n      },\n      fetchFn\n    );\n\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\n    this.getXboxLiveV3Token = async () => {\n      const xstsTicket = await xboxAuthClient.getXstsTicket(\n        getOauth2AccessToken,\n        RelyingParty.Xbox\n      );\n      return xboxAuthClient.getXboxLiveV3Token(xstsTicket);\n    };\n    this.clearXboxLiveV3Token = () =>\n      xboxAuthClient.clearXstsTicket(RelyingParty.Xbox);\n  }\n}\n","import { TokenPersister } from \"../../token-persisters\";\nimport { HaloAuthenticationClient } from \"../../../authentication/halo-authentication-client\";\nimport { SpartanTokenProvider } from \".\";\nimport { inMemoryTokenPersister } from \"../../token-persisters/in-memory-token-persister\";\n\n/**\n * A SpartanTokenProvider that fetches uses a pre-fetched XSTS ticket token.\n * Since requests to the Halo API are subject to CORS restrictions a\n * HaloAuthenticationClient can be instantitated with a pre-fetched XSTS ticket\n * and run on a server (such as one provided by the user).\n */\nexport class StaticXstsTicketTokenSpartanTokenProvider\n  implements SpartanTokenProvider\n{\n  public readonly getSpartanToken: () => Promise<string>;\n  public readonly clearSpartanToken: () => Promise<void>;\n\n  constructor(\n    xstsTicketToken: string,\n    tokenPersister?: TokenPersister | Promise<TokenPersister>\n  ) {\n    let actualTokenPersister: TokenPersister | Promise<TokenPersister>;\n    if (tokenPersister) {\n      actualTokenPersister = tokenPersister;\n    } else {\n      actualTokenPersister = inMemoryTokenPersister;\n    }\n\n    const haloAuthClient = new HaloAuthenticationClient(\n      () => xstsTicketToken,\n      async () => {\n        console.warn(\n          \"StaticXstsTicketTokenSpartanTokenProvider does not clearing xstsTickets\"\n        );\n      },\n      async () =>\n        (await (await actualTokenPersister).load(\"halo.authToken\")) ?? null,\n      async (token) => {\n        await (await actualTokenPersister).save(\"halo.authToken\", token);\n      },\n      async () => {\n        await (await actualTokenPersister).clear(\"halo.authToken\");\n      }\n    );\n\n    this.getSpartanToken = () => haloAuthClient.getSpartanToken();\n    this.clearSpartanToken = () => haloAuthClient.clearSpartanToken();\n  }\n}\n","import { RequestError } from \"../util/request-error\";\nimport { FetchFunction, defaultFetch } from \"../util/fetch-function\";\nimport { XboxTokenProvider } from \"./token-providers/xbox-token-provider\";\nimport { unauthorizedRetryPolicy } from \"./request-policy\";\nimport { unwrapPlayerId } from \"../util/xuid\";\n\nexport class XboxClient {\n  constructor(\n    private readonly xboxTokenProvider: XboxTokenProvider,\n    private readonly fetchFn: FetchFunction = defaultFetch\n  ) {}\n\n  private async executeRequest<T>(url: string, init: RequestInit): Promise<T> {\n    const failureHandler = unauthorizedRetryPolicy.onFailure(\n      async ({ handled }) => {\n        if (handled) {\n          await this.xboxTokenProvider.clearXboxLiveV3Token();\n        }\n      }\n    );\n    try {\n      return await unauthorizedRetryPolicy.execute(async () => {\n        const headers = new Headers(init.headers);\n        if (!headers.has(\"Accept\")) {\n          headers.set(\"Accept\", \"application/json\");\n        }\n        if (!headers.has(\"Authorization\")) {\n          headers.set(\n            \"Authorization\",\n            await this.xboxTokenProvider.getXboxLiveV3Token()\n          );\n        }\n        if (!headers.has(\"x-xbl-contract-version\")) {\n          headers.set(\"x-xbl-contract-version\", \"3\");\n        }\n        const response = await this.fetchFn(url, {\n          ...init,\n          headers,\n        });\n\n        if (response.status >= 200 && response.status < 300) {\n          return (await response.json()) as T;\n        } else {\n          throw new RequestError(url, response);\n        }\n      });\n    } finally {\n      failureHandler.dispose();\n    }\n  }\n\n  public async searchUsers(\n    query: string,\n    maxItems: number = 5,\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) {\n    const { people } = await this.executeRequest<{\n      people: [\n        {\n          xuid: string;\n          gamertag: string;\n          displayPicRaw: string;\n        }\n      ];\n    }>(\n      `https://peoplehub.xboxlive.com/users/me/people/search?q=${encodeURIComponent(\n        query\n      )}&maxItems=${maxItems}`,\n      { ...init, method: \"GET\" }\n    );\n    return people;\n  }\n\n  public async recentPlayers(init?: Omit<RequestInit, \"body\" | \"method\">) {\n    return await this.executeRequest<unknown>(\n      \"https://peoplehub.xboxlive.com/users/me/people/recentplayers\",\n      { ...init, method: \"GET\" }\n    );\n  }\n\n  public async getProfiles(\n    xuids: string[],\n    settings: string[],\n    init?: Omit<RequestInit, \"body\" | \"method\">\n  ) {\n    init?.headers;\n    return await this.executeRequest<{\n      profileUsers: {\n        id: string;\n        settings: { id: string; value: string }[];\n      }[];\n    }>(\"https://profile.xboxlive.com/users/batch/profile/settings\", {\n      ...init,\n      headers: {\n        ...init?.headers,\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        userIds: xuids.map(unwrapPlayerId),\n        settings,\n      }),\n    });\n  }\n}\n","export enum GameVariantCategory {\n  MultiplayerSlayer = 6,\n  MultiplayerAttrition = 7,\n  MultiplayerElimination = 8,\n  MultiplayerFiesta = 9,\n  MultiplayerStrongholds = 11,\n  MultiplayerKingOfTheHill = 12,\n  MultiplayerTotalControl = 14,\n  MultiplayerCtf = 15,\n  MultiplayerExtraction = 17,\n  MultiplayerOddball = 18,\n  MultiplayerStockpile = 19,\n  MultiplayerInfection = 22,\n  MultiplayerVIP = 23,\n  MultiplayerEscalation = 24,\n  MultiplayerGrifball = 25,\n  MultiplayerLandGrab = 39,\n  MultiplayerMinigame = 41,\n  MultiplayerFirefight = 42,\n}\n","export enum MatchOutcome {\n  Tie = 1,\n  Win = 2,\n  Loss = 3,\n  DidNotFinish = 4,\n}\n","export enum Privacy {\n  Show = 1,\n  Hide = 2,\n}\n\nexport interface MatchesPrivacy {\n  MatchmadeGames: Privacy;\n  OtherGames: Privacy;\n}\n","export enum PlaylistExperience {\n  Arena = 2,\n  Social = 3,\n  Featured = 5,\n}\n","import { ApiFormattedDate } from \"./api-formatted-date\";\n\nexport enum ProgressionFileType {\n  Seasons = \"Seasons\",\n  Calendars = \"Calendars\",\n  \"Csr/Seasons\" = \"Csr/Seasons\",\n}\n\nexport type ProgressionFileTypeMap = {\n  Calendars: SeasonCalendarProgressionFile;\n  Seasons: SeasonProgressionFile;\n  [\"Csr/Seasons\"]: CsrSeasonCalendarProgressionFile;\n};\n\nexport interface SeasonCalendarProgressionFile {\n  Seasons: {\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\n    OperationTrackPath: `RewardTracks/Operations/${string}.json`;\n    SeasonMetadata: `Seasons/${string}.json`;\n    StartDate: ApiFormattedDate;\n    EndDate: ApiFormattedDate;\n  }[];\n  Events: {\n    RewardTrackPath: `RewardTracks/Events/Rituals/${string}.json`;\n    StartDate: ApiFormattedDate;\n    EndDate: ApiFormattedDate;\n  }[];\n  CareerRank: { RewardTrackPath: `RewardTracks/CareerRanks/${string}.json` };\n}\n\nexport interface CsrSeasonCalendarProgressionFile {\n  Seasons: {\n    CsrSeasonFilePath: `Csr/Seasons/${string}.json`;\n    StartDate: ApiFormattedDate;\n    EndDate: ApiFormattedDate;\n  }[];\n}\n\nexport interface SeasonProgressionFile {\n  DateRange: string;\n  Name: string;\n  Logo: string;\n  Number: number;\n  Description: string;\n  SummaryBackgroundPath: string;\n  BattlePassSeasonUpsellBackgroundImage: string;\n  ChallengesBackgroundPath: string;\n  BattlePassLogoImage: string;\n  SeasonLogoImage: string;\n  RitualLogoImage: string;\n  StorefrontBackgroundImage: string;\n  CardBackgroundImage: string;\n  ProgressionBackgroundImage: string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/halo-infinite-api/src/core/halo-infinite-client.test.ts b/node_modules/halo-infinite-api/src/core/halo-infinite-client.test.ts
index 23f785a..8d82fba 100644
--- a/node_modules/halo-infinite-api/src/core/halo-infinite-client.test.ts
+++ b/node_modules/halo-infinite-api/src/core/halo-infinite-client.test.ts
@@ -12,6 +12,7 @@ describe("Halo Infinite Client", () => {
           .mocked(spartanTokenProvider.getSpartanToken)
           .mockResolvedValueOnce("valid");
         mockFetch.mockResolvedValueOnce({
+          ok: true,
           status: 200,
           json: jest.fn(),
         });
diff --git a/node_modules/halo-infinite-api/src/core/token-persisters/token-persisters.test.ts b/node_modules/halo-infinite-api/src/core/token-persisters/token-persisters.test.ts
new file mode 100644
index 0000000..1b4f2b5
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/core/token-persisters/token-persisters.test.ts
@@ -0,0 +1,49 @@
+import { inMemoryTokenPersister } from "./in-memory-token-persister";
+import { nodeFsTokenPersister } from "./node-fs-token-persister";
+import { mkdtempSync, rmSync } from "fs";
+import { tmpdir } from "os";
+import { join } from "path";
+
+// Node only tests
+
+describe("inMemoryTokenPersister", () => {
+  test("save and load", () => {
+    inMemoryTokenPersister.clear("t1");
+    expect(inMemoryTokenPersister.load("t1")).toBeUndefined();
+    inMemoryTokenPersister.save("t1", { a: 1 });
+    expect(inMemoryTokenPersister.load("t1")).toEqual({ a: 1 });
+  });
+  test("clear removes token", () => {
+    inMemoryTokenPersister.save("t2", { b: 2 });
+    inMemoryTokenPersister.clear("t2");
+    expect(inMemoryTokenPersister.load("t2")).toBeUndefined();
+  });
+});
+
+describe("nodeFsTokenPersister", () => {
+  let dir: string;
+  const prev = process.env.TOKEN_ROOT;
+  beforeEach(() => {
+    dir = mkdtempSync(join(tmpdir(), "hitokens-"));
+    process.env.TOKEN_ROOT = dir;
+  });
+  afterEach(() => {
+    process.env.TOKEN_ROOT = prev;
+    rmSync(dir, { recursive: true, force: true });
+  });
+  test("save persists to disk and load reads it", async () => {
+    await nodeFsTokenPersister.save("diskToken", { x: 42 });
+    const loaded = await nodeFsTokenPersister.load("diskToken");
+    expect(loaded).toEqual({ x: 42 });
+  });
+  test("load returns null for missing", async () => {
+    const loaded = await nodeFsTokenPersister.load("missing");
+    expect(loaded).toBeNull();
+  });
+  test("clear removes token file", async () => {
+    await nodeFsTokenPersister.save("abc", { z: 9 });
+    await nodeFsTokenPersister.clear("abc");
+    const loaded = await nodeFsTokenPersister.load("abc");
+    expect(loaded).toBeNull();
+  });
+});
diff --git a/node_modules/halo-infinite-api/src/util/date-time.test.ts b/node_modules/halo-infinite-api/src/util/date-time.test.ts
new file mode 100644
index 0000000..8fd57bf
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/util/date-time.test.ts
@@ -0,0 +1,22 @@
+import { DateTime } from "luxon";
+import { coalesceDateTime } from "./date-time";
+
+describe("date-time util", () => {
+  test("coalesces DateTime directly", () => {
+    const dt = DateTime.now();
+    expect(coalesceDateTime(dt)).toBe(dt);
+  });
+  test("coalesces Date", () => {
+    const d = new Date();
+    const dt = coalesceDateTime(d);
+    expect(dt?.toISO()).toBeDefined();
+  });
+  test("coalesces ISO string", () => {
+    const iso = DateTime.now().toISO();
+    const dt = coalesceDateTime(iso);
+    expect(dt?.toISO()).toBe(iso);
+  });
+  test("returns undefined for other", () => {
+    expect(coalesceDateTime(123)).toBeUndefined();
+  });
+});
diff --git a/node_modules/halo-infinite-api/src/util/expiry-token-cache.test.ts b/node_modules/halo-infinite-api/src/util/expiry-token-cache.test.ts
new file mode 100644
index 0000000..dc928ad
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/util/expiry-token-cache.test.ts
@@ -0,0 +1,111 @@
+import { DateTime } from "luxon";
+import { ExpiryTokenCache } from "./expiry-token-cache";
+
+interface TestToken {
+  token: string;
+  expiresAt: DateTime;
+  value?: number;
+}
+
+describe("ExpiryTokenCache", () => {
+  test("returns existing in-flight token when valid", async () => {
+    let generateCalls = 0;
+    const cache = new ExpiryTokenCache<TestToken, []>(
+      async () => {
+        generateCalls++;
+        return { token: "A", expiresAt: DateTime.now().plus({ minutes: 5 }) };
+      },
+      async () => null
+    );
+
+    const [t1, t2] = await Promise.all([cache.getToken(), cache.getToken()]);
+    expect(t1.token).toBe("A");
+    expect(t2).toBe(t1);
+    expect(generateCalls).toBe(1);
+  });
+
+  test("regenerates token when cached token expired", async () => {
+    let callIndex = 0;
+    const cache = new ExpiryTokenCache<TestToken, []>(
+      async () => {
+        callIndex++;
+        if (callIndex === 1) {
+          // Return an already expired token
+          return {
+            token: `T${callIndex}`,
+            expiresAt: DateTime.now().minus({ minutes: 2 }),
+          };
+        }
+        return {
+          token: `T${callIndex}`,
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async () => null
+    );
+
+    const expired = await cache.getToken();
+    expect(expired.token).toBe("T1");
+    // Second call should regenerate
+    const refreshed = await cache.getToken();
+    expect(refreshed.token).toBe("T2");
+  });
+
+  test("uses existing persisted token if still valid", async () => {
+    const future = DateTime.now().plus({ minutes: 10 });
+    const existing = { token: "persisted", expiresAt: future.toISO() } as any;
+    let generateCalls = 0;
+    const cache = new ExpiryTokenCache<TestToken, []>(
+      async () => {
+        generateCalls++;
+        return {
+          token: "generated",
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async () => existing
+    );
+
+    const t = await cache.getToken();
+    expect(t.token).toBe("persisted");
+    expect(generateCalls).toBe(0);
+  });
+
+  test("falls back to generation if persisted token expired", async () => {
+    const past = DateTime.now().minus({ minutes: 1 });
+    const existing = { token: "old", expiresAt: past.toISO() } as any;
+    let generateCalls = 0;
+    const cache = new ExpiryTokenCache<TestToken, []>(
+      async () => {
+        generateCalls++;
+        return { token: "new", expiresAt: DateTime.now().plus({ minutes: 5 }) };
+      },
+      async () => existing
+    );
+
+    const t = await cache.getToken();
+    expect(t.token).toBe("new");
+    expect(generateCalls).toBe(1);
+  });
+
+  test("clears token resets fetch promise", async () => {
+    let generateCalls = 0;
+    const cache = new ExpiryTokenCache<TestToken, []>(
+      async () => {
+        generateCalls++;
+        return {
+          token: `tok${generateCalls}`,
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async () => null
+    );
+
+    const t1 = await cache.getToken();
+    expect(t1.token).toBe("tok1");
+    cache.clearToken();
+    const t2 = await cache.getToken();
+    expect(t2.token).toBe("tok2");
+    expect(generateCalls).toBe(2);
+  });
+});
diff --git a/node_modules/halo-infinite-api/src/util/keyed-expiry-token-cache.test.ts b/node_modules/halo-infinite-api/src/util/keyed-expiry-token-cache.test.ts
new file mode 100644
index 0000000..5060317
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/util/keyed-expiry-token-cache.test.ts
@@ -0,0 +1,114 @@
+import { DateTime } from "luxon";
+import { KeyedExpiryTokenCache } from "./keyed-expiry-token-cache";
+
+interface TestToken {
+  key: string;
+  token: string;
+  expiresAt: DateTime;
+}
+
+describe("KeyedExpiryTokenCache", () => {
+  test("separate keys do not interfere", async () => {
+    let calls: Record<string, number> = {};
+    const cache = new KeyedExpiryTokenCache<TestToken, string, []>(
+      async (key) => {
+        calls[key] = (calls[key] || 0) + 1;
+        return {
+          key,
+          token: `${key}-t${calls[key]}`,
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async () => null
+    );
+
+    const [a1, b1] = await Promise.all([
+      cache.getToken("A"),
+      cache.getToken("B"),
+    ]);
+    const a2 = await cache.getToken("A");
+    expect(a1.token).toBe("A-t1");
+    expect(b1.token).toBe("B-t1");
+    expect(a2.token).toBe("A-t1");
+    expect(calls["A"]).toBe(1);
+    expect(calls["B"]).toBe(1);
+  });
+
+  test("expired token per key regenerates only that key", async () => {
+    let calls: Record<string, number> = {};
+    const cache = new KeyedExpiryTokenCache<TestToken, string, []>(
+      async (key) => {
+        calls[key] = (calls[key] || 0) + 1;
+        return {
+          key,
+          token: `${key}-t${calls[key]}`,
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async () => null
+    );
+
+    const t1 = await cache.getToken("A");
+    // force expired for A
+    (cache as any).tokenFetchPromiseMap.set(
+      "A",
+      Promise.resolve({
+        key: "A",
+        token: "expired",
+        expiresAt: DateTime.now().minus({ minutes: 2 }),
+      })
+    );
+    const t2 = await cache.getToken("A");
+    expect(t2.token).toBe("A-t2");
+    const b = await cache.getToken("B");
+    expect(b.token).toBe("B-t1");
+  });
+
+  test("existing persisted token reused if fresh (> -1 minute)", async () => {
+    const future = DateTime.now().plus({ minutes: 5 });
+    const existing: any = {
+      key: "A",
+      token: "persisted",
+      expiresAt: future.toISO(),
+    };
+    let calls = 0;
+    const cache = new KeyedExpiryTokenCache<TestToken, string, []>(
+      async (key) => {
+        calls++;
+        return {
+          key,
+          token: "generated",
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async (key) => (key === "A" ? existing : null)
+    );
+
+    const t = await cache.getToken("A");
+    expect(t.token).toBe("persisted");
+    expect(calls).toBe(0);
+  });
+
+  test("clearToken removes only one key", async () => {
+    let calls: Record<string, number> = {};
+    const cache = new KeyedExpiryTokenCache<TestToken, string, []>(
+      async (key) => {
+        calls[key] = (calls[key] || 0) + 1;
+        return {
+          key,
+          token: `${key}-t${calls[key]}`,
+          expiresAt: DateTime.now().plus({ minutes: 5 }),
+        };
+      },
+      async () => null
+    );
+
+    await cache.getToken("A");
+    await cache.getToken("B");
+    cache.clearToken("A");
+    const a2 = await cache.getToken("A");
+    const b2 = await cache.getToken("B");
+    expect(a2.token).toBe("A-t2");
+    expect(b2.token).toBe("B-t1");
+  });
+});
diff --git a/node_modules/halo-infinite-api/src/util/request-error.test.ts b/node_modules/halo-infinite-api/src/util/request-error.test.ts
new file mode 100644
index 0000000..bd4bc1f
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/util/request-error.test.ts
@@ -0,0 +1,18 @@
+import { RequestError } from "./request-error";
+
+describe("RequestError", () => {
+  test("formats message with string url", () => {
+    const response = new Response(null, { status: 404 });
+    const err = new RequestError("https://example.com/test", response);
+    expect(err.message).toBe("404 from https://example.com/test");
+    expect(err.url).toBe("https://example.com/test");
+    expect(err.name).toBe("RequestError");
+  });
+  test("formats message with Request object", () => {
+    const req = new Request("https://site.local/api");
+    const response = new Response(null, { status: 500 });
+    const err = new RequestError(req, response);
+    expect(err.message).toBe("500 from https://site.local/api");
+    expect(err.url).toBe("https://site.local/api");
+  });
+});
diff --git a/node_modules/halo-infinite-api/src/util/resolvable-promise.test.ts b/node_modules/halo-infinite-api/src/util/resolvable-promise.test.ts
new file mode 100644
index 0000000..911278e
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/util/resolvable-promise.test.ts
@@ -0,0 +1,26 @@
+import { ResolvablePromise } from "./resolvable-promise";
+
+describe("ResolvablePromise", () => {
+  test("resolves externally", async () => {
+    const p = new ResolvablePromise<number>();
+    setTimeout(() => p.resolve(5), 0);
+    const v = await p;
+    expect(v).toBe(5);
+    expect(p.isCompleted).toBe(true);
+  });
+  test("rejects externally", async () => {
+    const p = new ResolvablePromise<number>();
+    setTimeout(() => p.reject(new Error("nope")), 0);
+    await expect(p).rejects.toThrow("nope");
+    expect(p.isCompleted).toBe(true);
+  });
+  test("only first resolve wins", async () => {
+    const p = new ResolvablePromise<number>();
+    p.resolve(1);
+    // Subsequent resolves are ignored by underlying promise state
+    // but we still mark completed already
+    p.resolve(2);
+    const v = await p;
+    expect(v).toBe(1);
+  });
+});
diff --git a/node_modules/halo-infinite-api/src/util/xuid.test.ts b/node_modules/halo-infinite-api/src/util/xuid.test.ts
new file mode 100644
index 0000000..0cac61b
--- /dev/null
+++ b/node_modules/halo-infinite-api/src/util/xuid.test.ts
@@ -0,0 +1,16 @@
+import { wrapPlayerId, unwrapPlayerId } from "./xuid";
+
+describe("xuid util", () => {
+  test("wraps plain numeric id", () => {
+    expect(wrapPlayerId("12345")).toBe("xuid(12345)");
+  });
+  test("does not double wrap", () => {
+    expect(wrapPlayerId("xuid(12345)")).toBe("xuid(12345)");
+  });
+  test("unwrap extracts numeric id", () => {
+    expect(unwrapPlayerId("xuid(678)")).toBe("678");
+  });
+  test("unwrap returns original if not pattern", () => {
+    expect(unwrapPlayerId("abc")).toBe("abc");
+  });
+});
