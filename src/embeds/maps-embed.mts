import type { APIEmbed, APIInteractionResponseCallbackData, APIMessageTopLevelComponent } from "discord-api-types/v10";
import { ComponentType, ButtonStyle } from "discord-api-types/v10";
import type { CountType } from "../services/halo/halo.mjs";
import { PlaylistType, FormatType } from "../services/halo/halo.mjs";
import { HCS_LAST_UPDATED, type MapMode } from "../services/halo/hcs.mjs";
import type { DiscordService } from "../services/discord/discord.mjs";
import { GAMECOACH_GG_URLS } from "../commands/maps/gamecoachgg.mjs";
import { BaseTableEmbed } from "./base-table-embed.mjs";

export enum InteractionComponent {
  Initiate = "btn_maps_initiate",
  Roll1 = "btn_maps_roll_1",
  Roll3 = "btn_maps_roll_3",
  Roll5 = "btn_maps_roll_5",
  Roll7 = "btn_maps_roll_7",
  PlaylistSelect = "select_maps_playlist",
  FormatSelect = "select_maps_format",
  Repost = "btn_maps_repost",
}

interface MapsEmbedData {
  userId: string;
  count: CountType;
  playlist: PlaylistType;
  format: FormatType;
  maps: {
    mode: MapMode;
    map: string;
  }[];
}

interface MapsEmbedServices {
  discordService: DiscordService;
}

export class MapsEmbed extends BaseTableEmbed {
  private readonly services: MapsEmbedServices;
  private readonly data: MapsEmbedData;

  constructor(services: MapsEmbedServices, data: MapsEmbedData) {
    super();
    this.services = services;
    this.data = data;
  }

  get embed(): APIEmbed {
    const { playlist, maps, userId } = this.data;
    const { discordService } = this.services;

    const userDisplay = `<@${userId}>`;

    const embed: APIEmbed = {
      title: `Maps: ${playlist}`,
      color: 0x5865f2,
      timestamp: HCS_LAST_UPDATED,
      footer: {
        text: `Generated by ${userDisplay}`,
      },
    };

    const titles = ["#", "Mode", "Map"];
    const data = [
      titles, // Header row
      ...maps.map(({ mode, map }, index) => {
        const gamecoachGgUrl = GAMECOACH_GG_URLS[map];
        const mapDisplay =
          gamecoachGgUrl != null
            ? `[${map} ${discordService.getEmojiFromName("GameCoachGG")}](${gamecoachGgUrl})`
            : map;
        return [String(index + 1), mode, mapDisplay];
      }),
    ];

    this.addEmbedFields(embed, titles, data);

    // Add the "Generated by" field
    embed.fields ??= [];
    embed.fields.push({
      name: "",
      value: `-# Generated by ${userDisplay}`,
    });

    return embed;
  }

  get actions(): APIMessageTopLevelComponent[] {
    const { count, playlist, format } = this.data;

    return [
      {
        type: ComponentType.ActionRow,
        components: [
          {
            type: ComponentType.Button,
            custom_id: InteractionComponent.Roll1,
            label: "Regen maps (count: 1)",
            style: count === 1 ? ButtonStyle.Primary : ButtonStyle.Secondary,
          },
          {
            type: ComponentType.Button,
            custom_id: InteractionComponent.Roll3,
            label: "Regen maps (count: 3)",
            style: count === 3 ? ButtonStyle.Primary : ButtonStyle.Secondary,
          },
          {
            type: ComponentType.Button,
            custom_id: InteractionComponent.Roll5,
            label: "Regen maps (count: 5)",
            style: count === 5 ? ButtonStyle.Primary : ButtonStyle.Secondary,
          },
          {
            type: ComponentType.Button,
            custom_id: InteractionComponent.Roll7,
            label: "Regen maps (count: 7)",
            style: count === 7 ? ButtonStyle.Primary : ButtonStyle.Secondary,
          },
        ],
      },
      {
        type: ComponentType.ActionRow,
        components: [
          {
            type: ComponentType.StringSelect,
            custom_id: InteractionComponent.PlaylistSelect,
            options: [
              {
                label: PlaylistType.HcsCurrent,
                value: PlaylistType.HcsCurrent,
                description: `The current maps and modes of HCS (as of ${HCS_LAST_UPDATED})`,
                default: playlist === PlaylistType.HcsCurrent,
              },
              {
                label: PlaylistType.HcsHistorical,
                value: PlaylistType.HcsHistorical,
                description: "All maps and modes that have been played at any HCS major event",
                default: playlist === PlaylistType.HcsHistorical,
              },
            ],
            placeholder: "Select a playlist",
          },
        ],
      },
      {
        type: ComponentType.ActionRow,
        components: [
          {
            type: ComponentType.StringSelect,
            custom_id: InteractionComponent.FormatSelect,
            options: [
              {
                label: FormatType.Hcs,
                value: FormatType.Hcs,
                description: "Obj, slayer, obj, obj, slayer, ...",
                default: format === FormatType.Hcs,
              },
              {
                label: FormatType.Random,
                value: FormatType.Random,
                description: "Randomly pick objective or slayer for each map",
                default: format === FormatType.Random,
              },
              {
                label: FormatType.RandomObjective,
                value: FormatType.RandomObjective,
                description: "Only pick objective modes",
                default: format === FormatType.RandomObjective,
              },
              {
                label: FormatType.RandomSlayer,
                value: FormatType.RandomSlayer,
                description: "Only pick slayer modes",
                default: format === FormatType.RandomSlayer,
              },
            ],
          },
        ],
      },
      {
        type: ComponentType.ActionRow,
        components: [
          {
            type: ComponentType.Button,
            custom_id: InteractionComponent.Repost,
            label: "Move to bottom of chat",
            style: ButtonStyle.Secondary,
            emoji: {
              name: "‚è¨",
            },
          },
        ],
      },
    ];
  }

  toMessageData(): APIInteractionResponseCallbackData {
    return {
      embeds: [this.embed],
      components: this.actions,
    };
  }
}
