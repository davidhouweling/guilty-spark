import type { MockInstance } from "vitest";
import { describe, it, expect, vi, beforeEach } from "vitest";
import { MapsEmbed } from "../maps-embed.mjs";
import type { DiscordService } from "../../services/discord/discord.mjs";
import { aFakeDiscordServiceWith } from "../../services/discord/fakes/discord.fake.mjs";
import { MapsPlaylistType, MapsFormatType } from "../../services/database/types/guild_config.mjs";

describe("MapsEmbed", () => {
  let discordService: DiscordService;
  let getEmojiFromNameSpy: MockInstance<typeof discordService.getEmojiFromName>;
  const testUserId = "user123";

  const mockMaps = [
    { mode: "Slayer" as const, map: "Aquarius" },
    { mode: "Capture the Flag" as const, map: "Fortress" },
    { mode: "Strongholds" as const, map: "Live Fire" },
  ];

  const mockAvailableModes = ["Slayer" as const, "Capture the Flag" as const, "Strongholds" as const];

  beforeEach(() => {
    discordService = aFakeDiscordServiceWith();
    getEmojiFromNameSpy = vi.spyOn(discordService, "getEmojiFromName").mockReturnValue("ðŸŽ®");
  });

  it("creates embed with correct title and maps data", () => {
    const mapsEmbed = new MapsEmbed(
      { discordService },
      {
        userId: testUserId,
        count: 3,
        playlist: MapsPlaylistType.HCS_CURRENT,
        format: MapsFormatType.HCS,
        maps: mockMaps,
        availableModes: mockAvailableModes,
      },
    );

    const { embed } = mapsEmbed;

    expect(embed.title).toBe("Maps: HCS - Current");
    expect(embed.color).toBe(0x5865f2);
    expect(embed.fields).toHaveLength(4); // 3 columns + 1 generated by field

    // Check the fields structure
    expect(embed.fields?.[0]).toEqual({
      name: "#",
      value: "1\n2\n3",
      inline: true,
    });
    expect(embed.fields?.[1]).toEqual({
      name: "Mode",
      value: "Slayer\nCapture the Flag\nStrongholds",
      inline: true,
    });
    expect(embed.fields?.[2]).toEqual({
      name: "Map",
      value:
        "[Aquarius ðŸŽ®](https://gamecoach.gg/esports/haloinfinite/aquarius)\n[Fortress ðŸŽ®](https://gamecoach.gg/esports/haloinfinite/fortress)\n[Live Fire ðŸŽ®](https://gamecoach.gg/esports/haloinfinite/livefire)",
      inline: true,
    });
    expect(embed.fields?.[3]).toEqual({
      name: "",
      value: "-# Generated by <@user123>",
    });
  });

  it("creates action components", () => {
    const mapsEmbed = new MapsEmbed(
      { discordService },
      {
        userId: testUserId,
        count: 5,
        playlist: MapsPlaylistType.HCS_CURRENT,
        format: MapsFormatType.RANDOM,
        maps: mockMaps,
        availableModes: mockAvailableModes,
      },
    );

    const { actions } = mapsEmbed;

    expect(actions).toHaveLength(4); // 4 action rows
  });

  it("returns complete message data", () => {
    const mapsEmbed = new MapsEmbed(
      { discordService },
      {
        userId: testUserId,
        count: 3,
        playlist: MapsPlaylistType.HCS_CURRENT,
        format: MapsFormatType.HCS,
        maps: mockMaps,
        availableModes: mockAvailableModes,
      },
    );

    const messageData = mapsEmbed.toMessageData();

    expect(messageData.embeds?.length).toBe(1);
    expect(messageData.components?.length).toBe(4);
    expect(messageData.embeds?.[0]).toStrictEqual(mapsEmbed.embed);
    expect(messageData.components).toStrictEqual(mapsEmbed.actions);
  });

  it("handles maps with GameCoach.gg URLs", () => {
    const mapsWithUrl = [
      { mode: "Slayer" as const, map: "Aquarius" }, // Has GameCoach.gg URL
    ];

    const mapsEmbed = new MapsEmbed(
      { discordService },
      {
        userId: testUserId,
        count: 1,
        playlist: MapsPlaylistType.HCS_CURRENT,
        format: MapsFormatType.HCS,
        maps: mapsWithUrl,
        availableModes: ["Slayer"],
      },
    );

    const { embed } = mapsEmbed;
    const mapField = embed.fields?.[2]; // Map column

    // Should include the GameCoach.gg link
    expect(mapField?.value).toContain("[Aquarius ðŸŽ®]");
    expect(getEmojiFromNameSpy).toHaveBeenCalledWith("GameCoachGG");
  });

  it("shows only slayer format option when playlist has no objective modes", () => {
    const slayerOnlyMaps = [{ mode: "Slayer" as const, map: "Aquarius" }];

    const mapsEmbed = new MapsEmbed(
      { discordService },
      {
        userId: testUserId,
        count: 1,
        playlist: MapsPlaylistType.RANKED_SLAYER,
        format: MapsFormatType.SLAYER,
        maps: slayerOnlyMaps,
        availableModes: ["Slayer"],
      },
    );

    const { actions } = mapsEmbed;
    // Should have 4 action rows
    expect(actions).toHaveLength(4);
  });

  it("shows all format options when playlist has objective modes", () => {
    const mapsEmbed = new MapsEmbed(
      { discordService },
      {
        userId: testUserId,
        count: 3,
        playlist: MapsPlaylistType.HCS_CURRENT,
        format: MapsFormatType.HCS,
        maps: mockMaps,
        availableModes: mockAvailableModes,
      },
    );

    const { actions } = mapsEmbed;
    // Should have 4 action rows
    expect(actions).toHaveLength(4);
  });
});
